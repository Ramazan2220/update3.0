#!/usr/bin/env python3
"""
–£–ü–†–û–©–ï–ù–ù–´–ô –ê–î–ú–ò–ù –ë–û–¢ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
–ë–µ–∑ SQLAlchemy - —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
"""

import sys
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, '.')
sys.path.insert(0, './utils')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_BOT_TOKEN = '8092949155:AAEs6GSSqEU4C_3qNkskqVNAdcoAUHZi0fE'

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = [6499246016]

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS

def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = [
        [InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")],
        [InlineKeyboardButton("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="check_access")],
        [InlineKeyboardButton("üîÑ –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", callback_data="test_sync")]
    ]
    
    text = """ü§ñ **–£–ü–†–û–©–ï–ù–ù–´–ô –ê–î–ú–ò–ù –ë–û–¢**

üéØ **–¶–µ–ª—å:** –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

‚úÖ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

üöÄ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"""

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    data = query.data
    
    if data == "add_user":
        handle_add_user(query, context)
    elif data == "delete_user":
        handle_delete_user(query, context)
    elif data == "check_access":
        handle_check_access(query, context)
    elif data == "test_sync":
        handle_test_sync(query, context)
    elif data.startswith("add_user_"):
        execute_add_user(query, context)
    elif data.startswith("delete_user_"):
        execute_delete_user(query, context)

def handle_add_user(query, context):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å ID: 6626270112", callback_data="add_user_6626270112")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å ID: 999999999", callback_data="add_user_999999999")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    text = """‚ûï **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**

üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"""

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def handle_delete_user(query, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ID: 6626270112", callback_data="delete_user_6626270112")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ID: 999999999", callback_data="delete_user_999999999")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    text = """üóëÔ∏è **–£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"""

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def execute_add_user(query, context):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(query.data.split('_')[-1])
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        from utils.access_manager import add_user_access, has_access
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"üü¢ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        result = add_user_access(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
        access_check = has_access(user_id)
        
        if result and access_check:
            text = f"""‚úÖ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –î–û–ë–ê–í–õ–ï–ù**

üë§ **ID:** `{user_id}`
üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}
‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** {access_check}
üïê **–í—Ä–µ–º—è:** –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ

üéâ **–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!**"""
            status = "‚úÖ"
        else:
            text = f"""‚ùå **–û–®–ò–ë–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø**

üë§ **ID:** `{user_id}`
üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}
‚ùå **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** {access_check}

‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê –° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô!**"""
            status = "‚ùå"
            
        logger.info(f"{status} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: result={result}, access={access_check}")
        
    except Exception as e:
        text = f"""üí• **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê**

üë§ **ID:** `{user_id}`
‚ùå **–û—à–∏–±–∫–∞:** `{str(e)}`

üîß **–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã!**"""
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def execute_delete_user(query, context):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(query.data.split('_')[-1])
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        from utils.access_manager import delete_user_completely, has_access
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"üî¥ –ê–¥–º–∏–Ω —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        result = delete_user_completely(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
        access_check = has_access(user_id)
        
        if result and not access_check:
            text = f"""‚úÖ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–î–ê–õ–ï–ù**

üë§ **ID:** `{user_id}`
üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}
‚ùå **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** {access_check}
üïê **–í—Ä–µ–º—è:** –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ

üéâ **–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!**"""
            status = "‚úÖ"
        else:
            text = f"""‚ùå **–û–®–ò–ë–ö–ê –£–î–ê–õ–ï–ù–ò–Ø**

üë§ **ID:** `{user_id}`
üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}
‚ö†Ô∏è **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** {access_check}

‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê –° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô!**"""
            status = "‚ùå"
            
        logger.info(f"{status} –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: result={result}, access={access_check}")
        
    except Exception as e:
        text = f"""üí• **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê**

üë§ **ID:** `{user_id}`
‚ùå **–û—à–∏–±–∫–∞:** `{str(e)}`

üîß **–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã!**"""
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def handle_check_access(query, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from utils.access_manager import has_access
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        test_users = [6626270112, 999999999, 6499246016]
        
        text = "üìã **–ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê**\n\n"
        
        for user_id in test_users:
            access = has_access(user_id)
            status = "üü¢ –ï–°–¢–¨" if access else "üî¥ –ù–ï–¢"
            text += f"üë§ `{user_id}`: {status}\n"
            
        text += f"\nüïê **–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
        
    except Exception as e:
        text = f"""üí• **–û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò**

‚ùå **–û—à–∏–±–∫–∞:** `{str(e)}`"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def handle_test_sync(query, context):
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        from utils.access_manager import add_user_access, delete_user_completely, has_access
        
        test_id = 888777666
        text = "üîÑ **–¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò**\n\n"
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial = has_access(test_id)
        text += f"1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'üü¢' if initial else 'üî¥'}\n"
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º
        add_result = add_user_access(test_id)
        after_add = has_access(test_id)
        text += f"2Ô∏è‚É£ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {'üü¢' if after_add else 'üî¥'}\n"
        
        # 3. –£–¥–∞–ª—è–µ–º
        delete_result = delete_user_completely(test_id)
        after_delete = has_access(test_id)
        text += f"3Ô∏è‚É£ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {'üü¢' if after_delete else 'üî¥'}\n"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if not initial and after_add and not after_delete:
            text += f"\nüéâ **–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!**\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!"
        else:
            text += f"\n‚ùå **–¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!**\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"
            
    except Exception as e:
        text = f"""üí• **–û–®–ò–ë–ö–ê –¢–ï–°–¢–ê**

‚ùå **–û—à–∏–±–∫–∞:** `{str(e)}`"""
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞...")
        print(f"üîë –¢–æ–∫–µ–Ω: {ADMIN_BOT_TOKEN[:10]}...")
        print(f"üë• –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        
        # –¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        from utils.access_manager import has_access
        print("‚úÖ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        updater = Updater(token=ADMIN_BOT_TOKEN, use_context=True)
        dp = updater.dispatcher
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CallbackQueryHandler(button_handler))
        
        # –ó–∞–ø—É—Å–∫
        updater.start_polling()
        print("üü¢ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        
        updater.idle()
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 
"""
–£–ü–†–û–©–ï–ù–ù–´–ô –ê–î–ú–ò–ù –ë–û–¢ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
–ë–µ–∑ SQLAlchemy - —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
"""

import sys
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, '.')
sys.path.insert(0, './utils')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_BOT_TOKEN = '8092949155:AAEs6GSSqEU4C_3qNkskqVNAdcoAUHZi0fE'

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = [6499246016]

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS

def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = [
        [InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")],
        [InlineKeyboardButton("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="check_access")],
        [InlineKeyboardButton("üîÑ –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", callback_data="test_sync")]
    ]
    
    text = """ü§ñ **–£–ü–†–û–©–ï–ù–ù–´–ô –ê–î–ú–ò–ù –ë–û–¢**

üéØ **–¶–µ–ª—å:** –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

‚úÖ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

üöÄ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"""

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    data = query.data
    
    if data == "add_user":
        handle_add_user(query, context)
    elif data == "delete_user":
        handle_delete_user(query, context)
    elif data == "check_access":
        handle_check_access(query, context)
    elif data == "test_sync":
        handle_test_sync(query, context)
    elif data.startswith("add_user_"):
        execute_add_user(query, context)
    elif data.startswith("delete_user_"):
        execute_delete_user(query, context)

def handle_add_user(query, context):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å ID: 6626270112", callback_data="add_user_6626270112")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å ID: 999999999", callback_data="add_user_999999999")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    text = """‚ûï **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**

üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"""

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def handle_delete_user(query, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ID: 6626270112", callback_data="delete_user_6626270112")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ID: 999999999", callback_data="delete_user_999999999")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    text = """üóëÔ∏è **–£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"""

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def execute_add_user(query, context):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(query.data.split('_')[-1])
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        from utils.access_manager import add_user_access, has_access
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"üü¢ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        result = add_user_access(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
        access_check = has_access(user_id)
        
        if result and access_check:
            text = f"""‚úÖ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –î–û–ë–ê–í–õ–ï–ù**

üë§ **ID:** `{user_id}`
üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}
‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** {access_check}
üïê **–í—Ä–µ–º—è:** –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ

üéâ **–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!**"""
            status = "‚úÖ"
        else:
            text = f"""‚ùå **–û–®–ò–ë–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø**

üë§ **ID:** `{user_id}`
üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}
‚ùå **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** {access_check}

‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê –° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô!**"""
            status = "‚ùå"
            
        logger.info(f"{status} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: result={result}, access={access_check}")
        
    except Exception as e:
        text = f"""üí• **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê**

üë§ **ID:** `{user_id}`
‚ùå **–û—à–∏–±–∫–∞:** `{str(e)}`

üîß **–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã!**"""
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def execute_delete_user(query, context):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(query.data.split('_')[-1])
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        from utils.access_manager import delete_user_completely, has_access
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"üî¥ –ê–¥–º–∏–Ω —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        result = delete_user_completely(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É
        access_check = has_access(user_id)
        
        if result and not access_check:
            text = f"""‚úÖ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–î–ê–õ–ï–ù**

üë§ **ID:** `{user_id}`
üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}
‚ùå **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** {access_check}
üïê **–í—Ä–µ–º—è:** –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ

üéâ **–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!**"""
            status = "‚úÖ"
        else:
            text = f"""‚ùå **–û–®–ò–ë–ö–ê –£–î–ê–õ–ï–ù–ò–Ø**

üë§ **ID:** `{user_id}`
üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}
‚ö†Ô∏è **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** {access_check}

‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê –° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô!**"""
            status = "‚ùå"
            
        logger.info(f"{status} –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: result={result}, access={access_check}")
        
    except Exception as e:
        text = f"""üí• **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê**

üë§ **ID:** `{user_id}`
‚ùå **–û—à–∏–±–∫–∞:** `{str(e)}`

üîß **–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã!**"""
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def handle_check_access(query, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from utils.access_manager import has_access
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        test_users = [6626270112, 999999999, 6499246016]
        
        text = "üìã **–ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê**\n\n"
        
        for user_id in test_users:
            access = has_access(user_id)
            status = "üü¢ –ï–°–¢–¨" if access else "üî¥ –ù–ï–¢"
            text += f"üë§ `{user_id}`: {status}\n"
            
        text += f"\nüïê **–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
        
    except Exception as e:
        text = f"""üí• **–û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò**

‚ùå **–û—à–∏–±–∫–∞:** `{str(e)}`"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def handle_test_sync(query, context):
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        from utils.access_manager import add_user_access, delete_user_completely, has_access
        
        test_id = 888777666
        text = "üîÑ **–¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò**\n\n"
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial = has_access(test_id)
        text += f"1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'üü¢' if initial else 'üî¥'}\n"
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º
        add_result = add_user_access(test_id)
        after_add = has_access(test_id)
        text += f"2Ô∏è‚É£ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {'üü¢' if after_add else 'üî¥'}\n"
        
        # 3. –£–¥–∞–ª—è–µ–º
        delete_result = delete_user_completely(test_id)
        after_delete = has_access(test_id)
        text += f"3Ô∏è‚É£ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {'üü¢' if after_delete else 'üî¥'}\n"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if not initial and after_add and not after_delete:
            text += f"\nüéâ **–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!**\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!"
        else:
            text += f"\n‚ùå **–¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!**\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"
            
    except Exception as e:
        text = f"""üí• **–û–®–ò–ë–ö–ê –¢–ï–°–¢–ê**

‚ùå **–û—à–∏–±–∫–∞:** `{str(e)}`"""
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω –±–æ—Ç–∞...")
        print(f"üîë –¢–æ–∫–µ–Ω: {ADMIN_BOT_TOKEN[:10]}...")
        print(f"üë• –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
        
        # –¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        from utils.access_manager import has_access
        print("‚úÖ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        updater = Updater(token=ADMIN_BOT_TOKEN, use_context=True)
        dp = updater.dispatcher
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CallbackQueryHandler(button_handler))
        
        # –ó–∞–ø—É—Å–∫
        updater.start_polling()
        print("üü¢ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        
        updater.idle()
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 