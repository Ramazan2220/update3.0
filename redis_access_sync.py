#!/usr/bin/env python3
"""
–°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–û–°–¢–£–ü–û–í
Redis Pub/Sub –¥–ª—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–¥–º–∏–Ω –±–æ—Ç–æ–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
"""

import json
import threading
import time
from typing import Dict, Optional
from datetime import datetime
import logging

# –ò—Å–ø–æ–ª—å–∑—É–µ–º FakeRedis –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º FakeRedis (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ Redis —Å–µ—Ä–≤–µ—Ä–∞)
USE_FAKE_REDIS = True

if USE_FAKE_REDIS:
    from fake_redis import get_fake_redis
    print("üü° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FakeRedis –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
else:
    try:
        import redis as real_redis
        USE_REAL_REDIS = True
        print("üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–π Redis")
    except ImportError:
        USE_REAL_REDIS = False
        from fake_redis import get_fake_redis
        print("üü° Redis –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FakeRedis")

logger = logging.getLogger(__name__)

class RedisAccessSync:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–æ–≤ —á–µ—Ä–µ–∑ Redis Pub/Sub
    """
    
    def __init__(self, redis_host='localhost', redis_port=6379, redis_db=0):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞
        if USE_FAKE_REDIS:
            self.redis_client = get_fake_redis()
        else:
            self.redis_client = real_redis.Redis(host=redis_host, port=redis_port, db=redis_db)
        
        self.pubsub = self.redis_client.pubsub()
        
        # –ö–∞–Ω–∞–ª—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        self.USER_ADDED_CHANNEL = "access:user_added"
        self.USER_REMOVED_CHANNEL = "access:user_removed"
        self.ACCESS_KEY = "access:users"
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        self._local_cache = {}
        self._cache_lock = threading.Lock()
        
        # –ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        self._listener_thread = None
        self._stop_listening = False
        
    def start_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π Redis"""
        if self._listener_thread and self._listener_thread.is_alive():
            return
            
        self._stop_listening = False
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
        self.pubsub.subscribe(self.USER_ADDED_CHANNEL, self.USER_REMOVED_CHANNEL)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        self._listener_thread = threading.Thread(target=self._listen_events, daemon=True)
        self._listener_thread.start()
        
        logger.info("üîÑ Redis listener –∑–∞–ø—É—â–µ–Ω")
        
    def stop_listener(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        self._stop_listening = True
        if self._listener_thread:
            self._listener_thread.join(timeout=1)
        self.pubsub.close()
        
    def _listen_events(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è Redis –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            for message in self.pubsub.listen():
                if self._stop_listening:
                    break
                    
                if message['type'] == 'message':
                    self._handle_event(message)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Redis listener: {e}")
            
    def _handle_event(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç Redis"""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å FakeRedis
            channel = message['channel']
            if hasattr(channel, 'decode'):
                channel = channel.decode('utf-8')
            
            data = json.loads(message['data'])
            
            user_id = data['user_id']
            
            with self._cache_lock:
                if channel == self.USER_ADDED_CHANNEL:
                    self._local_cache[str(user_id)] = data
                    logger.info(f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à")
                    
                elif channel == self.USER_REMOVED_CHANNEL:
                    if str(user_id) in self._local_cache:
                        del self._local_cache[str(user_id)]
                        logger.info(f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    def add_user(self, user_id: int, user_data: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
        try:
            user_key = str(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            self.redis_client.hset(self.ACCESS_KEY, user_key, json.dumps(user_data))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            with self._cache_lock:
                self._local_cache[user_key] = user_data
            
            # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_data = {
                'user_id': user_id,
                'timestamp': datetime.now().isoformat(),
                **user_data
            }
            self.redis_client.publish(self.USER_ADDED_CHANNEL, json.dumps(event_data))
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def remove_user(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
        try:
            user_key = str(user_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
            self.redis_client.hdel(self.ACCESS_KEY, user_key)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
            with self._cache_lock:
                self._local_cache.pop(user_key, None)
            
            # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_data = {
                'user_id': user_id,
                'timestamp': datetime.now().isoformat()
            }
            self.redis_client.publish(self.USER_REMOVED_CHANNEL, json.dumps(event_data))
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def has_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–í–°–ï–ì–î–ê –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        user_key = str(user_id)
        
        # –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º Redis/—Ñ–∞–π–ª –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            raw_data = self.redis_client.hget(self.ACCESS_KEY, user_key)
            if raw_data:
                user_data = json.loads(raw_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                with self._cache_lock:
                    self._local_cache[user_key] = user_data
                
                result = self._check_user_active(user_data)
                logger.debug(f"üîç Redis –ø—Ä–æ–≤–µ—Ä–∫–∞ {user_id}: –Ω–∞–π–¥–µ–Ω = True, –∞–∫—Ç–∏–≤–µ–Ω = {result}")
                return result
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
                with self._cache_lock:
                    if user_key in self._local_cache:
                        del self._local_cache[user_key]
                        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞: {user_id}")
                
                logger.debug(f"üîç Redis –ø—Ä–æ–≤–µ—Ä–∫–∞ {user_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω = False")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}: {e}")
            return False
    
    def _check_user_active(self, user_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_data.get('is_active', False):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_end = user_data.get('subscription_end')
        if subscription_end:
            try:
                end_date = datetime.fromisoformat(subscription_end)
                if datetime.now() > end_date:
                    return False
            except:
                pass
                
        return True
    
    def load_initial_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–µ—à –∏–∑ Redis"""
        try:
            all_users = self.redis_client.hgetall(self.ACCESS_KEY)
            
            with self._cache_lock:
                self._local_cache.clear()
                for user_key, raw_data in all_users.items():
                    try:
                        user_data = json.loads(raw_data)
                        self._local_cache[user_key.decode('utf-8')] = user_data
                    except:
                        continue
                        
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–µ—à: {len(self._local_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞: {e}")
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self._cache_lock:
            local_count = len(self._local_cache)
            
        try:
            redis_count = self.redis_client.hlen(self.ACCESS_KEY)
        except:
            redis_count = 0
            
        return {
            'local_cache_users': local_count,
            'redis_users': redis_count,
            'listener_active': self._listener_thread and self._listener_thread.is_alive()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_redis_sync = None

def get_redis_sync() -> RedisAccessSync:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    global _redis_sync
    if _redis_sync is None:
        _redis_sync = RedisAccessSync()
        _redis_sync.load_initial_cache()
        _redis_sync.start_listener()
    return _redis_sync

def has_access_redis(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Redis (–¥–ª—è –∑–∞–º–µ–Ω—ã has_access)"""
    return get_redis_sync().has_access(user_id)

def add_user_redis(user_id: int, user_data: dict) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Redis"""
    return get_redis_sync().add_user(user_id, user_data)

def remove_user_redis(user_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Redis"""
    return get_redis_sync().remove_user(user_id) 
"""
–°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–û–°–¢–£–ü–û–í
Redis Pub/Sub –¥–ª—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–¥–º–∏–Ω –±–æ—Ç–æ–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
"""

import json
import threading
import time
from typing import Dict, Optional
from datetime import datetime
import logging

# –ò—Å–ø–æ–ª—å–∑—É–µ–º FakeRedis –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º FakeRedis (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ Redis —Å–µ—Ä–≤–µ—Ä–∞)
USE_FAKE_REDIS = True

if USE_FAKE_REDIS:
    from fake_redis import get_fake_redis
    print("üü° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FakeRedis –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
else:
    try:
        import redis as real_redis
        USE_REAL_REDIS = True
        print("üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–π Redis")
    except ImportError:
        USE_REAL_REDIS = False
        from fake_redis import get_fake_redis
        print("üü° Redis –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FakeRedis")

logger = logging.getLogger(__name__)

class RedisAccessSync:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–æ–≤ —á–µ—Ä–µ–∑ Redis Pub/Sub
    """
    
    def __init__(self, redis_host='localhost', redis_port=6379, redis_db=0):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞
        if USE_FAKE_REDIS:
            self.redis_client = get_fake_redis()
        else:
            self.redis_client = real_redis.Redis(host=redis_host, port=redis_port, db=redis_db)
        
        self.pubsub = self.redis_client.pubsub()
        
        # –ö–∞–Ω–∞–ª—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        self.USER_ADDED_CHANNEL = "access:user_added"
        self.USER_REMOVED_CHANNEL = "access:user_removed"
        self.ACCESS_KEY = "access:users"
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        self._local_cache = {}
        self._cache_lock = threading.Lock()
        
        # –ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        self._listener_thread = None
        self._stop_listening = False
        
    def start_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π Redis"""
        if self._listener_thread and self._listener_thread.is_alive():
            return
            
        self._stop_listening = False
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
        self.pubsub.subscribe(self.USER_ADDED_CHANNEL, self.USER_REMOVED_CHANNEL)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        self._listener_thread = threading.Thread(target=self._listen_events, daemon=True)
        self._listener_thread.start()
        
        logger.info("üîÑ Redis listener –∑–∞–ø—É—â–µ–Ω")
        
    def stop_listener(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        self._stop_listening = True
        if self._listener_thread:
            self._listener_thread.join(timeout=1)
        self.pubsub.close()
        
    def _listen_events(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è Redis –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            for message in self.pubsub.listen():
                if self._stop_listening:
                    break
                    
                if message['type'] == 'message':
                    self._handle_event(message)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Redis listener: {e}")
            
    def _handle_event(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç Redis"""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å FakeRedis
            channel = message['channel']
            if hasattr(channel, 'decode'):
                channel = channel.decode('utf-8')
            
            data = json.loads(message['data'])
            
            user_id = data['user_id']
            
            with self._cache_lock:
                if channel == self.USER_ADDED_CHANNEL:
                    self._local_cache[str(user_id)] = data
                    logger.info(f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à")
                    
                elif channel == self.USER_REMOVED_CHANNEL:
                    if str(user_id) in self._local_cache:
                        del self._local_cache[str(user_id)]
                        logger.info(f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    def add_user(self, user_id: int, user_data: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
        try:
            user_key = str(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            self.redis_client.hset(self.ACCESS_KEY, user_key, json.dumps(user_data))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            with self._cache_lock:
                self._local_cache[user_key] = user_data
            
            # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_data = {
                'user_id': user_id,
                'timestamp': datetime.now().isoformat(),
                **user_data
            }
            self.redis_client.publish(self.USER_ADDED_CHANNEL, json.dumps(event_data))
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def remove_user(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
        try:
            user_key = str(user_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
            self.redis_client.hdel(self.ACCESS_KEY, user_key)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
            with self._cache_lock:
                self._local_cache.pop(user_key, None)
            
            # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_data = {
                'user_id': user_id,
                'timestamp': datetime.now().isoformat()
            }
            self.redis_client.publish(self.USER_REMOVED_CHANNEL, json.dumps(event_data))
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def has_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–í–°–ï–ì–î–ê –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
        user_key = str(user_id)
        
        # –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º Redis/—Ñ–∞–π–ª –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            raw_data = self.redis_client.hget(self.ACCESS_KEY, user_key)
            if raw_data:
                user_data = json.loads(raw_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                with self._cache_lock:
                    self._local_cache[user_key] = user_data
                
                result = self._check_user_active(user_data)
                logger.debug(f"üîç Redis –ø—Ä–æ–≤–µ—Ä–∫–∞ {user_id}: –Ω–∞–π–¥–µ–Ω = True, –∞–∫—Ç–∏–≤–µ–Ω = {result}")
                return result
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
                with self._cache_lock:
                    if user_key in self._local_cache:
                        del self._local_cache[user_key]
                        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞: {user_id}")
                
                logger.debug(f"üîç Redis –ø—Ä–æ–≤–µ—Ä–∫–∞ {user_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω = False")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}: {e}")
            return False
    
    def _check_user_active(self, user_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_data.get('is_active', False):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_end = user_data.get('subscription_end')
        if subscription_end:
            try:
                end_date = datetime.fromisoformat(subscription_end)
                if datetime.now() > end_date:
                    return False
            except:
                pass
                
        return True
    
    def load_initial_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–µ—à –∏–∑ Redis"""
        try:
            all_users = self.redis_client.hgetall(self.ACCESS_KEY)
            
            with self._cache_lock:
                self._local_cache.clear()
                for user_key, raw_data in all_users.items():
                    try:
                        user_data = json.loads(raw_data)
                        self._local_cache[user_key.decode('utf-8')] = user_data
                    except:
                        continue
                        
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–µ—à: {len(self._local_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞: {e}")
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self._cache_lock:
            local_count = len(self._local_cache)
            
        try:
            redis_count = self.redis_client.hlen(self.ACCESS_KEY)
        except:
            redis_count = 0
            
        return {
            'local_cache_users': local_count,
            'redis_users': redis_count,
            'listener_active': self._listener_thread and self._listener_thread.is_alive()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_redis_sync = None

def get_redis_sync() -> RedisAccessSync:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    global _redis_sync
    if _redis_sync is None:
        _redis_sync = RedisAccessSync()
        _redis_sync.load_initial_cache()
        _redis_sync.start_listener()
    return _redis_sync

def has_access_redis(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Redis (–¥–ª—è –∑–∞–º–µ–Ω—ã has_access)"""
    return get_redis_sync().has_access(user_id)

def add_user_redis(user_id: int, user_data: dict) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Redis"""
    return get_redis_sync().add_user(user_id, user_data)

def remove_user_redis(user_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Redis"""
    return get_redis_sync().remove_user(user_id) 