#!/usr/bin/env python3
"""
üîÑ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ë–ï–ó TELEGRAM
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä—è–º–æ –≤ SQLite
"""

import sqlite3
import os

def test_database_isolation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîÑ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*50)
    
    db_path = "data/database.sqlite"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´:")
        cursor.execute("PRAGMA table_info(instagram_accounts)")
        columns = cursor.fetchall()
        
        print("–°—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ instagram_accounts:")
        for col in columns:
            print(f"   - {col[1]} ({col[2]})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è user_id
        column_names = [col[1] for col in columns]
        if 'user_id' not in column_names:
            print("‚ùå –ü–æ–ª–µ user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return False
        else:
            print("‚úÖ –ü–æ–ª–µ user_id –Ω–∞–π–¥–µ–Ω–æ!")
        
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        print("2Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–ö–ê–£–ù–¢–û–í:")
        
        # –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM instagram_accounts")
        total_accounts = cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}")
        
        # –ê–∫–∫–∞—É–Ω—Ç—ã —Å –∏–∑–æ–ª—è—Ü–∏–µ–π (user_id != 0)
        cursor.execute("SELECT COUNT(*) FROM instagram_accounts WHERE user_id != 0")
        isolated_accounts = cursor.fetchone()[0]
        print(f"üîí –° –∏–∑–æ–ª—è—Ü–∏–µ–π: {isolated_accounts}")
        
        # –°—Ç–∞—Ä—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –∏–∑–æ–ª—è—Ü–∏–∏
        cursor.execute("SELECT COUNT(*) FROM instagram_accounts WHERE user_id = 0")
        legacy_accounts = cursor.fetchone()[0]
        print(f"‚ö†Ô∏è –ë–µ–∑ –∏–∑–æ–ª—è—Ü–∏–∏: {legacy_accounts}")
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–æ–ª—è—Ü–∏–∏
        if total_accounts > 0:
            isolation_percent = (isolated_accounts / total_accounts) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–æ–ª—è—Ü–∏–∏: {isolation_percent:.1f}%")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("3Ô∏è‚É£ –¢–ï–°–¢ –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        
        user1_id = 6499246016  # ysim0r
        user2_id = 6626270112  # lock0125
        
        # –ê–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
        cursor.execute("SELECT username, user_id FROM instagram_accounts WHERE user_id = ?", (user1_id,))
        user1_accounts = cursor.fetchall()
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user1_id}: {len(user1_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        for acc in user1_accounts:
            print(f"   - {acc[0]} (user_id: {acc[1]})")
        
        # –ê–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2
        cursor.execute("SELECT username, user_id FROM instagram_accounts WHERE user_id = ?", (user2_id,))
        user2_accounts = cursor.fetchall()
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user2_id}: {len(user2_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        for acc in user2_accounts:
            print(f"   - {acc[0]} (user_id: {acc[1]})")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        print("4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô:")
        
        user1_usernames = {acc[0] for acc in user1_accounts}
        user2_usernames = {acc[0] for acc in user2_accounts}
        
        intersection = user1_usernames & user2_usernames
        
        if intersection:
            print(f"‚ùå –û–®–ò–ë–ö–ê! –û–±—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {intersection}")
            return False
        else:
            print("‚úÖ –ò–ó–û–õ–Ø–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢! –ù–µ—Ç –æ–±—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute("SELECT DISTINCT user_id FROM instagram_accounts WHERE user_id != 0")
        unique_users = cursor.fetchall()
        print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(unique_users)}")
        
        for user in unique_users:
            cursor.execute("SELECT COUNT(*) FROM instagram_accounts WHERE user_id = ?", (user[0],))
            count = cursor.fetchone()[0]
            print(f"   - User {user[0]}: {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def add_test_account(user_id, username):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
    
    db_path = "data/database.sqlite"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        cursor.execute("SELECT id FROM instagram_accounts WHERE username = ? AND user_id = ?", 
                      (username, user_id))
        existing = cursor.fetchone()
        
        if existing:
            print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
        cursor.execute("""
            INSERT INTO instagram_accounts (username, password, user_id, is_active, created_at)
            VALUES (?, ?, ?, ?, datetime('now'))
        """, (username, "test_password_123", user_id, 0))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û –¢–ï–°–¢–ê –ò–ó–û–õ–Ø–¶–ò–ò...")
    print()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    print("üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í:")
    add_test_account(6499246016, f"simple_test_1_{int(__import__('time').time())}")
    add_test_account(6626270112, f"simple_test_2_{int(__import__('time').time())}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–ª—è—Ü–∏—é
    success = test_database_isolation()
    
    print("\n" + "="*50)
    if success:
        print("üéâ –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ü–†–û–®–Å–õ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–æ–ª–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        print("üí• –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ü–†–û–í–ê–õ–ï–ù!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏")
    print("="*50) 