#!/usr/bin/env python3
"""
–°–ò–°–¢–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ù–ê MULTIPROCESSING
Event-driven —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import multiprocessing as mp
import threading
import time
import json
import os
from typing import Dict, Optional
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class MultiprocessingAccessSync:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ multiprocessing.Manager
    """
    
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º Manager –¥–ª—è shared objects
        self.manager = mp.Manager()
        
        # Shared –¥–∞–Ω–Ω—ã–µ
        self.shared_users = self.manager.dict()  # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_events = self.manager.dict()   # –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –°–æ–±—ã—Ç–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.user_added_event = mp.Event()
        self.user_removed_event = mp.Event()
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self._local_cache = {}
        self._cache_lock = threading.Lock()
        
        # –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π
        self._monitor_thread = None
        self._stop_monitoring = False
        
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π"""
        if self._monitor_thread and self._monitor_thread.is_alive():
            return
            
        self._stop_monitoring = False
        self._monitor_thread = threading.Thread(target=self._monitor_events, daemon=True)
        self._monitor_thread.start()
        
        logger.info("üîÑ Multiprocessing monitor –∑–∞–ø—É—â–µ–Ω")
        
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self._stop_monitoring = True
        if self._monitor_thread:
            self._monitor_thread.join(timeout=1)
            
    def _monitor_events(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ–±—ã—Ç–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while not self._stop_monitoring:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                if self.user_added_event.wait(timeout=0.1):
                    self._sync_from_shared()
                    self.user_added_event.clear()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                if self.user_removed_event.wait(timeout=0.1):
                    self._sync_from_shared()
                    self.user_removed_event.clear()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π: {e}")
                time.sleep(0.1)
                
    def _sync_from_shared(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à —Å shared –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            with self._cache_lock:
                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ shared –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                self._local_cache.clear()
                for user_id, user_data in self.shared_users.items():
                    self._local_cache[user_id] = user_data
                    
            logger.info(f"üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self._local_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    def add_user(self, user_id: int, user_data: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_key = str(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ shared –¥–∞–Ω–Ω—ã–µ
            self.shared_users[user_key] = user_data
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            with self._cache_lock:
                self._local_cache[user_key] = user_data
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–±—ã—Ç–∏–∏
            self.user_added_event.set()
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def remove_user(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_key = str(user_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ shared –¥–∞–Ω–Ω—ã—Ö
            if user_key in self.shared_users:
                del self.shared_users[user_key]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
            with self._cache_lock:
                self._local_cache.pop(user_key, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–±—ã—Ç–∏–∏
            self.user_removed_event.set()
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def has_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_key = str(user_id)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        with self._cache_lock:
            if user_key in self._local_cache:
                user_data = self._local_cache[user_key]
                return self._check_user_active(user_data)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º shared –¥–∞–Ω–Ω—ã–µ
        try:
            if user_key in self.shared_users:
                user_data = self.shared_users[user_key]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                with self._cache_lock:
                    self._local_cache[user_key] = user_data
                
                return self._check_user_active(user_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}: {e}")
        
        return False
    
    def _check_user_active(self, user_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_data.get('is_active', False):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_end = user_data.get('subscription_end')
        if subscription_end:
            try:
                end_date = datetime.fromisoformat(subscription_end)
                if datetime.now() > end_date:
                    return False
            except:
                pass
                
        return True
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self._cache_lock:
            local_count = len(self._local_cache)
            
        try:
            shared_count = len(self.shared_users)
        except:
            shared_count = 0
            
        return {
            'local_cache_users': local_count,
            'shared_users': shared_count,
            'monitor_active': self._monitor_thread and self._monitor_thread.is_alive()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_mp_sync = None

def get_mp_sync() -> MultiprocessingAccessSync:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä multiprocessing —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    global _mp_sync
    if _mp_sync is None:
        _mp_sync = MultiprocessingAccessSync()
        _mp_sync.start_monitoring()
    return _mp_sync

def has_access_mp(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ multiprocessing"""
    return get_mp_sync().has_access(user_id)

def add_user_mp(user_id: int, user_data: dict) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ multiprocessing"""
    return get_mp_sync().add_user(user_id, user_data)

def remove_user_mp(user_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ multiprocessing"""
    return get_mp_sync().remove_user(user_id) 
"""
–°–ò–°–¢–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ù–ê MULTIPROCESSING
Event-driven —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import multiprocessing as mp
import threading
import time
import json
import os
from typing import Dict, Optional
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class MultiprocessingAccessSync:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ multiprocessing.Manager
    """
    
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º Manager –¥–ª—è shared objects
        self.manager = mp.Manager()
        
        # Shared –¥–∞–Ω–Ω—ã–µ
        self.shared_users = self.manager.dict()  # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_events = self.manager.dict()   # –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –°–æ–±—ã—Ç–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.user_added_event = mp.Event()
        self.user_removed_event = mp.Event()
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self._local_cache = {}
        self._cache_lock = threading.Lock()
        
        # –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π
        self._monitor_thread = None
        self._stop_monitoring = False
        
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π"""
        if self._monitor_thread and self._monitor_thread.is_alive():
            return
            
        self._stop_monitoring = False
        self._monitor_thread = threading.Thread(target=self._monitor_events, daemon=True)
        self._monitor_thread.start()
        
        logger.info("üîÑ Multiprocessing monitor –∑–∞–ø—É—â–µ–Ω")
        
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self._stop_monitoring = True
        if self._monitor_thread:
            self._monitor_thread.join(timeout=1)
            
    def _monitor_events(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ–±—ã—Ç–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while not self._stop_monitoring:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                if self.user_added_event.wait(timeout=0.1):
                    self._sync_from_shared()
                    self.user_added_event.clear()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                if self.user_removed_event.wait(timeout=0.1):
                    self._sync_from_shared()
                    self.user_removed_event.clear()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π: {e}")
                time.sleep(0.1)
                
    def _sync_from_shared(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à —Å shared –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            with self._cache_lock:
                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ shared –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                self._local_cache.clear()
                for user_id, user_data in self.shared_users.items():
                    self._local_cache[user_id] = user_data
                    
            logger.info(f"üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self._local_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    def add_user(self, user_id: int, user_data: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_key = str(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ shared –¥–∞–Ω–Ω—ã–µ
            self.shared_users[user_key] = user_data
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            with self._cache_lock:
                self._local_cache[user_key] = user_data
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–±—ã—Ç–∏–∏
            self.user_added_event.set()
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def remove_user(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_key = str(user_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ shared –¥–∞–Ω–Ω—ã—Ö
            if user_key in self.shared_users:
                del self.shared_users[user_key]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
            with self._cache_lock:
                self._local_cache.pop(user_key, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–±—ã—Ç–∏–∏
            self.user_removed_event.set()
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def has_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_key = str(user_id)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        with self._cache_lock:
            if user_key in self._local_cache:
                user_data = self._local_cache[user_key]
                return self._check_user_active(user_data)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º shared –¥–∞–Ω–Ω—ã–µ
        try:
            if user_key in self.shared_users:
                user_data = self.shared_users[user_key]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                with self._cache_lock:
                    self._local_cache[user_key] = user_data
                
                return self._check_user_active(user_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}: {e}")
        
        return False
    
    def _check_user_active(self, user_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_data.get('is_active', False):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_end = user_data.get('subscription_end')
        if subscription_end:
            try:
                end_date = datetime.fromisoformat(subscription_end)
                if datetime.now() > end_date:
                    return False
            except:
                pass
                
        return True
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self._cache_lock:
            local_count = len(self._local_cache)
            
        try:
            shared_count = len(self.shared_users)
        except:
            shared_count = 0
            
        return {
            'local_cache_users': local_count,
            'shared_users': shared_count,
            'monitor_active': self._monitor_thread and self._monitor_thread.is_alive()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_mp_sync = None

def get_mp_sync() -> MultiprocessingAccessSync:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä multiprocessing —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    global _mp_sync
    if _mp_sync is None:
        _mp_sync = MultiprocessingAccessSync()
        _mp_sync.start_monitoring()
    return _mp_sync

def has_access_mp(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ multiprocessing"""
    return get_mp_sync().has_access(user_id)

def add_user_mp(user_id: int, user_data: dict) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ multiprocessing"""
    return get_mp_sync().add_user(user_id, user_data)

def remove_user_mp(user_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ multiprocessing"""
    return get_mp_sync().remove_user(user_id) 