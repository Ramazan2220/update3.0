#!/usr/bin/env python3
"""
–¢–ï–°–¢ –ù–û–í–´–• –°–ò–°–¢–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
"""

import sys
import time
import threading
from datetime import datetime, timedelta

def test_multiprocessing_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç multiprocessing —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    print("üîß –¢–ï–°–¢ MULTIPROCESSING –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        from multiprocessing_access_sync import get_mp_sync, has_access_mp, add_user_mp, remove_user_mp
        
        sync = get_mp_sync()
        user_id = 6626270112
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        has_access_result = has_access_mp(user_id)
        print(f"   has_access({user_id}): {has_access_result}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        user_data = {
            'telegram_id': user_id,
            'is_active': True,
            'subscription_end': (datetime.now() + timedelta(days=30)).isoformat(),
            'role': 'trial'
        }
        
        add_result = add_user_mp(user_id, user_data)
        print(f"   add_user({user_id}): {add_result}")
        
        # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        time.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        has_access_result = has_access_mp(user_id)
        print(f"   has_access({user_id}) –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {has_access_result}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        remove_result = remove_user_mp(user_id)
        print(f"   remove_user({user_id}): {remove_result}")
        
        # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        time.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        has_access_result = has_access_mp(user_id)
        print(f"   has_access({user_id}) –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_result}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = sync.get_stats()
        print(f"4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        if not has_access_result:
            print(f"üéâ MULTIPROCESSING –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å multiprocessing —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")
            
        return not has_access_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è multiprocessing: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_redis_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    print("\nüîß –¢–ï–°–¢ REDIS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.ping()
        
    except Exception as e:
        print(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print(f"üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: brew install redis (macOS) –∏–ª–∏ sudo apt install redis-server (Ubuntu)")
        return False
    
    try:
        from redis_access_sync import get_redis_sync, has_access_redis, add_user_redis, remove_user_redis
        
        sync = get_redis_sync()
        user_id = 6626270112
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        has_access_result = has_access_redis(user_id)
        print(f"   has_access({user_id}): {has_access_result}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        user_data = {
            'telegram_id': user_id,
            'is_active': True,
            'subscription_end': (datetime.now() + timedelta(days=30)).isoformat(),
            'role': 'trial'
        }
        
        add_result = add_user_redis(user_id, user_data)
        print(f"   add_user({user_id}): {add_result}")
        
        # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        time.sleep(0.2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        has_access_result = has_access_redis(user_id)
        print(f"   has_access({user_id}) –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {has_access_result}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        remove_result = remove_user_redis(user_id)
        print(f"   remove_user({user_id}): {remove_result}")
        
        # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        time.sleep(0.2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        has_access_result = has_access_redis(user_id)
        print(f"   has_access({user_id}) –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_result}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = sync.get_stats()
        print(f"4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        if not has_access_result:
            print(f"üéâ REDIS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")
            
        return not has_access_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_real_time_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    print("\nüîß –¢–ï–°–¢ REAL-TIME –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    sync_system = None
    
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.ping()
        from redis_access_sync import get_redis_sync, has_access_redis, add_user_redis, remove_user_redis
        sync_system = "redis"
        sync = get_redis_sync()
        has_access_func = has_access_redis
        add_user_func = add_user_redis
        remove_user_func = remove_user_redis
        print("üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis")
    except:
        from multiprocessing_access_sync import get_mp_sync, has_access_mp, add_user_mp, remove_user_mp
        sync_system = "multiprocessing"
        sync = get_mp_sync()
        has_access_func = has_access_mp
        add_user_func = add_user_mp
        remove_user_func = remove_user_mp
        print("üü° –ò—Å–ø–æ–ª—å–∑—É–µ–º Multiprocessing")
    
    user_id = 6626270112
    
    def monitor_access():
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        for i in range(10):
            access = has_access_func(user_id)
            print(f"   [{time.strftime('%H:%M:%S')}] has_access({user_id}): {access}")
            time.sleep(0.5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=monitor_access, daemon=True)
    monitor_thread.start()
    
    time.sleep(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user_data = {
        'telegram_id': user_id,
        'is_active': True,
        'subscription_end': (datetime.now() + timedelta(days=30)).isoformat(),
        'role': 'trial'
    }
    add_user_func(user_id, user_data)
    
    time.sleep(2)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    remove_user_func(user_id)
    
    time.sleep(2)
    
    monitor_thread.join(timeout=1)
    
    print(f"üéâ REAL-TIME –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    
def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –°–ò–°–¢–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º multiprocessing
    mp_result = test_multiprocessing_sync()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    redis_result = test_redis_sync()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º real-time
    test_real_time_sync()
    
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   Multiprocessing: {'‚úÖ' if mp_result else '‚ùå'}")
    print(f"   Redis: {'‚úÖ' if redis_result else '‚ö†Ô∏è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    if mp_result or redis_result:
        print(f"\nüéâ –ù–û–í–´–ï –°–ò–°–¢–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
        print(f"üí° –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç")
    else:
        print(f"\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == "__main__":
    main() 
"""
–¢–ï–°–¢ –ù–û–í–´–• –°–ò–°–¢–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
"""

import sys
import time
import threading
from datetime import datetime, timedelta

def test_multiprocessing_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç multiprocessing —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    print("üîß –¢–ï–°–¢ MULTIPROCESSING –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        from multiprocessing_access_sync import get_mp_sync, has_access_mp, add_user_mp, remove_user_mp
        
        sync = get_mp_sync()
        user_id = 6626270112
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        has_access_result = has_access_mp(user_id)
        print(f"   has_access({user_id}): {has_access_result}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        user_data = {
            'telegram_id': user_id,
            'is_active': True,
            'subscription_end': (datetime.now() + timedelta(days=30)).isoformat(),
            'role': 'trial'
        }
        
        add_result = add_user_mp(user_id, user_data)
        print(f"   add_user({user_id}): {add_result}")
        
        # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        time.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        has_access_result = has_access_mp(user_id)
        print(f"   has_access({user_id}) –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {has_access_result}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        remove_result = remove_user_mp(user_id)
        print(f"   remove_user({user_id}): {remove_result}")
        
        # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        time.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        has_access_result = has_access_mp(user_id)
        print(f"   has_access({user_id}) –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_result}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = sync.get_stats()
        print(f"4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        if not has_access_result:
            print(f"üéâ MULTIPROCESSING –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å multiprocessing —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")
            
        return not has_access_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è multiprocessing: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_redis_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    print("\nüîß –¢–ï–°–¢ REDIS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.ping()
        
    except Exception as e:
        print(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print(f"üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: brew install redis (macOS) –∏–ª–∏ sudo apt install redis-server (Ubuntu)")
        return False
    
    try:
        from redis_access_sync import get_redis_sync, has_access_redis, add_user_redis, remove_user_redis
        
        sync = get_redis_sync()
        user_id = 6626270112
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        has_access_result = has_access_redis(user_id)
        print(f"   has_access({user_id}): {has_access_result}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        user_data = {
            'telegram_id': user_id,
            'is_active': True,
            'subscription_end': (datetime.now() + timedelta(days=30)).isoformat(),
            'role': 'trial'
        }
        
        add_result = add_user_redis(user_id, user_data)
        print(f"   add_user({user_id}): {add_result}")
        
        # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        time.sleep(0.2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        has_access_result = has_access_redis(user_id)
        print(f"   has_access({user_id}) –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {has_access_result}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        remove_result = remove_user_redis(user_id)
        print(f"   remove_user({user_id}): {remove_result}")
        
        # –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        time.sleep(0.2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        has_access_result = has_access_redis(user_id)
        print(f"   has_access({user_id}) –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_result}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = sync.get_stats()
        print(f"4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        if not has_access_result:
            print(f"üéâ REDIS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")
            
        return not has_access_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_real_time_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    print("\nüîß –¢–ï–°–¢ REAL-TIME –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    sync_system = None
    
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.ping()
        from redis_access_sync import get_redis_sync, has_access_redis, add_user_redis, remove_user_redis
        sync_system = "redis"
        sync = get_redis_sync()
        has_access_func = has_access_redis
        add_user_func = add_user_redis
        remove_user_func = remove_user_redis
        print("üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis")
    except:
        from multiprocessing_access_sync import get_mp_sync, has_access_mp, add_user_mp, remove_user_mp
        sync_system = "multiprocessing"
        sync = get_mp_sync()
        has_access_func = has_access_mp
        add_user_func = add_user_mp
        remove_user_func = remove_user_mp
        print("üü° –ò—Å–ø–æ–ª—å–∑—É–µ–º Multiprocessing")
    
    user_id = 6626270112
    
    def monitor_access():
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        for i in range(10):
            access = has_access_func(user_id)
            print(f"   [{time.strftime('%H:%M:%S')}] has_access({user_id}): {access}")
            time.sleep(0.5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=monitor_access, daemon=True)
    monitor_thread.start()
    
    time.sleep(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user_data = {
        'telegram_id': user_id,
        'is_active': True,
        'subscription_end': (datetime.now() + timedelta(days=30)).isoformat(),
        'role': 'trial'
    }
    add_user_func(user_id, user_data)
    
    time.sleep(2)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    remove_user_func(user_id)
    
    time.sleep(2)
    
    monitor_thread.join(timeout=1)
    
    print(f"üéâ REAL-TIME –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    
def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –°–ò–°–¢–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º multiprocessing
    mp_result = test_multiprocessing_sync()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    redis_result = test_redis_sync()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º real-time
    test_real_time_sync()
    
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   Multiprocessing: {'‚úÖ' if mp_result else '‚ùå'}")
    print(f"   Redis: {'‚úÖ' if redis_result else '‚ö†Ô∏è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    if mp_result or redis_result:
        print(f"\nüéâ –ù–û–í–´–ï –°–ò–°–¢–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
        print(f"üí° –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç")
    else:
        print(f"\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == "__main__":
    main() 