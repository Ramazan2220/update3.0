#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π —Å–≤—è–∑–∏ FakeRedis
"""

import sys
import os
import time
import json
import threading
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from fake_redis import get_fake_redis

def test_publish():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üî• –¢–ï–°–¢ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ó–∞–ø—É—Å–∫...")
    
    redis_client = get_fake_redis()
    
    for i in range(5):
        message = {
            "user_id": 6499246016,
            "timestamp": datetime.now().isoformat(),
            "test_number": i + 1
        }
        
        result = redis_client.publish("access:user_removed", json.dumps(message))
        print(f"üì§ –û–¢–ü–†–ê–í–õ–ï–ù–û #{i+1}: {message}")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç publish: {result}")
        
        time.sleep(2)

def test_subscribe():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üî• –¢–ï–°–¢ –ü–û–õ–£–ß–ê–¢–ï–õ–¨: –ó–∞–ø—É—Å–∫...")
    
    redis_client = get_fake_redis()
    pubsub = redis_client.pubsub()
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
    pubsub.subscribe("access:user_removed")
    print("üì° –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ access:user_removed")
    
    # –°–ª—É—à–∞–µ–º
    for message in pubsub.listen():
        if message['type'] == 'message':
            try:
                data = json.loads(message['data'])
                print(f"üì• –ü–û–õ–£–ß–ï–ù–û: {data}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python test_redis_communication.py publish")
        print("  python test_redis_communication.py subscribe")
        sys.exit(1)
    
    if sys.argv[1] == "publish":
        test_publish()
    elif sys.argv[1] == "subscribe":
        test_subscribe()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'publish' –∏–ª–∏ 'subscribe'") 
"""
üß™ –¢–µ—Å—Ç –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π —Å–≤—è–∑–∏ FakeRedis
"""

import sys
import os
import time
import json
import threading
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from fake_redis import get_fake_redis

def test_publish():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üî• –¢–ï–°–¢ –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ó–∞–ø—É—Å–∫...")
    
    redis_client = get_fake_redis()
    
    for i in range(5):
        message = {
            "user_id": 6499246016,
            "timestamp": datetime.now().isoformat(),
            "test_number": i + 1
        }
        
        result = redis_client.publish("access:user_removed", json.dumps(message))
        print(f"üì§ –û–¢–ü–†–ê–í–õ–ï–ù–û #{i+1}: {message}")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç publish: {result}")
        
        time.sleep(2)

def test_subscribe():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üî• –¢–ï–°–¢ –ü–û–õ–£–ß–ê–¢–ï–õ–¨: –ó–∞–ø—É—Å–∫...")
    
    redis_client = get_fake_redis()
    pubsub = redis_client.pubsub()
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
    pubsub.subscribe("access:user_removed")
    print("üì° –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ access:user_removed")
    
    # –°–ª—É—à–∞–µ–º
    for message in pubsub.listen():
        if message['type'] == 'message':
            try:
                data = json.loads(message['data'])
                print(f"üì• –ü–û–õ–£–ß–ï–ù–û: {data}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python test_redis_communication.py publish")
        print("  python test_redis_communication.py subscribe")
        sys.exit(1)
    
    if sys.argv[1] == "publish":
        test_publish()
    elif sys.argv[1] == "subscribe":
        test_subscribe()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'publish' –∏–ª–∏ 'subscribe'") 