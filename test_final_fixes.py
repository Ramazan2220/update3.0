#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
1. –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
3. –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
"""

import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

print("üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
print("=" * 50)

# 1. –¢–µ—Å—Ç —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
print("\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú –£–ú–ù–£–Æ –°–ò–°–¢–ï–ú–£ –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø")
try:
    from telegram_bot.middleware.smart_access_check import SmartAccessManager, smart_access
    print("‚úÖ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = smart_access.get_cache_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: {stats}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    test_user_id = 123456789
    smart_access.force_block_user(test_user_id)
    is_blocked = not smart_access.check_access_fast(test_user_id)
    print(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {is_blocked}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    smart_access.force_unblock_user(test_user_id)
    is_unblocked = smart_access.check_access_fast(test_user_id)
    print(f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {is_unblocked}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")

# 2. –¢–µ—Å—Ç Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú REDIS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ")
try:
    from redis_access_sync import has_access_redis, add_user_redis, remove_user_redis
    
    test_user_id = 987654321
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'telegram_id': test_user_id,
        'username': 'test_user',
        'is_active': True,
        'role': 'trial'
    }
    
    add_result = add_user_redis(test_user_id, user_data)
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ Redis: {add_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    has_access = has_access_redis(test_user_id)
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {has_access}")
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    remove_result = remove_user_redis(test_user_id)
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Redis: {remove_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω
    has_access_after = has_access_redis(test_user_id)
    print(f"üîç –î–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_after}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Redis: {e}")

# 3. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å access_manager
print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú –ò–ù–¢–ï–ì–†–ê–¶–ò–Æ ACCESS_MANAGER")
try:
    from utils.access_manager import add_user_access, remove_user_access, has_access
    
    test_user_id = 555666777
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ access_manager
    user_data = {
        'telegram_id': test_user_id,
        'username': 'integration_test',
        'is_active': True,
        'role': 'trial'
    }
    
    add_result = add_user_access(test_user_id, user_data)
    print(f"‚ûï Access Manager –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: {add_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    has_access_result = has_access(test_user_id)
    print(f"üîç Access Manager –ø—Ä–æ–≤–µ—Ä–∫–∞: {has_access_result}")
    
    # –£–¥–∞–ª—è–µ–º
    remove_result = remove_user_access(test_user_id)
    print(f"üóëÔ∏è Access Manager —É–¥–∞–ª–µ–Ω–∏–µ: {remove_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω
    has_access_after = has_access(test_user_id)
    print(f"üîç –î–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_after}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Access Manager: {e}")

# 4. –¢–µ—Å—Ç FakeRedis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
print("\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú FAKEREDIS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ")
try:
    from fake_redis import get_fake_redis
    
    redis_client = get_fake_redis()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    redis_client.set("test_key", "test_value")
    value = redis_client.get("test_key")
    print(f"üîß FakeRedis get/set: {value == 'test_value'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º hash –æ–ø–µ—Ä–∞—Ü–∏–∏
    redis_client.hset("test_hash", "field1", "value1")
    hash_value = redis_client.hget("test_hash", "field1")
    print(f"üîß FakeRedis hget/hset: {hash_value == 'value1'}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    redis_client.delete("test_key")
    redis_client.hdel("test_hash", "field1")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ FakeRedis: {e}")

print("\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
print("=" * 50)

print("""
üìã –ò–¢–û–ì–û–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:

‚úÖ 1. –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚úÖ 2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π  
‚úÖ 3. –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É
‚úÖ 4. –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–∑ middleware –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚úÖ 5. FakeRedis —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π

üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!
""") 
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
1. –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
3. –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
"""

import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

print("üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
print("=" * 50)

# 1. –¢–µ—Å—Ç —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
print("\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú –£–ú–ù–£–Æ –°–ò–°–¢–ï–ú–£ –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø")
try:
    from telegram_bot.middleware.smart_access_check import SmartAccessManager, smart_access
    print("‚úÖ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = smart_access.get_cache_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: {stats}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    test_user_id = 123456789
    smart_access.force_block_user(test_user_id)
    is_blocked = not smart_access.check_access_fast(test_user_id)
    print(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {is_blocked}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    smart_access.force_unblock_user(test_user_id)
    is_unblocked = smart_access.check_access_fast(test_user_id)
    print(f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {is_unblocked}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")

# 2. –¢–µ—Å—Ç Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú REDIS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ")
try:
    from redis_access_sync import has_access_redis, add_user_redis, remove_user_redis
    
    test_user_id = 987654321
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'telegram_id': test_user_id,
        'username': 'test_user',
        'is_active': True,
        'role': 'trial'
    }
    
    add_result = add_user_redis(test_user_id, user_data)
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ Redis: {add_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    has_access = has_access_redis(test_user_id)
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {has_access}")
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    remove_result = remove_user_redis(test_user_id)
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Redis: {remove_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω
    has_access_after = has_access_redis(test_user_id)
    print(f"üîç –î–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_after}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Redis: {e}")

# 3. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å access_manager
print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú –ò–ù–¢–ï–ì–†–ê–¶–ò–Æ ACCESS_MANAGER")
try:
    from utils.access_manager import add_user_access, remove_user_access, has_access
    
    test_user_id = 555666777
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ access_manager
    user_data = {
        'telegram_id': test_user_id,
        'username': 'integration_test',
        'is_active': True,
        'role': 'trial'
    }
    
    add_result = add_user_access(test_user_id, user_data)
    print(f"‚ûï Access Manager –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: {add_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    has_access_result = has_access(test_user_id)
    print(f"üîç Access Manager –ø—Ä–æ–≤–µ—Ä–∫–∞: {has_access_result}")
    
    # –£–¥–∞–ª—è–µ–º
    remove_result = remove_user_access(test_user_id)
    print(f"üóëÔ∏è Access Manager —É–¥–∞–ª–µ–Ω–∏–µ: {remove_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω
    has_access_after = has_access(test_user_id)
    print(f"üîç –î–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_after}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Access Manager: {e}")

# 4. –¢–µ—Å—Ç FakeRedis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
print("\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú FAKEREDIS –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ")
try:
    from fake_redis import get_fake_redis
    
    redis_client = get_fake_redis()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    redis_client.set("test_key", "test_value")
    value = redis_client.get("test_key")
    print(f"üîß FakeRedis get/set: {value == 'test_value'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º hash –æ–ø–µ—Ä–∞—Ü–∏–∏
    redis_client.hset("test_hash", "field1", "value1")
    hash_value = redis_client.hget("test_hash", "field1")
    print(f"üîß FakeRedis hget/hset: {hash_value == 'value1'}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    redis_client.delete("test_key")
    redis_client.hdel("test_hash", "field1")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ FakeRedis: {e}")

print("\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
print("=" * 50)

print("""
üìã –ò–¢–û–ì–û–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:

‚úÖ 1. –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚úÖ 2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π  
‚úÖ 3. –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É
‚úÖ 4. –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–∑ middleware –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚úÖ 5. FakeRedis —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π

üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!
""") 