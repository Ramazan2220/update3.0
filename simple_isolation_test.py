#!/usr/bin/env python3
"""
üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –∫ SQLite
"""

import sqlite3
import os

def test_database_isolation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*50)
    
    db_path = "data/database.sqlite"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´:")
        cursor.execute("PRAGMA table_info(instagram_accounts)")
        columns = cursor.fetchall()
        
        user_id_exists = any(col[1] == 'user_id' for col in columns)
        print(f"üîí –ü–æ–ª–µ user_id: {'‚úÖ –ï—Å—Ç—å' if user_id_exists else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
        if not user_id_exists:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ª–µ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return False
        
        # 2. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n2Ô∏è‚É£ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        cursor.execute("SELECT COUNT(*) FROM instagram_accounts")
        total_accounts = cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}")
        
        # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–æ–ª—è—Ü–∏–∏
        print("\n3Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó–û–õ–Ø–¶–ò–ò:")
        cursor.execute("SELECT COUNT(*) FROM instagram_accounts WHERE user_id = 0")
        legacy_accounts = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM instagram_accounts WHERE user_id != 0")
        isolated_accounts = cursor.fetchone()[0]
        
        print(f"‚ö†Ô∏è –ë–µ–∑ –∏–∑–æ–ª—è—Ü–∏–∏ (user_id=0): {legacy_accounts}")
        print(f"üîí –° –∏–∑–æ–ª—è—Ü–∏–µ–π (user_id!=0): {isolated_accounts}")
        
        if total_accounts > 0:
            isolation_percent = (isolated_accounts / total_accounts) * 100
            print(f"üìã –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–æ–ª—è—Ü–∏–∏: {isolation_percent:.1f}%")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        
        test_users = [6499246016, 6626270112]  # ysim0r, lock0125
        
        for user_id in test_users:
            cursor.execute("SELECT COUNT(*) FROM instagram_accounts WHERE user_id = ?", (user_id,))
            user_accounts = cursor.fetchone()[0]
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {user_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            if user_accounts > 0:
                cursor.execute("SELECT username FROM instagram_accounts WHERE user_id = ? LIMIT 3", (user_id,))
                usernames = [row[0] for row in cursor.fetchall()]
                print(f"   üìù –ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(usernames)}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò:")
        cursor.execute("SELECT DISTINCT user_id FROM instagram_accounts WHERE user_id != 0")
        unique_users = cursor.fetchall()
        print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(unique_users)}")
        
        for user_row in unique_users:
            user_id = user_row[0]
            cursor.execute("SELECT COUNT(*) FROM instagram_accounts WHERE user_id = ?", (user_id,))
            count = cursor.fetchone()[0]
            print(f"   üë§ User {user_id}: {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # 6. –¢–µ—Å—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ–±—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
        print("\n6Ô∏è‚É£ –¢–ï–°–¢ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô:")
        cursor.execute("""
            SELECT username, COUNT(DISTINCT user_id) as user_count 
            FROM instagram_accounts 
            WHERE user_id != 0 
            GROUP BY username 
            HAVING user_count > 1
        """)
        
        duplicates = cursor.fetchall()
        if duplicates:
            print(f"‚ùå –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´! {len(duplicates)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
            for username, count in duplicates:
                print(f"   üö® {username}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return False
        else:
            print("‚úÖ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô –ù–ï–¢! –ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def show_sample_data():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"""
    
    print("\nüìã –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–•:")
    print("-" * 30)
    
    db_path = "data/database.sqlite"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, username, user_id, created_at 
            FROM instagram_accounts 
            WHERE user_id != 0 
            ORDER BY user_id, created_at 
            LIMIT 10
        """)
        
        isolated_accounts = cursor.fetchall()
        
        if isolated_accounts:
            print("üîí –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ (–ø–µ—Ä–≤—ã–µ 10):")
            for account in isolated_accounts:
                print(f"   ID:{account[0]} | {account[1]} | user_id:{account[2]} | {account[3]}")
        
        cursor.execute("""
            SELECT id, username, user_id, created_at 
            FROM instagram_accounts 
            WHERE user_id = 0 
            LIMIT 5
        """)
        
        legacy_accounts = cursor.fetchall()
        
        if legacy_accounts:
            print("\n‚ö†Ô∏è –£–°–¢–ê–†–ï–í–®–ò–ï –ê–ö–ö–ê–£–ù–¢–´ –ë–ï–ó –ò–ó–û–õ–Ø–¶–ò–ò (–ø–µ—Ä–≤—ã–µ 5):")
            for account in legacy_accounts:
                print(f"   ID:{account[0]} | {account[1]} | user_id:{account[2]} | {account[3]}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û –¢–ï–°–¢–ê –ò–ó–û–õ–Ø–¶–ò–ò...")
    print()
    
    success = test_database_isolation()
    show_sample_data()
    
    print("\n" + "="*50)
    if success:
        print("üéâ –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ü–†–û–®–Å–õ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–∞")
        print("üîí –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã")
    else:
        print("üí• –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –ü–†–û–í–ê–õ–ï–ù!")
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–æ–ª—è—Ü–∏–µ–π")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("="*50) 