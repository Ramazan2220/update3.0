#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ—á–µ–º—É –æ–Ω–∏ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è
"""

import sys
import os
import json

sys.path.insert(0, './utils')
sys.path.insert(0, './admin_bot')

def diagnose_user_storage():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 80)
    
    user_id = 6626270112
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º UserService (admin_bot/data/users.json)
    print("\n1Ô∏è‚É£ USERSERVICE (admin_bot/data/users.json):")
    try:
        userservice_file = "admin_bot/data/users.json"
        if os.path.exists(userservice_file):
            with open(userservice_file, 'r', encoding='utf-8') as f:
                userservice_data = json.load(f)
            
            user_key = str(user_id)
            if user_key in userservice_data:
                user_data = userservice_data[user_key]
                print(f"‚úÖ –ù–ê–ô–î–ï–ù –≤ UserService:")
                print(f"   Username: {user_data.get('username', 'N/A')}")
                print(f"   Status: {user_data.get('status', 'N/A')}")
                print(f"   Subscription: {user_data.get('subscription_plan', 'N/A')}")
                print(f"   End Date: {user_data.get('subscription_end', 'N/A')}")
            else:
                print(f"‚ùå –ù–ï–¢ –≤ UserService")
                print(f"üìÑ –í —Ñ–∞–π–ª–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {list(userservice_data.keys())}")
        else:
            print(f"‚ùå –§–∞–π–ª {userservice_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è UserService: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º AccessManager –∫–µ—à
    print(f"\n2Ô∏è‚É£ ACCESSMANAGER CACHE:")
    try:
        from access_manager import get_access_manager, has_access
        
        access_manager = get_access_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º has_access
        access_result = has_access(user_id)
        print(f"üìä has_access({user_id}): {access_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –Ω–∞–ø—Ä—è–º—É—é
        user_key = str(user_id)
        if hasattr(access_manager, '_access_cache'):
            cache = access_manager._access_cache
            if user_key in cache:
                cache_data = cache[user_key]
                print(f"‚úÖ –ù–ê–ô–î–ï–ù –≤ –∫–µ—à–µ AccessManager:")
                print(f"   {cache_data}")
            else:
                print(f"‚ùå –ù–ï–¢ –≤ –∫–µ—à–µ AccessManager")
                print(f"üìÑ –í –∫–µ—à–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {list(cache.keys())}")
        else:
            print(f"‚ùå AccessManager –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ _access_cache")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AccessManager: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º shared cache —Ñ–∞–π–ª
    print(f"\n3Ô∏è‚É£ SHARED CACHE FILE (data/shared_access_cache.json):")
    try:
        cache_file = "data/shared_access_cache.json"
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
                
            cache = cache_data.get('cache', {})
            user_key = str(user_id)
            
            if user_key in cache:
                user_cache_data = cache[user_key]
                print(f"‚úÖ –ù–ê–ô–î–ï–ù –≤ shared cache:")
                print(f"   {user_cache_data}")
            else:
                print(f"‚ùå –ù–ï–¢ –≤ shared cache")
                print(f"üìÑ –í shared cache –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {list(cache.keys())}")
                
            print(f"üìÖ Last update: {cache_data.get('last_update', 'N/A')}")
        else:
            print(f"‚ùå –§–∞–π–ª {cache_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è shared cache: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º config.py
    print(f"\n4Ô∏è‚É£ CONFIG.PY ADMIN_USER_IDS:")
    try:
        import config
        admin_ids = getattr(config, 'ADMIN_USER_IDS', [])
        if user_id in admin_ids:
            print(f"‚úÖ –ù–ê–ô–î–ï–ù –≤ config.py")
        else:
            print(f"‚ùå –ù–ï–¢ –≤ config.py")
            print(f"üìÑ –í config.py –∞–¥–º–∏–Ω—ã: {admin_ids}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.py: {e}")

def check_sync_flow():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    print(f"\nüîÑ –ü–†–û–í–ï–†–ö–ê –ü–û–¢–û–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 80)
    
    try:
        from access_manager import get_access_manager
        
        access_manager = get_access_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        print(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã AccessManager:")
        methods = [method for method in dir(access_manager) if not method.startswith('_')]
        for method in methods:
            print(f"   - {method}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìä –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:")
        
        # Config –∞–¥–º–∏–Ω—ã
        try:
            config_admins = access_manager._get_config_admin_ids()
            print(f"   Config –∞–¥–º–∏–Ω—ã: {list(config_admins)}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è config –∞–¥–º–∏–Ω–æ–≤: {e}")
        
        # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        try:
            panel_users = access_manager._get_admin_panel_users()
            print(f"   –ü–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(panel_users)} —à—Ç")
            for user_id, user_info in panel_users.items():
                print(f"      {user_id}: {user_info}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    print("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 80)
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    diagnose_user_storage()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    check_sync_flow()
    
    print(f"\nüèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main() 
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ—á–µ–º—É –æ–Ω–∏ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è
"""

import sys
import os
import json

sys.path.insert(0, './utils')
sys.path.insert(0, './admin_bot')

def diagnose_user_storage():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 80)
    
    user_id = 6626270112
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º UserService (admin_bot/data/users.json)
    print("\n1Ô∏è‚É£ USERSERVICE (admin_bot/data/users.json):")
    try:
        userservice_file = "admin_bot/data/users.json"
        if os.path.exists(userservice_file):
            with open(userservice_file, 'r', encoding='utf-8') as f:
                userservice_data = json.load(f)
            
            user_key = str(user_id)
            if user_key in userservice_data:
                user_data = userservice_data[user_key]
                print(f"‚úÖ –ù–ê–ô–î–ï–ù –≤ UserService:")
                print(f"   Username: {user_data.get('username', 'N/A')}")
                print(f"   Status: {user_data.get('status', 'N/A')}")
                print(f"   Subscription: {user_data.get('subscription_plan', 'N/A')}")
                print(f"   End Date: {user_data.get('subscription_end', 'N/A')}")
            else:
                print(f"‚ùå –ù–ï–¢ –≤ UserService")
                print(f"üìÑ –í —Ñ–∞–π–ª–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {list(userservice_data.keys())}")
        else:
            print(f"‚ùå –§–∞–π–ª {userservice_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è UserService: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º AccessManager –∫–µ—à
    print(f"\n2Ô∏è‚É£ ACCESSMANAGER CACHE:")
    try:
        from access_manager import get_access_manager, has_access
        
        access_manager = get_access_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º has_access
        access_result = has_access(user_id)
        print(f"üìä has_access({user_id}): {access_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –Ω–∞–ø—Ä—è–º—É—é
        user_key = str(user_id)
        if hasattr(access_manager, '_access_cache'):
            cache = access_manager._access_cache
            if user_key in cache:
                cache_data = cache[user_key]
                print(f"‚úÖ –ù–ê–ô–î–ï–ù –≤ –∫–µ—à–µ AccessManager:")
                print(f"   {cache_data}")
            else:
                print(f"‚ùå –ù–ï–¢ –≤ –∫–µ—à–µ AccessManager")
                print(f"üìÑ –í –∫–µ—à–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {list(cache.keys())}")
        else:
            print(f"‚ùå AccessManager –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ _access_cache")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AccessManager: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º shared cache —Ñ–∞–π–ª
    print(f"\n3Ô∏è‚É£ SHARED CACHE FILE (data/shared_access_cache.json):")
    try:
        cache_file = "data/shared_access_cache.json"
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
                
            cache = cache_data.get('cache', {})
            user_key = str(user_id)
            
            if user_key in cache:
                user_cache_data = cache[user_key]
                print(f"‚úÖ –ù–ê–ô–î–ï–ù –≤ shared cache:")
                print(f"   {user_cache_data}")
            else:
                print(f"‚ùå –ù–ï–¢ –≤ shared cache")
                print(f"üìÑ –í shared cache –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {list(cache.keys())}")
                
            print(f"üìÖ Last update: {cache_data.get('last_update', 'N/A')}")
        else:
            print(f"‚ùå –§–∞–π–ª {cache_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è shared cache: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º config.py
    print(f"\n4Ô∏è‚É£ CONFIG.PY ADMIN_USER_IDS:")
    try:
        import config
        admin_ids = getattr(config, 'ADMIN_USER_IDS', [])
        if user_id in admin_ids:
            print(f"‚úÖ –ù–ê–ô–î–ï–ù –≤ config.py")
        else:
            print(f"‚ùå –ù–ï–¢ –≤ config.py")
            print(f"üìÑ –í config.py –∞–¥–º–∏–Ω—ã: {admin_ids}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.py: {e}")

def check_sync_flow():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    print(f"\nüîÑ –ü–†–û–í–ï–†–ö–ê –ü–û–¢–û–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 80)
    
    try:
        from access_manager import get_access_manager
        
        access_manager = get_access_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        print(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã AccessManager:")
        methods = [method for method in dir(access_manager) if not method.startswith('_')]
        for method in methods:
            print(f"   - {method}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìä –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:")
        
        # Config –∞–¥–º–∏–Ω—ã
        try:
            config_admins = access_manager._get_config_admin_ids()
            print(f"   Config –∞–¥–º–∏–Ω—ã: {list(config_admins)}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è config –∞–¥–º–∏–Ω–æ–≤: {e}")
        
        # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        try:
            panel_users = access_manager._get_admin_panel_users()
            print(f"   –ü–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(panel_users)} —à—Ç")
            for user_id, user_info in panel_users.items():
                print(f"      {user_id}: {user_info}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    print("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 80)
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    diagnose_user_storage()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    check_sync_flow()
    
    print(f"\nüèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main() 