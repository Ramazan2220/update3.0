#!/usr/bin/env python3
"""
–¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –£–¥–∞–ª–µ–Ω–∏–µ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞
"""

import sys
import os
import json

sys.path.insert(0, './utils')
sys.path.insert(0, './admin_bot')

def check_user_status(user_id, step_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüìä {step_name}:")
    
    try:
        from access_manager import get_access_manager, has_access
        
        # 1. AccessManager
        access_result = has_access(user_id)
        print(f"   AccessManager has_access({user_id}): {access_result}")
        
        # 2. Shared cache
        cache_file = "data/shared_access_cache.json"
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            cache = cache_data.get('cache', {})
            user_key = str(user_id)
            
            in_shared = user_key in cache
            print(f"   Shared cache: {in_shared}")
        else:
            print(f"   Shared cache: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 3. UserService
        try:
            from services.user_service import UserService
            user_service = UserService()
            user = user_service.get_user(user_id)
            in_userservice = user is not None
            print(f"   UserService: {in_userservice}")
            if user:
                print(f"      Status: {user.status}")
        except Exception as e:
            print(f"   UserService: –æ—à–∏–±–∫–∞ - {e}")
        
        # 4. –°–∏–º—É–ª—è—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        try:
            from access_manager import AccessManager
            main_bot_access_manager = AccessManager()
            main_bot_result = main_bot_access_manager.has_access(user_id)
            print(f"   –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: {main_bot_result}")
        except Exception as e:
            print(f"   –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: –æ—à–∏–±–∫–∞ - {e}")
            
        return access_result
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def test_full_cycle():
    print("üîÑ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
    print("=" * 80)
    
    user_id = 6626270112
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    initial_status = check_user_status(user_id, "–ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï")
    
    # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å - —É–¥–∞–ª—è–µ–º –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    if initial_status:
        print(f"\nüóëÔ∏è –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∞...")
        try:
            from access_manager import delete_user_completely
            success = delete_user_completely(user_id)
            if success:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        
        check_user_status(user_id, "–ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò")
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    try:
        from access_manager import get_access_manager
        access_manager = get_access_manager()
        
        success = access_manager.add_user(user_id, source='test', role='trial')
        if success:
            print(f"‚úÖ add_user({user_id}) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            access_manager.force_sync()
            print(f"‚úÖ force_sync() –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        else:
            print(f"‚ùå add_user({user_id}) –Ω–µ—É–¥–∞—á–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    add_status = check_user_status(user_id, "–ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø")
    
    # 5. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    try:
        from access_manager import delete_user_completely
        success = delete_user_completely(user_id)
        if success:
            print(f"‚úÖ delete_user_completely({user_id}) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå delete_user_completely({user_id}) –Ω–µ—É–¥–∞—á–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    delete_status = check_user_status(user_id, "–ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø")
    
    # 7. –ü–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n‚ôªÔ∏è –ü–û–í–¢–û–†–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    try:
        from access_manager import get_access_manager
        access_manager = get_access_manager()
        
        success = access_manager.add_user(user_id, source='test_reactivation', role='trial')
        if success:
            print(f"‚úÖ add_user({user_id}) (–ø–æ–≤—Ç–æ—Ä–Ω–æ) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            access_manager.force_sync()
            print(f"‚úÖ force_sync() –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        else:
            print(f"‚ùå add_user({user_id}) (–ø–æ–≤—Ç–æ—Ä–Ω–æ) –Ω–µ—É–¥–∞—á–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    final_status = check_user_status(user_id, "–§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï")
    
    # 9. –†–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
    print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {initial_status}")
    print(f"   –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {add_status}")
    print(f"   –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {delete_status}")
    print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {final_status}")
    
    if not delete_status and final_status:
        print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å—á–µ–∑)")
        print(f"   ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–∏–ª—Å—è)")
        print(f"   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –ü—Ä–æ–±–ª–µ–º—ã:")
        if delete_status:
            print(f"   ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
        if not final_status:
            print(f"   ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")

def main():
    test_full_cycle()

if __name__ == "__main__":
    main() 
"""
–¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –£–¥–∞–ª–µ–Ω–∏–µ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞
"""

import sys
import os
import json

sys.path.insert(0, './utils')
sys.path.insert(0, './admin_bot')

def check_user_status(user_id, step_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüìä {step_name}:")
    
    try:
        from access_manager import get_access_manager, has_access
        
        # 1. AccessManager
        access_result = has_access(user_id)
        print(f"   AccessManager has_access({user_id}): {access_result}")
        
        # 2. Shared cache
        cache_file = "data/shared_access_cache.json"
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            cache = cache_data.get('cache', {})
            user_key = str(user_id)
            
            in_shared = user_key in cache
            print(f"   Shared cache: {in_shared}")
        else:
            print(f"   Shared cache: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 3. UserService
        try:
            from services.user_service import UserService
            user_service = UserService()
            user = user_service.get_user(user_id)
            in_userservice = user is not None
            print(f"   UserService: {in_userservice}")
            if user:
                print(f"      Status: {user.status}")
        except Exception as e:
            print(f"   UserService: –æ—à–∏–±–∫–∞ - {e}")
        
        # 4. –°–∏–º—É–ª—è—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        try:
            from access_manager import AccessManager
            main_bot_access_manager = AccessManager()
            main_bot_result = main_bot_access_manager.has_access(user_id)
            print(f"   –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: {main_bot_result}")
        except Exception as e:
            print(f"   –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: –æ—à–∏–±–∫–∞ - {e}")
            
        return access_result
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def test_full_cycle():
    print("üîÑ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
    print("=" * 80)
    
    user_id = 6626270112
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    initial_status = check_user_status(user_id, "–ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï")
    
    # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å - —É–¥–∞–ª—è–µ–º –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    if initial_status:
        print(f"\nüóëÔ∏è –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∞...")
        try:
            from access_manager import delete_user_completely
            success = delete_user_completely(user_id)
            if success:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        
        check_user_status(user_id, "–ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò")
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    try:
        from access_manager import get_access_manager
        access_manager = get_access_manager()
        
        success = access_manager.add_user(user_id, source='test', role='trial')
        if success:
            print(f"‚úÖ add_user({user_id}) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            access_manager.force_sync()
            print(f"‚úÖ force_sync() –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        else:
            print(f"‚ùå add_user({user_id}) –Ω–µ—É–¥–∞—á–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    add_status = check_user_status(user_id, "–ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø")
    
    # 5. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    try:
        from access_manager import delete_user_completely
        success = delete_user_completely(user_id)
        if success:
            print(f"‚úÖ delete_user_completely({user_id}) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå delete_user_completely({user_id}) –Ω–µ—É–¥–∞—á–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    delete_status = check_user_status(user_id, "–ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø")
    
    # 7. –ü–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n‚ôªÔ∏è –ü–û–í–¢–û–†–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    try:
        from access_manager import get_access_manager
        access_manager = get_access_manager()
        
        success = access_manager.add_user(user_id, source='test_reactivation', role='trial')
        if success:
            print(f"‚úÖ add_user({user_id}) (–ø–æ–≤—Ç–æ—Ä–Ω–æ) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            access_manager.force_sync()
            print(f"‚úÖ force_sync() –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        else:
            print(f"‚ùå add_user({user_id}) (–ø–æ–≤—Ç–æ—Ä–Ω–æ) –Ω–µ—É–¥–∞—á–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    final_status = check_user_status(user_id, "–§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï")
    
    # 9. –†–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
    print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {initial_status}")
    print(f"   –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {add_status}")
    print(f"   –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {delete_status}")
    print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {final_status}")
    
    if not delete_status and final_status:
        print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å—á–µ–∑)")
        print(f"   ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–∏–ª—Å—è)")
        print(f"   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –ü—Ä–æ–±–ª–µ–º—ã:")
        if delete_status:
            print(f"   ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
        if not final_status:
            print(f"   ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")

def main():
    test_full_cycle()

if __name__ == "__main__":
    main() 