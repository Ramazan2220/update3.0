#!/usr/bin/env python3
"""
üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
- NotificationManager
- SubscriptionMonitor  
- BroadcastSystem
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é
"""

import sys
import os
import time
import json
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.abspath('.'))

def test_notification_manager():
    """–¢–µ—Å—Ç NotificationManager"""
    print("üîî –¢–ï–°–¢ NOTIFICATION MANAGER")
    print("=" * 50)
    
    try:
        from utils.notification_manager import get_notification_manager
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        nm = get_notification_manager()
        print("‚úÖ NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüö´ –¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        success = nm.send_admin_block_notification(
            user_id=123456,
            admin_id=admin_id,
            reason="–¢–µ—Å—Ç–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        print("\nüîì –¢–µ—Å—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        success = nm.send_admin_unblock_notification(
            user_id=123456,
            admin_id=admin_id
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
        print("\n‚è∞ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ...")
        success = nm.send_subscription_warning(
            user_id=123456,
            days_left=3,
            subscription_end=datetime.now() + timedelta(days=3)
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("\nüë§ –¢–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        success = nm.send_personal_notification(
            user_id=123456,
            title="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            admin_id=admin_id
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        stats = nm.get_stats(7)
        for key, value in stats.items():
            print(f"   {key}: {value}")
        
        print("\n‚úÖ NotificationManager: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ NotificationManager: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_subscription_monitor():
    """–¢–µ—Å—Ç SubscriptionMonitor"""
    print("\n\n‚è∞ –¢–ï–°–¢ SUBSCRIPTION MONITOR")
    print("=" * 50)
    
    try:
        from utils.subscription_monitor import get_subscription_monitor
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
        monitor = get_subscription_monitor()
        print("‚úÖ SubscriptionMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        stats = monitor.get_monitor_stats()
        print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for key, value in stats.items():
            print(f"     {key}: {value}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        print("\nüö® –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
        expiring = monitor.get_expiring_subscriptions(7)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(expiring)}")
        
        for i, sub in enumerate(expiring[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"     {i+1}. {sub.get('username', 'N/A')} - {sub.get('days_left', 0)} –¥–Ω.")
        
        # –¢–µ—Å—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        print("\nüîç –¢–µ—Å—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
        try:
            monitor.check_all_subscriptions()
            print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {e}")
        
        print("\n‚úÖ SubscriptionMonitor: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SubscriptionMonitor: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_broadcast_system():
    """–¢–µ—Å—Ç BroadcastSystem"""
    print("\n\nüì¢ –¢–ï–°–¢ BROADCAST SYSTEM")
    print("=" * 50)
    
    try:
        from utils.broadcast_system import get_broadcast_system
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        bs = get_broadcast_system()
        print("‚úÖ BroadcastSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º
        print("\nüì¢ –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        broadcast_id = bs.broadcast_to_all(
            title="üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            admin_id=admin_id
        )
        print(f"   ID —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_id}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if broadcast_id else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≥—Ä—É–ø–ø–µ
        print("\nüë• –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≥—Ä—É–ø–ø–µ (trial)...")
        broadcast_id2 = bs.broadcast_to_group(
            title="üß™ –¢–µ—Å—Ç –¥–ª—è trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            group="trial",
            admin_id=admin_id
        )
        print(f"   ID —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_id2}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if broadcast_id2 else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("\n‚è≥ –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫ (10 —Å–µ–∫—É–Ω–¥)...")
        time.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–æ–∫
        if broadcast_id:
            print(f"\nüìã –°—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ({broadcast_id}):")
            status = bs.get_broadcast_status(broadcast_id)
            if status:
                print(f"   –°—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}")
                print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {status.get('sent_count', 0)}/{status.get('total_recipients', 0)}")
                print(f"   –û—à–∏–±–æ–∫: {status.get('failed_count', 0)}")
            else:
                print("   ‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        print("\nüìã –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫...")
        history = bs.get_recent_broadcasts(5)
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {len(history)}")
        
        for i, broadcast in enumerate(history[:3]):
            print(f"     {i+1}. {broadcast.get('title', 'N/A')} - {broadcast.get('status', 'unknown')}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫...")
        stats = bs.get_broadcast_stats(7)
        print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for key, value in stats.items():
            if key != 'daily_stats':  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                print(f"     {key}: {value}")
        
        print("\n‚úÖ BroadcastSystem: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ BroadcastSystem: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_redis_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Redis"""
    print("\n\nüî• –¢–ï–°–¢ REDIS –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        from redis_access_sync import get_redis_sync
        from fake_redis import get_fake_redis
        
        # –¢–µ—Å—Ç Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        redis_sync = get_redis_sync()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç FakeRedis
        fake_redis = get_fake_redis()
        print("‚úÖ FakeRedis –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        print("\nüß™ –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö Redis –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        # Set/Get
        fake_redis.set("test_key", "test_value")
        value = fake_redis.get("test_key")
        print(f"   Set/Get: {'‚úÖ OK' if value == 'test_value' else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # Hash operations
        fake_redis.hset("test_hash", "field1", "value1")
        hash_value = fake_redis.hget("test_hash", "field1")
        print(f"   Hash Set/Get: {'‚úÖ OK' if hash_value == 'value1' else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # Pub/Sub test
        print("\nüì° –¢–µ—Å—Ç Pub/Sub...")
        pubsub = fake_redis.pubsub()
        pubsub.subscribe("test_channel")
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        fake_redis.publish("test_channel", json.dumps({"test": "message"}))
        print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
        
        print("\n‚úÖ Redis Integration: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Redis Integration: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_access_manager_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AccessManager"""
    print("\n\nüîê –¢–ï–°–¢ ACCESS MANAGER –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        from utils.access_manager import has_access, add_user_access, remove_user_access
        
        test_user_id = 999999  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_access = has_access(test_user_id)
        print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}: {initial_access}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
        print(f"\n‚ûï –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {test_user_id}...")
        user_data = {
            'telegram_id': test_user_id,
            'username': 'test_user',
            'is_active': True,
            'subscription_end': (datetime.now() + timedelta(days=30)).isoformat(),
            'role': 'trial'
        }
        
        success = add_user_access(test_user_id, user_data)
        print(f"   –î–æ–±–∞–≤–ª–µ–Ω–∏–µ: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        new_access = has_access(test_user_id)
        print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {'‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø' if new_access else '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞'}")
        
        # –£–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø
        print(f"\n‚ûñ –£–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}...")
        success = remove_user_access(test_user_id)
        print(f"   –£–¥–∞–ª–µ–Ω–∏–µ: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        final_access = has_access(test_user_id)
        print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {'‚úÖ –î–æ—Å—Ç—É–ø —É–±—Ä–∞–Ω' if not final_access else '‚ùå –î–æ—Å—Ç—É–ø –æ—Å—Ç–∞–ª—Å—è'}")
        
        print("\n‚úÖ Access Manager Integration: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Access Manager Integration: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_admin_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é"""
    print("\n\nüë®‚Äçüíº –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨–Æ")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...")
        
        import sys
        import os
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'admin_bot'))
        
        from admin_bot.services.user_service import UserService
        
        user_service = UserService()
        users = user_service.get_all_users()
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i, user in enumerate(users[:5]):
            print(f"     {i+1}. @{user.username or 'N/A'} ({user.telegram_id}) - {user.subscription_plan.value if user.subscription_plan else 'N/A'}")
        
        print("\n‚úÖ Admin Integration: –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Admin Integration: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    global admin_id
    admin_id = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("Redis Integration", test_redis_integration),
        ("Access Manager Integration", test_access_manager_integration),
        ("Admin Integration", test_admin_integration),
        ("NotificationManager", test_notification_manager),
        ("SubscriptionMonitor", test_subscription_monitor),
        ("BroadcastSystem", test_broadcast_system),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        print("-" * 30)
        
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
        
        print("-" * 30)
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:30} | {status}")
        
        if result:
            passed += 1
        else:
            failed += 1
    
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/len(results)*100):.1f}%")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í {failed} –¢–ï–°–¢–ê–•")
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    
    print(f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main() 
 