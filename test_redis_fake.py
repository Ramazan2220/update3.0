#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å FakeRedis
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_redis_with_fake():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REDIS –° FAKE REDIS")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    try:
        from redis_access_sync import RedisAccessSync, get_redis_sync
        print("‚úÖ –ò–º–ø–æ—Ä—Ç redis_access_sync —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    try:
        sync = RedisAccessSync()
        print("‚úÖ RedisAccessSync —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    test_user_id = 12345
    
    print(f"\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    has_access_initial = sync.has_access(test_user_id)
    print(f"   has_access({test_user_id}): {has_access_initial}")
    
    print(f"\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    user_data = {
        'telegram_id': test_user_id,
        'is_active': True,
        'subscription_end': (datetime.now()).isoformat(),
        'role': 'trial'
    }
    add_result = sync.add_user(test_user_id, user_data)
    print(f"   add_user({test_user_id}): {add_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    has_access_after_add = sync.has_access(test_user_id)
    print(f"   has_access({test_user_id}) –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {has_access_after_add}")
    
    print(f"\n3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    remove_result = sync.remove_user(test_user_id)
    print(f"   remove_user({test_user_id}): {remove_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    has_access_after_remove = sync.has_access(test_user_id)
    print(f"   has_access({test_user_id}) –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_after_remove}")
    
    print(f"\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    stats = sync.get_stats()
    print(f"   {stats}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success = (
        has_access_initial == False and
        add_result == True and
        has_access_after_add == True and
        remove_result == True and
        has_access_after_remove == False
    )
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        return False

def test_global_functions():
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        from redis_access_sync import has_access_redis, add_user_redis, remove_user_redis
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    test_user_id = 54321
    
    print(f"\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º has_access_redis({test_user_id}):")
    result1 = has_access_redis(test_user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º add_user_redis({test_user_id}):")
    user_data = {
        'telegram_id': test_user_id,
        'is_active': True,
        'role': 'premium'
    }
    result2 = add_user_redis(test_user_id, user_data)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    print(f"\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    result3 = has_access_redis(test_user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")
    
    print(f"\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º remove_user_redis({test_user_id}):")
    result4 = remove_user_redis(test_user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")
    
    print(f"\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:")
    result5 = has_access_redis(test_user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result5}")
    
    success = (result1 == False and result2 == True and result3 == True and result4 == True and result5 == False)
    
    if success:
        print("\nüéâ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
        return True
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ì–õ–û–ë–ê–õ–¨–ù–´–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò!")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í REDIS –° FAKE REDIS")
    print("=" * 80)
    
    test1_passed = test_redis_with_fake()
    test2_passed = test_global_functions()
    
    print("\n" + "=" * 80)
    print("üèÅ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç: {'‚úÖ' if test1_passed else '‚ùå'}")
    print(f"   –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {'‚úÖ' if test2_passed else '‚ùå'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ REDIS –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Redis –≤ –ø—Ä–æ–µ–∫—Ç!")
        exit(0)
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        exit(1) 
"""
–¢–µ—Å—Ç Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å FakeRedis
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_redis_with_fake():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REDIS –° FAKE REDIS")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    try:
        from redis_access_sync import RedisAccessSync, get_redis_sync
        print("‚úÖ –ò–º–ø–æ—Ä—Ç redis_access_sync —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    try:
        sync = RedisAccessSync()
        print("‚úÖ RedisAccessSync —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    test_user_id = 12345
    
    print(f"\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    has_access_initial = sync.has_access(test_user_id)
    print(f"   has_access({test_user_id}): {has_access_initial}")
    
    print(f"\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    user_data = {
        'telegram_id': test_user_id,
        'is_active': True,
        'subscription_end': (datetime.now()).isoformat(),
        'role': 'trial'
    }
    add_result = sync.add_user(test_user_id, user_data)
    print(f"   add_user({test_user_id}): {add_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    has_access_after_add = sync.has_access(test_user_id)
    print(f"   has_access({test_user_id}) –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {has_access_after_add}")
    
    print(f"\n3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    remove_result = sync.remove_user(test_user_id)
    print(f"   remove_user({test_user_id}): {remove_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    has_access_after_remove = sync.has_access(test_user_id)
    print(f"   has_access({test_user_id}) –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {has_access_after_remove}")
    
    print(f"\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    stats = sync.get_stats()
    print(f"   {stats}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success = (
        has_access_initial == False and
        add_result == True and
        has_access_after_add == True and
        remove_result == True and
        has_access_after_remove == False
    )
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        return False

def test_global_functions():
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        from redis_access_sync import has_access_redis, add_user_redis, remove_user_redis
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    test_user_id = 54321
    
    print(f"\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º has_access_redis({test_user_id}):")
    result1 = has_access_redis(test_user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º add_user_redis({test_user_id}):")
    user_data = {
        'telegram_id': test_user_id,
        'is_active': True,
        'role': 'premium'
    }
    result2 = add_user_redis(test_user_id, user_data)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    print(f"\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    result3 = has_access_redis(test_user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")
    
    print(f"\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º remove_user_redis({test_user_id}):")
    result4 = remove_user_redis(test_user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}")
    
    print(f"\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:")
    result5 = has_access_redis(test_user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result5}")
    
    success = (result1 == False and result2 == True and result3 == True and result4 == True and result5 == False)
    
    if success:
        print("\nüéâ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
        return True
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ì–õ–û–ë–ê–õ–¨–ù–´–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò!")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í REDIS –° FAKE REDIS")
    print("=" * 80)
    
    test1_passed = test_redis_with_fake()
    test2_passed = test_global_functions()
    
    print("\n" + "=" * 80)
    print("üèÅ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç: {'‚úÖ' if test1_passed else '‚ùå'}")
    print(f"   –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {'‚úÖ' if test2_passed else '‚ùå'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ REDIS –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Redis –≤ –ø—Ä–æ–µ–∫—Ç!")
        exit(0)
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        exit(1) 