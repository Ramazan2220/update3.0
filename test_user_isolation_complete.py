#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑–æ–ª—è—Ü–∏–∏
"""

import logging
import time
from datetime import datetime
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(f'test_isolation_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
    ]
)

logger = logging.getLogger(__name__)

def test_basic_functions():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    logger.info("üß™ –¢–ï–°–¢ 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    try:
        from database.user_management import get_active_users, get_user_info, get_users_by_priority
        
        # –¢–µ—Å—Ç get_active_users
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º get_active_users...")
        users = get_active_users()
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")
        
        # –¢–µ—Å—Ç get_users_by_priority
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º get_users_by_priority...")
        priority_users = get_users_by_priority()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏: {len(priority_users)}")
        for user_id, priority in priority_users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
            logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {priority}")
        
        # –¢–µ—Å—Ç get_user_info
        if users:
            logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º get_user_info...")
            for user_id in users[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã—Ö 3
                user_info = get_user_info(user_id)
                logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {user_info.get('accounts_count', 0)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        logger.info("‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 1 –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
        return False

def test_user_cache():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("üß™ –¢–ï–°–¢ 2: –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    try:
        from utils.user_cache import get_user_cache
        
        user_cache = get_user_cache()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–µ—à
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º get_active_users_safe...")
        cached_users = user_cache.get_active_users_safe()
        logger.info(f"‚úÖ –ö–µ—à –≤–µ—Ä–Ω—É–ª {len(cached_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º get_users_by_priority_safe...")
        priority_users = user_cache.get_users_by_priority_safe()
        logger.info(f"‚úÖ –ö–µ—à –≤–µ—Ä–Ω—É–ª {len(priority_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞...")
        cache_stats = user_cache.get_cache_stats()
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: {cache_stats}")
        
        # –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        refresh_result = user_cache.force_refresh()
        logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'—É—Å–ø–µ—à–Ω–æ' if refresh_result else '–Ω–µ—É–¥–∞—á–Ω–æ'}")
        
        logger.info("‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
        return False

def test_processing_state():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    logger.info("üß™ –¢–ï–°–¢ 3: –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    try:
        from utils.processing_state import ProcessingState, health_check_processing_states
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        logger.info("üìã –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å...")
        test_process = ProcessingState("test_isolation")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        test_users = [12345, 67890, 11111]
        logger.info(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {len(test_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        test_process.start_cycle(test_users)
        
        for user_id in test_users:
            test_process.start_user_processing(user_id)
            time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            test_process.complete_user_processing(user_id, True)
        
        test_process.complete_cycle()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = test_process.get_progress_stats()
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats}")
        
        # –¢–µ—Å—Ç –æ–±—â–µ–≥–æ health check
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º health check –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        health_status = health_check_processing_states()
        logger.info(f"‚úÖ Health check –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {health_status.get('summary', {})}")
        
        logger.info("‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù: –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 3 –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
        return False

def test_health_monitoring():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    logger.info("üß™ –¢–ï–°–¢ 4: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    
    try:
        from utils.health_monitor import get_health_monitor, quick_health_check, get_health_summary
        
        # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è...")
        health_check_result = quick_health_check()
        
        logger.info(f"‚úÖ Health check —Å—Ç–∞—Ç—É—Å: {health_check_result.get('overall_status')}")
        logger.info(f"   - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {health_check_result.get('statistics', {}).get('total_components', 0)}")
        logger.info(f"   - –ó–¥–æ—Ä–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {health_check_result.get('statistics', {}).get('healthy_components', 0)}")
        logger.info(f"   - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {health_check_result.get('statistics', {}).get('warning_components', 0)}")
        logger.info(f"   - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {health_check_result.get('statistics', {}).get('error_components', 0)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if health_check_result.get('issues'):
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in health_check_result['issues']:
                logger.warning(f"   - {issue}")
        
        if health_check_result.get('warnings'):
            logger.info("üí° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in health_check_result['warnings']:
                logger.info(f"   - {warning}")
        
        # –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–¥–æ—Ä–æ–≤—å—è...")
        health_summary = get_health_summary()
        logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {health_summary}")
        
        logger.info("‚úÖ –¢–ï–°–¢ 4 –ü–†–û–ô–î–ï–ù: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 4 –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
        return False

def test_safe_user_wrapper():
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–±—ë—Ä—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("üß™ –¢–ï–°–¢ 5: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º")
    
    try:
        from database.safe_user_wrapper import get_user_instagram_accounts, get_user_instagram_account
        from database.user_management import get_active_users
        
        users = get_active_users()
        
        if not users:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–±—ë—Ä—Ç–æ–∫")
            return True
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = users[0]
        logger.info(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º get_user_instagram_accounts –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}...")
        
        user_accounts = get_user_instagram_accounts(user_id=test_user_id)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} –∏–º–µ–µ—Ç {len(user_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if user_accounts:
            test_account_id = user_accounts[0].id
            logger.info(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º get_user_instagram_account –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {test_account_id}...")
            
            account = get_user_instagram_account(test_account_id, user_id=test_user_id)
            if account:
                logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—ë—Ä—Ç–∫—É")
            else:
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {test_account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info("‚úÖ –¢–ï–°–¢ 5 –ü–†–û–ô–î–ï–ù: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 5 –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
        return False

def test_isolation_integrity():
    """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üß™ –¢–ï–°–¢ 6: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        from database.db_manager import get_session
        from database.models import InstagramAccount
        from database.user_management import get_active_users
        
        session = get_session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –µ—Å—Ç—å user_id
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id —É –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        total_accounts = session.query(InstagramAccount).count()
        accounts_without_user = session.query(InstagramAccount).filter(
            InstagramAccount.user_id.is_(None)
        ).count()
        
        logger.info(f"‚úÖ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}")
        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ user_id: {accounts_without_user}")
        
        if accounts_without_user > 0:
            logger.warning(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ê–ö–ö–ê–£–ù–¢–´ –ë–ï–ó user_id: {accounts_without_user}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            orphaned_accounts = session.query(InstagramAccount).filter(
                InstagramAccount.user_id.is_(None)
            ).limit(5).all()
            
            for account in orphaned_accounts:
                logger.warning(f"   - –ê–∫–∫–∞—É–Ω—Ç {account.username} (ID: {account.id}) –±–µ–∑ user_id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        users = get_active_users()
        logger.info(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –º–µ–∂–¥—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
        
        user_account_counts = {}
        for user_id in users:
            user_accounts_count = session.query(InstagramAccount).filter(
                InstagramAccount.user_id == user_id
            ).count()
            user_account_counts[user_id] = user_accounts_count
        
        logger.info("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        for user_id, count in user_account_counts.items():
            logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        session.close()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–æ–ª—è—Ü–∏–∏
        isolation_ratio = (total_accounts - accounts_without_user) / total_accounts * 100 if total_accounts > 0 else 0
        logger.info(f"‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–æ–ª—è—Ü–∏–∏: {isolation_ratio:.1f}%")
        
        if isolation_ratio >= 100:
            logger.info("‚úÖ –¢–ï–°–¢ 6 –ü–†–û–ô–î–ï–ù: –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–∞—è")
            return True
        elif isolation_ratio >= 95:
            logger.warning("‚ö†Ô∏è –¢–ï–°–¢ 6 –ß–ê–°–¢–ò–ß–ù–û –ü–†–û–ô–î–ï–ù: –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç–∏ –ø–æ–ª–Ω–∞—è")
            return True
        else:
            logger.error(f"‚ùå –¢–ï–°–¢ 6 –ù–ï –ü–†–û–ô–î–ï–ù: –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–ø–æ–ª–Ω–∞—è ({isolation_ratio:.1f}%)")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 6 –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
        return False

def test_system_services():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger.info("üß™ –¢–ï–°–¢ 7: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        from utils.smart_validator_service import SmartValidatorService
        from utils.account_validator_service import AccountValidatorService  
        from utils.proxy_manager import distribute_proxies
        
        logger.info("‚úÖ –í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º SmartValidatorService
            validator_service = SmartValidatorService()
            logger.info("‚úÖ SmartValidatorService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SmartValidatorService: {e}")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AccountValidatorService
            account_validator = AccountValidatorService()
            logger.info("‚úÖ AccountValidatorService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AccountValidatorService: {e}")
        
        logger.info("‚úÖ –¢–ï–°–¢ 7 –ü–†–û–ô–î–ï–ù: –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 7 –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´ –ò–ó–û–õ–Ø–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    logger.info("=" * 80)
    
    start_time = datetime.now()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", test_basic_functions),
        ("–°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", test_user_cache),
        ("–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è", test_processing_state),
        ("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è", test_health_monitoring),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º", test_safe_user_wrapper),
        ("–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", test_isolation_integrity),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã", test_system_services)
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results = {}
    
    for test_name, test_func in tests:
        logger.info("-" * 80)
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï '{test_name}': {e}")
            results[test_name] = False
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    logger.info("=" * 80)
    logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 80)
    
    passed_tests = sum(1 for result in results.values() if result)
    total_tests = len(results)
    
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    logger.info(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_tests - passed_tests}/{total_tests}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        logger.info(f"   {status} - {test_name}")
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    test_duration = (datetime.now() - start_time).total_seconds()
    logger.info(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {test_duration:.2f} —Å–µ–∫—É–Ω–¥")
    
    if passed_tests == total_tests:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        logger.error(f"üí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1) 