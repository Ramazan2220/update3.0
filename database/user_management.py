#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
"""

import logging
import json
import time
from datetime import datetime, timedelta
from typing import List, Tuple, Optional, Dict, Any
from database.db_manager import get_session
from database.models import InstagramAccount, TelegramUser

logger = logging.getLogger(__name__)

def get_active_users() -> List[int]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á
    
    Returns:
        List[int]: –°–ø–∏—Å–æ–∫ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã Instagram
    """
    try:
        session = get_session()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Instagram
        users = session.query(InstagramAccount.user_id).distinct().all()
        session.close()
        
        user_ids = [user[0] for user in users if user[0] is not None]
        logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(user_ids)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        return user_ids
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

def get_users_by_priority() -> List[Tuple[int, str]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        List[Tuple[int, str]]: –°–ø–∏—Å–æ–∫ (user_id, priority) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    """
    try:
        session = get_session()
        
        # VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∞–¥–º–∏–Ω—ã)
        vip_users = []
        admin_users = session.query(TelegramUser.telegram_id).filter(
            TelegramUser.is_admin == True,
            TelegramUser.is_active == True
        ).all()
        for admin in admin_users:
            vip_users.append((admin[0], "VIP"))
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞—Ö–æ–¥–∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        regular_users = []
        week_ago = datetime.now() - timedelta(days=7)
        active_users = session.query(TelegramUser.telegram_id).filter(
            TelegramUser.is_active == True,
            TelegramUser.last_activity >= week_ago,
            TelegramUser.is_admin == False
        ).all()
        for user in active_users:
            regular_users.append((user[0], "ACTIVE"))
        
        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        inactive_users = []
        inactive_user_list = session.query(TelegramUser.telegram_id).filter(
            TelegramUser.is_active == True,
            TelegramUser.last_activity < week_ago,
            TelegramUser.is_admin == False
        ).all()
        for user in inactive_user_list:
            inactive_users.append((user[0], "INACTIVE"))
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ TelegramUser (—Ç–æ–ª—å–∫–æ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏)
        orphan_users = []
        telegram_user_ids = session.query(TelegramUser.telegram_id).all()
        existing_telegram_ids = [u[0] for u in telegram_user_ids]
        
        account_user_ids = session.query(InstagramAccount.user_id).distinct().all()
        for account_user in account_user_ids:
            if account_user[0] not in existing_telegram_ids:
                orphan_users.append((account_user[0], "ORPHAN"))
        
        session.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        all_users = vip_users + regular_users + inactive_users + orphan_users
        
        logger.info(f"üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: VIP={len(vip_users)}, Active={len(regular_users)}, "
                   f"Inactive={len(inactive_users)}, Orphan={len(orphan_users)}")
        
        return all_users
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: {e}")
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return [(user_id, "UNKNOWN") for user_id in get_active_users()]

def get_user_accounts_count(user_id: int) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    try:
        session = get_session()
        count = session.query(InstagramAccount).filter(
            InstagramAccount.user_id == user_id,
            InstagramAccount.is_active == True
        ).count()
        session.close()
        return count
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return 0

def get_user_info(user_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    try:
        session = get_session()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ TelegramUser
        telegram_user = session.query(TelegramUser).filter(
            TelegramUser.telegram_id == user_id
        ).first()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts_count = session.query(InstagramAccount).filter(
            InstagramAccount.user_id == user_id,
            InstagramAccount.is_active == True
        ).count()
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        last_account_activity = session.query(InstagramAccount.updated_at).filter(
            InstagramAccount.user_id == user_id
        ).order_by(InstagramAccount.updated_at.desc()).first()
        
        session.close()
        
        user_info = {
            "user_id": user_id,
            "accounts_count": accounts_count,
            "last_account_activity": last_account_activity[0] if last_account_activity else None,
            "username": None,
            "first_name": None,
            "is_admin": False,
            "last_activity": None,
            "is_active": True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
        }
        
        if telegram_user:
            user_info.update({
                "username": telegram_user.username,
                "first_name": telegram_user.first_name,
                "is_admin": telegram_user.is_admin,
                "last_activity": telegram_user.last_activity,
                "is_active": telegram_user.is_active
            })
        
        return user_info
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        return {
            "user_id": user_id,
            "accounts_count": 0,
            "error": str(e)
        }

def validate_user_exists(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    try:
        session = get_session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        accounts_count = session.query(InstagramAccount).filter(
            InstagramAccount.user_id == user_id
        ).count()
        
        session.close()
        return accounts_count > 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def cleanup_orphaned_data():
    """
    –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!
    """
    try:
        session = get_session()
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ user_id –∏–ª–∏ —Å user_id = None
        orphaned_accounts = session.query(InstagramAccount).filter(
            InstagramAccount.user_id.is_(None)
        ).all()
        
        logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(orphaned_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
        # –ù–ï –£–î–ê–õ–Ø–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º!
        for account in orphaned_accounts:
            logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {account.username} (ID: {account.id})")
        
        session.close()
        
        return len(orphaned_accounts)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return -1 