#!/usr/bin/env python3
"""
üîí –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ SQLAlchemy best practices
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç with_loader_criteria –∏ scoped_session —Å custom scopefunc
"""

import logging
from contextvars import ContextVar
from typing import Optional, Any
from functools import wraps

from sqlalchemy.orm import scoped_session, sessionmaker, with_loader_criteria
from sqlalchemy import event

from database.models import InstagramAccount

logger = logging.getLogger(__name__)

# Context variable –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å async/await)
_current_user: ContextVar[Optional[int]] = ContextVar('current_user', default=None)

class UserContextManager:
    """üîí –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def set_current_user(user_id: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        _current_user.set(user_id)
        logger.info(f"üîí –£–°–¢–ê–ù–û–í–õ–ï–ù –ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_id}")
    
    @staticmethod
    def get_current_user() -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return _current_user.get()
    
    @staticmethod
    def clear_current_user():
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        _current_user.set(None)

def create_scoped_session_with_user_isolation(engine):
    """
    üîí –°–æ–∑–¥–∞–µ—Ç scoped_session —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        engine: SQLAlchemy engine
    
    Returns:
        scoped_session —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    def user_scopefunc():
        """–§—É–Ω–∫—Ü–∏—è –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = UserContextManager.get_current_user()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (thread_id, user_id) –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        import threading
        return (threading.get_ident(), user_id)
    
    # –°–æ–∑–¥–∞–µ–º sessionmaker
    session_factory = sessionmaker(bind=engine)
    
    # –°–æ–∑–¥–∞–µ–º scoped_session —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    Session = scoped_session(session_factory, scopefunc=user_scopefunc)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è InstagramAccount
    @event.listens_for(Session, "do_orm_execute")
    def _add_user_filtering_criteria(execute_state):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ user_id –¥–ª—è InstagramAccount"""
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ SELECT –∑–∞–ø—Ä–æ—Å
        if not execute_state.is_select:
            return
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if execute_state.execution_options.get("skip_user_filter", False):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user_id = UserContextManager.get_current_user()
        
        if current_user_id is None:
            logger.warning("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω")
            return
        
        logger.info(f"üîí –ü–†–ò–ú–ï–ù–Ø–ï–ú –§–ò–õ–¨–¢–† –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {current_user_id}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è InstagramAccount
        execute_state.statement = execute_state.statement.options(
            with_loader_criteria(
                InstagramAccount,
                lambda cls: cls.user_id == current_user_id,
                include_aliases=True
            )
        )
    
    logger.info("üîí ‚úÖ Scoped session —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω")
    return Session

def require_user_context(func):
    """
    üîí –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Usage:
        @require_user_context
        def some_function():
            # —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pass
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        if UserContextManager.get_current_user() is None:
            raise ValueError("üö´ –§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return func(*args, **kwargs)
    return wrapper

def with_user_context(user_id: int):
    """
    üîí Context manager –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Usage:
        with with_user_context(123):
            # –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123
            accounts = session.query(InstagramAccount).all()
    """
    class UserContextManager:
        def __init__(self, user_id: int):
            self.user_id = user_id
            self.previous_user = None
            
        def __enter__(self):
            self.previous_user = _current_user.get()
            UserContextManager.set_current_user(self.user_id)
            return self
            
        def __exit__(self, exc_type, exc_val, exc_tb):
            if self.previous_user is not None:
                UserContextManager.set_current_user(self.previous_user)
            else:
                UserContextManager.clear_current_user()
    
    return UserContextManager(user_id) 