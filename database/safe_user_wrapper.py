#!/usr/bin/env python3
"""
üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ë–Å–†–¢–ö–ê –î–õ–Ø –ò–ó–û–õ–Ø–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—á–µ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import logging
from typing import List, Optional
from telegram.ext import CallbackContext
from database.db_manager import get_instagram_accounts as _original_get_accounts
from database.db_manager import get_instagram_account as _original_get_account
from database.models import InstagramAccount

logger = logging.getLogger(__name__)

def get_user_instagram_accounts(context: CallbackContext = None, user_id: int = None) -> List[InstagramAccount]:
    """
    üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –≤–µ—Ä—Å–∏—è get_instagram_accounts —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π
    
    Args:
        context: Telegram context (–¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id)
        user_id: –ü—Ä—è–º–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π user_id (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ context)
    
    Returns:
        List[InstagramAccount]: –ê–∫–∫–∞—É–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if user_id is None and context:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç –≤ context
            if hasattr(context, 'user_data') and 'user_id' in context.user_data:
                user_id = context.user_data['user_id']
            elif hasattr(context, 'user') and context.user:
                user_id = context.user.id
            elif hasattr(context, '_user_id'):
                user_id = context._user_id
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ context: {e}")
    
    if user_id is None:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç user_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏!")
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    
    logger.debug(f"üîí –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return _original_get_accounts(user_id)

def get_user_instagram_account(account_id: int, context: CallbackContext = None, user_id: int = None) -> Optional[InstagramAccount]:
    """
    üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –≤–µ—Ä—Å–∏—è get_instagram_account —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π
    
    Args:
        account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram
        context: Telegram context (–¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id)
        user_id: –ü—Ä—è–º–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π user_id (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ context)
    
    Returns:
        InstagramAccount: –ê–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if user_id is None and context:
        try:
            if hasattr(context, 'user_data') and 'user_id' in context.user_data:
                user_id = context.user_data['user_id']
            elif hasattr(context, 'user') and context.user:
                user_id = context.user.id
            elif hasattr(context, '_user_id'):
                user_id = context._user_id
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–∑ context: {e}")
    
    if user_id is None:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç user_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}!")
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    
    logger.debug(f"üîí –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return _original_get_account(account_id, user_id)

def extract_user_id_from_update(update, context: CallbackContext) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ Update –æ–±—ä–µ–∫—Ç–∞"""
    try:
        if update.effective_user:
            return update.effective_user.id
        elif update.message and update.message.from_user:
            return update.message.from_user.id
        elif update.callback_query and update.callback_query.from_user:
            return update.callback_query.from_user.id
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id: {e}")
        return None 