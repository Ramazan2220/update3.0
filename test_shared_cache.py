#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—â–µ–≥–æ –∫–µ—à–∞ –¥–æ—Å—Ç—É–ø–æ–≤
"""

import sys
import os
import json
import time

sys.path.insert(0, './utils')

def test_shared_cache():
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ë–©–ï–ì–û –ö–ï–®–ê")
    print("=" * 50)
    
    test_user_id = 6626270112
    cache_file = "data/shared_access_cache.json"
    
    try:
        from access_manager import get_access_manager, has_access
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = get_access_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        if hasattr(manager, '_load_shared_cache'):
            print("‚úÖ –ú–µ—Ç–æ–¥ _load_shared_cache –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ _load_shared_cache –ù–ï –Ω–∞–π–¥–µ–Ω")
            
        if hasattr(manager, '_save_shared_cache'):
            print("‚úÖ –ú–µ—Ç–æ–¥ _save_shared_cache –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ _save_shared_cache –ù–ï –Ω–∞–π–¥–µ–Ω")
            
        if hasattr(manager, '_sync_with_shared_cache'):
            print("‚úÖ –ú–µ—Ç–æ–¥ _sync_with_shared_cache –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ _sync_with_shared_cache –ù–ï –Ω–∞–π–¥–µ–Ω")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        print("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        manager.force_sync()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–µ—à–∞
        if os.path.exists(cache_file):
            print(f"‚úÖ –§–∞–π–ª –∫–µ—à–∞ —Å–æ–∑–¥–∞–Ω: {cache_file}")
            
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
                
            print(f"üìä –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {len(cache_data.get('cache', {}))}")
            print(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {cache_data.get('last_update', 'N/A')}")
            print(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω–æ: {cache_data.get('updated_by', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cache = cache_data.get('cache', {})
            user_key = str(test_user_id)
            if user_key in cache:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ")
                user_data = cache[user_key]
                print(f"   is_active: {user_data.get('is_active')}")
                print(f"   role: {user_data.get('role')}")
            else:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ")
                
        else:
            print(f"‚ùå –§–∞–π–ª –∫–µ—à–∞ –ù–ï —Å–æ–∑–¥–∞–Ω: {cache_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º has_access
        result = has_access(test_user_id)
        print(f"\nüìä has_access({test_user_id}): {result}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_shared_cache() 