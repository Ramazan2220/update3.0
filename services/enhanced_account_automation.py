import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional

from database.db_manager import get_instagram_account, update_instagram_account, get_total_accounts
from services.rate_limiter import rate_limiter, ActionType
from instagram.enhanced_warmup_system import EnhancedWarmupSystem
from instagram.ml_health_predictor import MLHealthPredictor
from instagram.client import get_instagram_client

logger = logging.getLogger(__name__)

class EnhancedAccountAutomation:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å ML –∏ AI"""
    
    def __init__(self):
        self.warmup_system = EnhancedWarmupSystem()
        self.ml_predictor = MLHealthPredictor()
        self.active_sessions = {}
        
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
    
    async def run_smart_warmup_campaign(self, account_ids: List[int], duration_minutes: int = 30) -> Dict[str, any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        results = {
            'total_accounts': len(account_ids),
            'successful': 0,
            'failed': 0,
            'warnings': 0,
            'detailed_results': {},
            'ml_insights': {}
        }
        
        logger.info(f"üéØ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –∞–Ω–∞–ª–∏–∑–∞
        account_priorities = await self._analyze_accounts_priority(account_ids)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for priority_group in ['high', 'medium', 'low']:
            priority_accounts = account_priorities.get(priority_group, [])
            
            if priority_accounts:
                logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä—É–ø–ø—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ '{priority_group}': {len(priority_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                group_results = await self._process_accounts_batch(priority_accounts, duration_minutes)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for account_id, result in group_results.items():
                    results['detailed_results'][account_id] = result
                    if result['success']:
                        results['successful'] += 1
                    else:
                        results['failed'] += 1
                    if result.get('warnings'):
                        results['warnings'] += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                if priority_group != 'low':
                    await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ ML –∏–Ω—Å–∞–π—Ç—ã
        results['ml_insights'] = self._generate_campaign_insights(results['detailed_results'])
        
        logger.info(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results['successful']} —É—Å–ø–µ—à–Ω–æ, {results['failed']} –æ—à–∏–±–æ–∫, {results['warnings']} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        return results
    
    async def _analyze_accounts_priority(self, account_ids: List[int]) -> Dict[str, List[int]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é ML"""
        priorities = {'high': [], 'medium': [], 'low': []}
        
        for account_id in account_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                prediction = self.ml_predictor.predict_account_health(account_id)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ health score –∏ risk
                if prediction.health_score > 70 and prediction.ban_risk_score < 30:
                    priorities['high'].append(account_id)
                elif prediction.health_score > 50 and prediction.ban_risk_score < 60:
                    priorities['medium'].append(account_id)
                else:
                    priorities['low'].append(account_id)
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
                priorities['medium'].append(account_id)  # Default
        
        logger.info(f"üìà –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: High({len(priorities['high'])}), Medium({len(priorities['medium'])}), Low({len(priorities['low'])})")
        return priorities
    
    async def _process_accounts_batch(self, account_ids: List[int], duration_minutes: int) -> Dict[int, Dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        tasks = []
        
        for account_id in account_ids:
            task = asyncio.create_task(self._process_single_account(account_id, duration_minutes))
            tasks.append((account_id, task))
        
        results = {}
        for account_id, task in tasks:
            try:
                result = await task
                results[account_id] = result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
                results[account_id] = {
                    'success': False,
                    'error': str(e),
                    'warnings': []
                }
        
        return results
    
    async def _process_single_account(self, account_id: int, duration_minutes: int) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç —Å ML –∞–Ω–∞–ª–∏–∑–æ–º"""
        result = {
            'success': False,
            'ml_prediction': None,
            'warmup_metrics': None,
            'recommendations': [],
            'warnings': [],
            'error': None
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            account = get_instagram_account(account_id)
            if not account:
                result['error'] = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                return result
            
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–∫–∫–∞—É–Ω—Ç {account.username} (ID: {account_id})")
            
            # ML –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≥—Ä–µ–≤–æ–º
            client = get_instagram_client(account_id)
            ml_prediction = self.ml_predictor.predict_account_health(account_id, client)
            result['ml_prediction'] = {
                'health_score': ml_prediction.health_score,
                'ban_risk_score': ml_prediction.ban_risk_score,
                'confidence': ml_prediction.confidence,
                'risk_factors': ml_prediction.risk_factors
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏
            if ml_prediction.ban_risk_score > 80:
                result['error'] = f"–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –±–∞–Ω–∞ ({ml_prediction.ban_risk_score:.1f})"
                result['warnings'].append("account_too_risky")
                return result
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ ML
            adapted_duration = self._adapt_duration_by_ml(duration_minutes, ml_prediction)
            if adapted_duration != duration_minutes:
                result['warnings'].append(f"duration_adapted_from_{duration_minutes}_to_{adapted_duration}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤
            success, message, warmup_metrics = self.warmup_system.start_intelligent_warmup(
                account_id, adapted_duration
            )
            
            result['success'] = success
            result['warmup_metrics'] = {
                'actions_performed': warmup_metrics.actions_performed,
                'likes_given': warmup_metrics.likes_given,
                'stories_viewed': warmup_metrics.stories_viewed,
                'profiles_visited': warmup_metrics.profiles_visited,
                'errors_encountered': warmup_metrics.errors_encountered,
                'session_duration': warmup_metrics.session_duration
            }
            
            if not success:
                result['error'] = message
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            result['recommendations'] = ml_prediction.recommendations
            
            # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ ML
            await self._post_warmup_ml_analysis(account_id, warmup_metrics, ml_prediction)
            
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {success}, –¥–µ–π—Å—Ç–≤–∏–π: {warmup_metrics.actions_performed}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
            result['error'] = str(e)
        
        return result
    
    def _adapt_duration_by_ml(self, original_duration: int, ml_prediction) -> int:
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML"""
        health_score = ml_prediction.health_score
        ban_risk = ml_prediction.ban_risk_score
        
        # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - —Å–æ–∫—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è
        if ban_risk > 60:
            return max(10, original_duration // 3)
        elif ban_risk > 40:
            return max(15, original_duration // 2)
        
        # –ù–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        if health_score < 40:
            return min(60, original_duration * 1.5)
        elif health_score < 60:
            return min(45, original_duration * 1.2)
        
        return original_duration
    
    async def _post_warmup_ml_analysis(self, account_id: int, warmup_metrics, ml_prediction):
        """–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
            success_rate = (warmup_metrics.actions_performed - warmup_metrics.errors_encountered) / max(warmup_metrics.actions_performed, 1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º ML –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if success_rate > 0.8:
                outcome = 'healthy'
            elif warmup_metrics.errors_encountered > 5:
                outcome = 'problematic'
            else:
                outcome = 'normal'
            
            # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            logger.info(f"üìö –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {outcome}, —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ ML: {e}")
    
    def _generate_campaign_insights(self, detailed_results: Dict[int, Dict]) -> Dict[str, any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –ø–æ –≤—Å–µ–π –∫–∞–º–ø–∞–Ω–∏–∏"""
        insights = {
            'average_health_score': 0,
            'average_ban_risk': 0,
            'common_risk_factors': {},
            'performance_by_health_range': {},
            'recommendations_summary': {}
        }
        
        try:
            total_accounts = len(detailed_results)
            if total_accounts == 0:
                return insights
            
            health_scores = []
            ban_risks = []
            all_risk_factors = []
            all_recommendations = []
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for account_id, result in detailed_results.items():
                if result.get('ml_prediction'):
                    ml_pred = result['ml_prediction']
                    health_scores.append(ml_pred['health_score'])
                    ban_risks.append(ml_pred['ban_risk_score'])
                    all_risk_factors.extend(ml_pred['risk_factors'])
                
                if result.get('recommendations'):
                    all_recommendations.extend(result['recommendations'])
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if health_scores:
                insights['average_health_score'] = sum(health_scores) / len(health_scores)
                insights['average_ban_risk'] = sum(ban_risks) / len(ban_risks)
            
            # –ß–∞—Å—Ç–æ—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
            risk_factor_counts = {}
            for factor in all_risk_factors:
                risk_factor_counts[factor] = risk_factor_counts.get(factor, 0) + 1
            insights['common_risk_factors'] = dict(sorted(risk_factor_counts.items(), key=lambda x: x[1], reverse=True)[:5])
            
            # –ß–∞—Å—Ç–æ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendation_counts = {}
            for rec in all_recommendations:
                recommendation_counts[rec] = recommendation_counts.get(rec, 0) + 1
            insights['recommendations_summary'] = dict(sorted(recommendation_counts.items(), key=lambda x: x[1], reverse=True)[:5])
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –∑–¥–æ—Ä–æ–≤—å—è
            health_ranges = {'healthy': [], 'medium': [], 'risky': []}
            for account_id, result in detailed_results.items():
                if result.get('ml_prediction'):
                    health = result['ml_prediction']['health_score']
                    success = result.get('success', False)
                    
                    if health > 70:
                        health_ranges['healthy'].append(success)
                    elif health > 40:
                        health_ranges['medium'].append(success)
                    else:
                        health_ranges['risky'].append(success)
            
            for range_name, successes in health_ranges.items():
                if successes:
                    success_rate = sum(successes) / len(successes)
                    insights['performance_by_health_range'][range_name] = {
                        'count': len(successes),
                        'success_rate': success_rate
                    }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
        
        return insights
    
    async def monitor_accounts_health(self, account_ids: List[int]) -> Dict[str, any]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å ML"""
        monitoring_results = {
            'timestamp': datetime.now().isoformat(),
            'total_accounts': len(account_ids),
            'health_distribution': {'healthy': 0, 'medium': 0, 'risky': 0, 'critical': 0},
            'alerts': [],
            'recommendations': {},
            'top_risk_factors': {}
        }
        
        logger.info(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        all_predictions = {}
        all_risk_factors = []
        
        for account_id in account_ids:
            try:
                prediction = self.ml_predictor.predict_account_health(account_id)
                all_predictions[account_id] = prediction
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é
                health_score = prediction.health_score
                ban_risk = prediction.ban_risk_score
                
                if health_score > 80 and ban_risk < 20:
                    monitoring_results['health_distribution']['healthy'] += 1
                elif health_score > 60 and ban_risk < 40:
                    monitoring_results['health_distribution']['medium'] += 1
                elif health_score > 40 and ban_risk < 70:
                    monitoring_results['health_distribution']['risky'] += 1
                else:
                    monitoring_results['health_distribution']['critical'] += 1
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
                if ban_risk > 80:
                    monitoring_results['alerts'].append({
                        'account_id': account_id,
                        'type': 'critical_ban_risk',
                        'value': ban_risk,
                        'message': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ –±–∞–Ω–∞: {ban_risk:.1f}%"
                    })
                
                if health_score < 30:
                    monitoring_results['alerts'].append({
                        'account_id': account_id,
                        'type': 'low_health',
                        'value': health_score,
                        'message': f"–ù–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {health_score:.1f}%"
                    })
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
                all_risk_factors.extend(prediction.risk_factors)
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                if health_score < 60 or ban_risk > 40:
                    monitoring_results['recommendations'][account_id] = prediction.recommendations
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
                monitoring_results['alerts'].append({
                    'account_id': account_id,
                    'type': 'monitoring_error',
                    'message': f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
                })
        
        # –¢–æ–ø —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
        risk_factor_counts = {}
        for factor in all_risk_factors:
            risk_factor_counts[factor] = risk_factor_counts.get(factor, 0) + 1
        monitoring_results['top_risk_factors'] = dict(sorted(risk_factor_counts.items(), key=lambda x: x[1], reverse=True)[:5])
        
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(monitoring_results['alerts'])} –∞–ª–µ—Ä—Ç–æ–≤, {len(monitoring_results['recommendations'])} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        return monitoring_results
    
    async def optimize_account_strategy(self, account_id: int) -> Dict[str, any]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            logger.info(f"üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
            
            # ML –∞–Ω–∞–ª–∏–∑
            prediction = self.ml_predictor.predict_account_health(account_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            strategy = {
                'account_id': account_id,
                'current_health': prediction.health_score,
                'current_risk': prediction.ban_risk_score,
                'confidence': prediction.confidence,
                'strategy_type': '',
                'recommended_actions': [],
                'timing_recommendations': {},
                'risk_mitigation': []
            }
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if prediction.health_score > 80 and prediction.ban_risk_score < 20:
                strategy['strategy_type'] = 'aggressive_growth'
                strategy['recommended_actions'] = [
                    '–£–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 20%',
                    '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                    '–†–∞—Å—à–∏—Ä–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é'
                ]
            elif prediction.health_score > 60 and prediction.ban_risk_score < 40:
                strategy['strategy_type'] = 'stable_growth'
                strategy['recommended_actions'] = [
                    '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                    '–§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                    '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ engagement'
                ]
            elif prediction.health_score > 40:
                strategy['strategy_type'] = 'recovery_mode'
                strategy['recommended_actions'] = [
                    '–°–Ω–∏–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 30%',
                    '–§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–≥—Ä–µ–≤–µ',
                    '–£–ª—É—á—à–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è'
                ]
            else:
                strategy['strategy_type'] = 'emergency_recovery'
                strategy['recommended_actions'] = [
                    '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 48 —á–∞—Å–æ–≤',
                    '–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏',
                    '–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫'
                ]
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∞–π–º–∏–Ω–≥—É
            if 'high_api_error_rate' in prediction.risk_factors:
                strategy['timing_recommendations']['api_delays'] = '–£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ 2 —Ä–∞–∑–∞'
            
            if 'non_human_patterns' in prediction.risk_factors:
                strategy['timing_recommendations']['behavior'] = '–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –≤ –¥–µ–π—Å—Ç–≤–∏—è'
            
            # –ú–∏—Ç–∏–≥–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤
            for risk_factor in prediction.risk_factors:
                if risk_factor == 'frequent_challenges':
                    strategy['risk_mitigation'].append('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å residential –ø—Ä–æ–∫—Å–∏')
                elif risk_factor == 'excessive_activity':
                    strategy['risk_mitigation'].append('–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã')
                elif risk_factor == 'new_account':
                    strategy['risk_mitigation'].append('–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –Ω–∞ 7-10 –¥–Ω–µ–π')
            
            logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {strategy['strategy_type']} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
            
            return strategy
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return {
                'account_id': account_id,
                'error': str(e),
                'strategy_type': 'fallback_conservative'
            }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
def get_enhanced_automation():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    return EnhancedAccountAutomation() 