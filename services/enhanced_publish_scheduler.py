import logging
import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
import uuid

from database.db_manager import get_session, get_instagram_account
from database.models import PublishTask, TaskStatus, ContentType
from services.enhanced_account_automation import get_enhanced_automation
from instagram.ml_health_predictor import get_ml_health_predictor

logger = logging.getLogger(__name__)

class ScheduleStrategy(Enum):
    IMMEDIATE = "immediate"
    OPTIMAL_TIME = "optimal_time"  
    CUSTOM_TIME = "custom_time"
    BATCH_PROCESSING = "batch_processing"
    SMART_DISTRIBUTION = "smart_distribution"

@dataclass
class ContentItem:
    """–≠–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    id: str
    content_type: ContentType
    media_path: str
    caption: str
    hashtags: List[str] = None
    priority: int = 5  # 1-10, –≥–¥–µ 10 - –Ω–∞–∏–≤—ã—Å—à–∏–π
    target_accounts: List[int] = None
    optimal_time: datetime = None
    created_at: datetime = None
    
    def __post_init__(self):
        if self.hashtags is None:
            self.hashtags = []
        if self.target_accounts is None:
            self.target_accounts = []
        if self.created_at is None:
            self.created_at = datetime.now()
        if self.id is None:
            self.id = str(uuid.uuid4())

@dataclass 
class PublishCampaign:
    """–ö–∞–º–ø–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    id: str
    name: str
    content_items: List[ContentItem]
    schedule_strategy: ScheduleStrategy
    start_time: datetime
    end_time: datetime = None
    account_groups: List[str] = None
    auto_retry: bool = True
    max_retries: int = 3
    created_by: int = None
    status: str = "draft"
    
    def __post_init__(self):
        if self.account_groups is None:
            self.account_groups = []
        if self.id is None:
            self.id = str(uuid.uuid4())

class EnhancedPublishScheduler:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    
    def __init__(self):
        self.ml_predictor = get_ml_health_predictor()
        self.automation = get_enhanced_automation()
        self.active_campaigns = {}
        self.content_calendar = {}
        
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    
    async def create_publish_campaign(self, campaign: PublishCampaign) -> Tuple[bool, str]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        try:
            logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ '{campaign.name}' —Å {len(campaign.content_items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
            validation_result = self._validate_campaign(campaign)
            if not validation_result[0]:
                return False, validation_result[1]
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if campaign.schedule_strategy == ScheduleStrategy.OPTIMAL_TIME:
                await self._optimize_campaign_timing(campaign)
            elif campaign.schedule_strategy == ScheduleStrategy.SMART_DISTRIBUTION:
                await self._smart_distribute_content(campaign)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            task_ids = await self._create_publish_tasks(campaign)
            
            if task_ids:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é
                self.active_campaigns[campaign.id] = campaign
                campaign.status = "active"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—å
                self._add_to_content_calendar(campaign)
                
                logger.info(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è '{campaign.name}' —Å–æ–∑–¥–∞–Ω–∞: {len(task_ids)} –∑–∞–¥–∞—á")
                return True, f"–°–æ–∑–¥–∞–Ω–æ {len(task_ids)} –∑–∞–¥–∞—á –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
            else:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {e}")
            return False, str(e)
    
    def _validate_campaign(self, campaign: PublishCampaign) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é"""
        if not campaign.name:
            return False, "–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏"
        
        if not campaign.content_items:
            return False, "–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        
        if campaign.start_time <= datetime.now():
            return False, "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
        
        if campaign.end_time and campaign.end_time <= campaign.start_time:
            return False, "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        for item in campaign.content_items:
            if not item.media_path:
                return False, f"–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –º–µ–¥–∏–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {item.id}"
            
            if not item.target_accounts:
                return False, f"–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {item.id}"
        
        return True, "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
    
    async def _optimize_campaign_timing(self, campaign: PublishCampaign):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info(f"üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ '{campaign.name}'")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            all_accounts = set()
            for item in campaign.content_items:
                all_accounts.update(item.target_accounts)
            
            account_schedules = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            for account_id in all_accounts:
                optimal_times = await self._get_optimal_posting_times(account_id)
                account_schedules[account_id] = optimal_times
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            for item in campaign.content_items:
                best_time = self._find_best_time_for_accounts(
                    item.target_accounts, 
                    account_schedules,
                    campaign.start_time,
                    campaign.end_time
                )
                item.optimal_time = best_time
                
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(campaign.content_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
    
    async def _get_optimal_posting_times(self, account_id: int) -> List[datetime]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # ML –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            prediction = self.ml_predictor.predict_account_health(account_id)
            
            optimal_times = []
            base_time = datetime.now().replace(hour=9, minute=0, second=0, microsecond=0)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ health score
            if prediction.health_score > 80:
                # –ó–¥–æ—Ä–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã - –º–æ–∂–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —á–∞—â–µ
                for day in range(7):
                    day_base = base_time + timedelta(days=day)
                    optimal_times.extend([
                        day_base.replace(hour=9),   # –£—Ç—Ä–æ
                        day_base.replace(hour=13),  # –û–±–µ–¥
                        day_base.replace(hour=18),  # –í–µ—á–µ—Ä
                        day_base.replace(hour=21)   # –ù–æ—á—å
                    ])
            elif prediction.health_score > 60:
                # –°—Ä–µ–¥–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã - —É–º–µ—Ä–µ–Ω–Ω–æ
                for day in range(7):
                    day_base = base_time + timedelta(days=day)
                    optimal_times.extend([
                        day_base.replace(hour=10),  # –£—Ç—Ä–æ
                        day_base.replace(hour=15),  # –î–µ–Ω—å
                        day_base.replace(hour=19)   # –í–µ—á–µ—Ä
                    ])
            else:
                # –°–ª–∞–±—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
                for day in range(7):
                    day_base = base_time + timedelta(days=day)
                    optimal_times.append(day_base.replace(hour=14))  # –¢–æ–ª—å–∫–æ –¥–µ–Ω—å
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            now = datetime.now()
            optimal_times = [t for t in optimal_times if t > now]
            
            return optimal_times[:20]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–ª–æ—Ç–æ–≤
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
            return []
    
    def _find_best_time_for_accounts(self, account_ids: List[int], account_schedules: Dict, start_time: datetime, end_time: datetime = None) -> datetime:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö"""
        try:
            if end_time is None:
                end_time = start_time + timedelta(days=7)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
            all_times = []
            for account_id in account_ids:
                if account_id in account_schedules:
                    account_times = account_schedules[account_id]
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
                    filtered_times = [t for t in account_times if start_time <= t <= end_time]
                    all_times.extend(filtered_times)
            
            if not all_times:
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è
                return start_time
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            time_counts = {}
            for time in all_times:
                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —á–∞—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                hour_time = time.replace(minute=0, second=0, microsecond=0)
                time_counts[hour_time] = time_counts.get(hour_time, 0) + 1
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            best_time = max(time_counts.items(), key=lambda x: x[1])[0]
            return best_time
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return start_time
    
    async def _smart_distribute_content(self, campaign: PublishCampaign):
        """–£–º–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            logger.info(f"üß† –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {len(campaign.content_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            campaign.content_items.sort(key=lambda x: x.priority, reverse=True)
            
            current_time = campaign.start_time
            time_interval = timedelta(hours=2)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
            
            if campaign.end_time:
                total_duration = campaign.end_time - campaign.start_time
                time_interval = total_duration / len(campaign.content_items)
            
            for i, item in enumerate(campaign.content_items):
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å (¬±30 –º–∏–Ω—É—Ç)
                random_offset = timedelta(minutes=random.randint(-30, 30))
                item.optimal_time = current_time + random_offset
                
                current_time += time_interval
                
                logger.debug(f"üìÖ –≠–ª–µ–º–µ–Ω—Ç {item.id}: {item.optimal_time}")
            
            logger.info(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
    
    async def _create_publish_tasks(self, campaign: PublishCampaign) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            session = get_session()
            task_ids = []
            
            for item in campaign.content_items:
                publish_time = item.optimal_time or campaign.start_time
                
                for account_id in item.target_accounts:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
                    prediction = self.ml_predictor.predict_account_health(account_id)
                    
                    if prediction.ban_risk_score > 80:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –±–∞–Ω–∞ ({prediction.ban_risk_score:.1f}%)")
                        continue
                    
                    task = PublishTask(
                        account_id=account_id,
                        content_type=item.content_type,
                        media_path=item.media_path,
                        caption=item.caption,
                        hashtags=json.dumps(item.hashtags) if item.hashtags else None,
                        scheduled_time=publish_time,
                        status=TaskStatus.PENDING,
                        created_by=campaign.created_by,
                        campaign_id=campaign.id,
                        priority=item.priority,
                        max_retries=campaign.max_retries if campaign.auto_retry else 0
                    )
                    
                    session.add(task)
                    session.flush()
                    task_ids.append(str(task.id))
            
            session.commit()
            session.close()
            
            logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–æ {len(task_ids)} –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return task_ids
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            session.rollback()
            session.close()
            return []
    
    def _add_to_content_calendar(self, campaign: PublishCampaign):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é –≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
        try:
            for item in campaign.content_items:
                publish_time = item.optimal_time or campaign.start_time
                date_key = publish_time.date().isoformat()
                
                if date_key not in self.content_calendar:
                    self.content_calendar[date_key] = []
                
                calendar_entry = {
                    'campaign_id': campaign.id,
                    'campaign_name': campaign.name,
                    'content_id': item.id,
                    'content_type': item.content_type.value,
                    'scheduled_time': publish_time.isoformat(),
                    'accounts_count': len(item.target_accounts),
                    'priority': item.priority
                }
                
                self.content_calendar[date_key].append(calendar_entry)
            
            logger.info(f"üìÖ –ö–∞–º–ø–∞–Ω–∏—è '{campaign.name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—å")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {e}")
    
    async def batch_schedule_posts(self, content_batch: List[ContentItem], account_ids: List[int], start_time: datetime, interval_hours: int = 2) -> Tuple[bool, str]:
        """–ü–∞–∫–µ—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
        try:
            logger.info(f"üì¶ –ü–∞–∫–µ—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(content_batch)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø–∞–∫–µ—Ç–∞
            campaign = PublishCampaign(
                id=str(uuid.uuid4()),
                name=f"Batch Campaign {datetime.now().strftime('%Y%m%d_%H%M%S')}",
                content_items=content_batch,
                schedule_strategy=ScheduleStrategy.BATCH_PROCESSING,
                start_time=start_time
            )
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            for item in campaign.content_items:
                if not item.target_accounts:
                    item.target_accounts = account_ids.copy()
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
            current_time = start_time
            for item in campaign.content_items:
                item.optimal_time = current_time
                current_time += timedelta(hours=interval_hours)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
            success, message = await self.create_publish_campaign(campaign)
            
            if success:
                return True, f"–ü–∞–∫–µ—Ç –∏–∑ {len(content_batch)} –ø–æ—Å—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"
            else:
                return False, f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {message}"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False, str(e)
    
    def get_content_calendar(self, start_date: datetime = None, end_date: datetime = None) -> Dict[str, List]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            if start_date is None:
                start_date = datetime.now().date()
            if end_date is None:
                end_date = start_date + timedelta(days=7)
            
            filtered_calendar = {}
            
            for date_str, entries in self.content_calendar.items():
                date_obj = datetime.fromisoformat(date_str).date()
                if start_date <= date_obj <= end_date:
                    filtered_calendar[date_str] = entries
            
            return filtered_calendar
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return {}
    
    async def reschedule_failed_tasks(self) -> Dict[str, int]:
        """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        try:
            session = get_session()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
            failed_tasks = session.query(PublishTask).filter(
                PublishTask.status == TaskStatus.FAILED,
                PublishTask.retry_count < PublishTask.max_retries
            ).all()
            
            results = {'rescheduled': 0, 'skipped': 0}
            
            for task in failed_tasks:
                # ML –∞–Ω–∞–ª–∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                prediction = self.ml_predictor.predict_account_health(task.account_id)
                
                if prediction.ban_risk_score < 60:  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 1-3 —á–∞—Å–∞
                    new_time = datetime.now() + timedelta(hours=random.randint(1, 3))
                    task.scheduled_time = new_time
                    task.status = TaskStatus.PENDING
                    task.retry_count += 1
                    results['rescheduled'] += 1
                    
                    logger.info(f"üîÑ –ó–∞–¥–∞—á–∞ {task.id} –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {new_time}")
                else:
                    results['skipped'] += 1
                    logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task.id} –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")
            
            session.commit()
            session.close()
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {results['rescheduled']}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {results['skipped']}")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            session.rollback()
            session.close()
            return {'rescheduled': 0, 'skipped': 0, 'error': str(e)}
    
    def get_campaign_status(self, campaign_id: str) -> Dict[str, any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏"""
        try:
            session = get_session()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–º–ø–∞–Ω–∏–∏
            tasks = session.query(PublishTask).filter(
                PublishTask.campaign_id == campaign_id
            ).all()
            
            session.close()
            
            if not tasks:
                return {'error': '–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            
            status = {
                'campaign_id': campaign_id,
                'total_tasks': len(tasks),
                'pending': sum(1 for t in tasks if t.status == TaskStatus.PENDING),
                'processing': sum(1 for t in tasks if t.status == TaskStatus.PROCESSING),
                'completed': sum(1 for t in tasks if t.status == TaskStatus.COMPLETED),
                'failed': sum(1 for t in tasks if t.status == TaskStatus.FAILED),
                'progress_percentage': 0
            }
            
            if status['total_tasks'] > 0:
                status['progress_percentage'] = (status['completed'] / status['total_tasks']) * 100
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏: {e}")
            return {'error': str(e)}

# –ü—Ä–æ—Å—Ç–æ–π random –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ 
import random

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def get_enhanced_publish_scheduler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    return EnhancedPublishScheduler() 