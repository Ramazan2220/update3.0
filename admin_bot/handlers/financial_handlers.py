from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from datetime import datetime, timedelta
import json
from typing import Dict, List
import calendar

from ..config.admin_list import is_admin, has_permission, Permission
from ..services.user_service import UserService
from ..models.user import SubscriptionPlan, UserStatus, PLAN_INFO
from ..middleware.admin_auth import admin_required, permission_required

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_service = UserService()

@admin_required
@permission_required(Permission.VIEW_FINANCE)
def financial_menu(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = user_service.get_statistics()
    monthly_revenue = calculate_monthly_revenue()
    yearly_revenue = calculate_yearly_revenue()
    
    text = f"""üí∞ **–§–ò–ù–ê–ù–°–û–í–´–ï –û–¢–ß–ï–¢–´**

üìä **–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: ${monthly_revenue:.2f}
‚Ä¢ –ì–æ–¥–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑: ${yearly_revenue:.2f}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {stats['active_users']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ç—Ä–∏–∞–ª–∞: {calculate_trial_conversion():.1f}%

üí≥ **–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:** ${stats['estimated_revenue'] / max(stats['total_users'], 1):.2f}
"""
    
    keyboard = [
        [InlineKeyboardButton("üìà –î–æ—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º", callback_data="financial_monthly")],
        [InlineKeyboardButton("üíé –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–ª–∞–Ω–∞–º", callback_data="financial_plans")],
        [InlineKeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏", callback_data="financial_conversions")],
        [InlineKeyboardButton("üìä –ü—Ä–æ–≥–Ω–æ–∑—ã", callback_data="financial_forecasts")],
        [InlineKeyboardButton("üí≥ –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="financial_payments")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", callback_data="financial_export")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required
@permission_required(Permission.VIEW_FINANCE)
def financial_monthly(update: Update, context: CallbackContext):
    """–û—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º –ø–æ –º–µ—Å—è—Ü–∞–º"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤
    monthly_data = get_monthly_revenue_data()
    
    text = "üìà **–î–û–•–û–î–´ –ü–û –ú–ï–°–Ø–¶–ê–ú**\n\n"
    
    total_year = 0
    for month_data in monthly_data:
        month_name = calendar.month_name[month_data['month']]
        revenue = month_data['revenue']
        users = month_data['users']
        total_year += revenue
        
        # –≠–º–æ–¥–∑–∏ —Ç—Ä–µ–Ω–¥–∞
        trend = "üìà" if month_data.get('growth', 0) > 0 else "üìâ" if month_data.get('growth', 0) < 0 else "‚û°Ô∏è"
        
        text += f"{trend} **{month_name} {month_data['year']}**\n"
        text += f"   üí∞ –î–æ—Ö–æ–¥: ${revenue:.2f}\n"
        text += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}\n"
        text += f"   üìä ARPU: ${revenue/max(users, 1):.2f}\n\n"
    
    text += f"üíé **–ò—Ç–æ–≥–æ –∑–∞ –≥–æ–¥:** ${total_year:.2f}"
    
    keyboard = [
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞", callback_data="financial_growth_chart")],
        [InlineKeyboardButton("üîç –î–µ—Ç–∞–ª–∏ –º–µ—Å—è—Ü–∞", callback_data="financial_month_details")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="financial")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required  
@permission_required(Permission.VIEW_FINANCE)
def financial_plans(update: Update, context: CallbackContext):
    """–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–∞–º"""
    query = update.callback_query
    
    plans_data = analyze_plans_revenue()
    
    text = "üíé **–ê–ù–ê–õ–ò–ó –ü–û –¢–ê–†–ò–§–ù–´–ú –ü–õ–ê–ù–ê–ú**\n\n"
    
    total_revenue = 0
    for plan_key, data in plans_data.items():
        plan_info = PLAN_INFO.get(plan_key)
        if not plan_info:
            continue
            
        plan_name = plan_info['name']
        plan_price = plan_info['price']
        users_count = data['users']
        revenue = data['revenue']
        total_revenue += revenue
        
        percentage = (revenue / max(sum(p['revenue'] for p in plans_data.values()), 1)) * 100
        
        text += f"**{plan_name}**\n"
        text += f"   üí∞ –¶–µ–Ω–∞: ${plan_price}/–º–µ—Å\n"
        text += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        text += f"   üíµ –î–æ—Ö–æ–¥: ${revenue:.2f} ({percentage:.1f}%)\n"
        text += f"   üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${users_count * plan_price:.2f}/–º–µ—Å\n\n"
    
    text += f"üí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥:** ${total_revenue:.2f}/–º–µ—Å"
    
    keyboard = [
        [InlineKeyboardButton("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", callback_data="financial_plans_distribution")],
        [InlineKeyboardButton("üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="financial_plans_optimization")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="financial")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required
@permission_required(Permission.VIEW_FINANCE)  
def financial_conversions(update: Update, context: CallbackContext):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–π"""
    query = update.callback_query
    
    conversion_data = calculate_conversion_metrics()
    
    text = "üîÑ **–ê–ù–ê–õ–ò–ó –ö–û–ù–í–ï–†–°–ò–ô**\n\n"
    
    text += f"**–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"
    text += f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ç—Ä–∏–∞–ª ‚Üí –ø–ª–∞—Ç–Ω–∞—è: {conversion_data['trial_to_paid']:.1f}%\n"
    text += f"‚Ä¢ Retention 30 –¥–Ω–µ–π: {conversion_data['retention_30']:.1f}%\n"
    text += f"‚Ä¢ Churn rate: {conversion_data['churn_rate']:.1f}%\n"
    text += f"‚Ä¢ LTV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${conversion_data['ltv']:.2f}\n\n"
    
    text += f"**–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:**\n"
    for source, data in conversion_data['by_source'].items():
        text += f"‚Ä¢ {source}: {data['conversion']:.1f}% ({data['users']} –ø–æ–ª—å–∑.)\n"
    
    text += f"\n**–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂:**\n"
    text += f"1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {conversion_data['funnel']['registrations']}\n"
    text += f"2Ô∏è‚É£ –ê–∫—Ç–∏–≤–∞—Ü–∏–∏: {conversion_data['funnel']['activations']} ({conversion_data['funnel']['activation_rate']:.1f}%)\n"
    text += f"3Ô∏è‚É£ –ü–æ–∫—É–ø–∫–∏: {conversion_data['funnel']['purchases']} ({conversion_data['funnel']['purchase_rate']:.1f}%)\n"
    
    keyboard = [
        [InlineKeyboardButton("üìà –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é", callback_data="financial_improve_conversion")],
        [InlineKeyboardButton("üéØ A/B —Ç–µ—Å—Ç—ã", callback_data="financial_ab_tests")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="financial")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def calculate_monthly_revenue() -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥"""
    users = user_service.get_all_users()
    monthly_revenue = 0
    
    for user in users:
        if user.is_active and user.subscription_plan:
            plan_info = PLAN_INFO.get(user.subscription_plan)
            if plan_info:
                monthly_revenue += plan_info['price']
    
    return monthly_revenue

def calculate_yearly_revenue() -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥–æ–¥–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑"""
    return calculate_monthly_revenue() * 12

def calculate_trial_conversion() -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏–∑ —Ç—Ä–∏–∞–ª–∞"""
    users = user_service.get_all_users()
    trial_users = [u for u in users if u.subscription_plan == SubscriptionPlan.TRIAL]
    paid_users = [u for u in users if u.subscription_plan != SubscriptionPlan.TRIAL and u.subscription_plan is not None]
    
    total_trial = len(trial_users) + len(paid_users)
    if total_trial == 0:
        return 0
    
    return (len(paid_users) / total_trial) * 100

def get_monthly_revenue_data() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ—Ö–æ–¥–∞–º –ø–æ –º–µ—Å—è—Ü–∞–º"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    current_date = datetime.now()
    monthly_data = []
    
    for i in range(12):
        month_date = current_date - timedelta(days=30 * i)
        
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î)
        base_revenue = calculate_monthly_revenue()
        monthly_revenue = base_revenue * (0.8 + (i * 0.02))  # –°–∏–º—É–ª—è—Ü–∏—è —Ä–æ—Å—Ç–∞
        monthly_users = len(user_service.get_all_users()) - (i * 5)  # –°–∏–º—É–ª—è—Ü–∏—è —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        monthly_data.append({
            'month': month_date.month,
            'year': month_date.year,
            'revenue': monthly_revenue,
            'users': max(monthly_users, 0),
            'growth': (i * 2) if i > 0 else 0  # –°–∏–º—É–ª—è—Ü–∏—è —Ä–æ—Å—Ç–∞
        })
    
    return monthly_data[::-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ

def analyze_plans_revenue() -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥—ã –ø–æ –ø–ª–∞–Ω–∞–º"""
    users = user_service.get_all_users()
    plans_data = {}
    
    for plan in SubscriptionPlan:
        if plan == SubscriptionPlan.TRIAL:
            continue
            
        plan_users = [u for u in users if u.subscription_plan == plan and u.is_active]
        plan_info = PLAN_INFO.get(plan)
        
        if plan_info:
            plans_data[plan] = {
                'users': len(plan_users),
                'revenue': len(plan_users) * plan_info['price']
            }
    
    return plans_data

def calculate_conversion_metrics() -> Dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    users = user_service.get_all_users()
    
    # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    trial_conversion = calculate_trial_conversion()
    active_users = len([u for u in users if u.is_active])
    total_users = len(users)
    
    return {
        'trial_to_paid': trial_conversion,
        'retention_30': 85.0,  # –ó–∞–≥–ª—É—à–∫–∞
        'churn_rate': 5.2,     # –ó–∞–≥–ª—É—à–∫–∞
        'ltv': 600.0,          # –ó–∞–≥–ª—É—à–∫–∞
        'by_source': {
            '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π': {'conversion': 12.5, 'users': 45},
            '–†–µ–∫–ª–∞–º–∞': {'conversion': 8.3, 'users': 32},
            '–†–µ—Ñ–µ—Ä–∞–ª—ã': {'conversion': 15.2, 'users': 23}
        },
        'funnel': {
            'registrations': total_users,
            'activations': active_users,
            'activation_rate': (active_users / max(total_users, 1)) * 100,
            'purchases': len([u for u in users if u.subscription_plan != SubscriptionPlan.TRIAL]),
            'purchase_rate': trial_conversion
        }
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def get_financial_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    return {
        'financial': financial_menu,
        'financial_monthly': financial_monthly,
        'financial_plans': financial_plans,
        'financial_conversions': financial_conversions,
    } 