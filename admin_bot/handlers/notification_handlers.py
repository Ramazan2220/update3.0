#!/usr/bin/env python3
"""
üîî Notification Handlers - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""

import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from utils.notification_manager import get_notification_manager, NotificationType, NotificationPriority
from utils.subscription_monitor import get_subscription_monitor
from utils.broadcast_system import get_broadcast_system, BroadcastType

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ωversation handler'–∞
(WAITING_BROADCAST_TITLE, WAITING_BROADCAST_MESSAGE, WAITING_BROADCAST_TYPE,
 WAITING_PERSONAL_USER, WAITING_PERSONAL_TITLE, WAITING_PERSONAL_MESSAGE,
 WAITING_SCHEDULE_TIME) = range(7)

def notifications_menu(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="notif_broadcast"),
                InlineKeyboardButton("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="notif_personal")
            ],
            [
                InlineKeyboardButton("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="notif_subscriptions"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notif_stats")
            ],
            [
                InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="notif_history"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notif_settings")
            ],
            [
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = """üîî **–°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

üì¢ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞** - –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º
üë§ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ** - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚è∞ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
üìã **–ò—Å—Ç–æ—Ä–∏—è** - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏** - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"""
        
        if update.callback_query:
            update.callback_query.answer()
            update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ notifications_menu: {e}")

def handle_broadcast_start(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    update.callback_query.answer()
    
    text = """üì¢ **–°–û–ó–î–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò**

–í–≤–µ–¥–∏—Ç–µ **–∑–∞–≥–æ–ª–æ–≤–æ–∫** —Ä–∞—Å—Å—ã–ª–∫–∏:

üí° –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã v2.0
‚Ä¢ üéâ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
‚Ä¢ ‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."""
    
    update.callback_query.edit_message_text(text, parse_mode='Markdown')
    
    return WAITING_BROADCAST_TITLE

def handle_broadcast_title(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    title = update.message.text.strip()
    
    if len(title) < 3:
        update.message.reply_text("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return WAITING_BROADCAST_TITLE
    
    if len(title) > 100:
        update.message.reply_text("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return WAITING_BROADCAST_TITLE
    
    context.user_data['broadcast_title'] = title
    
    text = f"""‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: **{title}**

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è**:

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ü–∏—à–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

üìù –ü—Ä–∏–º–µ—Ä:
–ü—Ä–∏–≤–µ—Ç! üéâ
–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞!
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥.
üëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏"
"""
    
    update.message.reply_text(text, parse_mode='Markdown')
    
    return WAITING_BROADCAST_MESSAGE

def handle_broadcast_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
    message = update.message.text.strip()
    
    if len(message) < 10:
        update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return WAITING_BROADCAST_MESSAGE
    
    if len(message) > 2000:
        update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return WAITING_BROADCAST_MESSAGE
    
    context.user_data['broadcast_message'] = message
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ä–∞—Å—Å—ã–ª–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_all"),
            InlineKeyboardButton("üÜì Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_trial")
        ],
        [
            InlineKeyboardButton("üíé Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_premium"),
            InlineKeyboardButton("üîì Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_free")
        ],
        [
            InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_active"),
            InlineKeyboardButton("‚è∞ –° –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="broadcast_type_expiring")
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="notif_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {context.user_data['broadcast_title']}
**–°–æ–æ–±—â–µ–Ω–∏–µ:** {message[:100]}{'...' if len(message) > 100 else ''}

–í—ã–±–µ—Ä–∏—Ç–µ **—Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π**:"""
    
    update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    return WAITING_BROADCAST_TYPE

def handle_broadcast_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    query.answer()
    
    type_mapping = {
        'broadcast_type_all': ('all', '–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'),
        'broadcast_type_trial': ('trial', 'Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'),
        'broadcast_type_premium': ('premium', 'Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'), 
        'broadcast_type_free': ('free', 'Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'),
        'broadcast_type_active': ('active', '–ê–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'),
        'broadcast_type_expiring': ('expiring', '–° –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π')
    }
    
    if query.data not in type_mapping:
        return notifications_menu(update, context)
    
    broadcast_type, type_name = type_mapping[query.data]
    context.user_data['broadcast_type'] = broadcast_type
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = [
        [
            InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="broadcast_send_now"),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="broadcast_schedule")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="notif_broadcast"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="notif_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    title = context.user_data['broadcast_title']
    message = context.user_data['broadcast_message']
    
    text = f"""üìã **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {title}
**–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:** {type_name}
**–°–æ–æ–±—â–µ–Ω–∏–µ:**
{message}

–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"""
    
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    return ConversationHandler.END

def handle_broadcast_send(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    query = update.callback_query
    query.answer()
    
    try:
        admin_id = update.effective_user.id
        title = context.user_data.get('broadcast_title', '')
        message = context.user_data.get('broadcast_message', '')
        broadcast_type = context.user_data.get('broadcast_type', 'all')
        
        broadcast_system = get_broadcast_system()
        
        if query.data == "broadcast_send_now":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–π—á–∞—Å
            broadcast_id = broadcast_system.broadcast_to_group(
                title=title,
                message=message,
                group=broadcast_type,
                admin_id=admin_id
            )
            
            text = f"""‚úÖ **–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê!**

üÜî ID —Ä–∞—Å—Å—ã–ª–∫–∏: `{broadcast_id}`
üìä –°—Ç–∞—Ç—É—Å: –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å

–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"."""
            
        else:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –ø–æ—Ç–æ–º
            text = """‚è∞ **–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**

–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`

üí° –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ `2024-12-25 10:00` - 25 –¥–µ–∫–∞–±—Ä—è –≤ 10:00
‚Ä¢ `2024-12-20 18:30` - 20 –¥–µ–∫–∞–±—Ä—è –≤ 18:30

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:
‚Ä¢ `+1h` - —á–µ—Ä–µ–∑ 1 —á–∞—Å
‚Ä¢ `+30m` - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
‚Ä¢ `+1d` - —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å"""
            
            query.edit_message_text(text, parse_mode='Markdown')
            return WAITING_SCHEDULE_TIME
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('broadcast_title', None)
        context.user_data.pop('broadcast_message', None) 
        context.user_data.pop('broadcast_type', None)
        
        query.edit_message_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")

def handle_notifications_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    query = update.callback_query
    query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        notification_manager = get_notification_manager()
        broadcast_system = get_broadcast_system()
        subscription_monitor = get_subscription_monitor()
        
        notif_stats = notification_manager.get_stats(7)
        broadcast_stats = broadcast_system.get_broadcast_stats(7)
        monitor_stats = subscription_monitor.get_monitor_stats()
        
        text = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô**

**üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (7 –¥–Ω–µ–π):**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notif_stats.get('total_sent_period', 0)}
‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {notif_stats.get('pending_count', 0)}
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {notif_stats.get('scheduled_count', 0)}

**üì¢ –†–∞—Å—Å—ã–ª–∫–∏ (7 –¥–Ω–µ–π):**
‚Ä¢ –†–∞—Å—Å—ã–ª–æ–∫: {broadcast_stats.get('total_broadcasts_period', 0)}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {broadcast_stats.get('total_messages_period', 0)}
‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {broadcast_stats.get('queue_size', 0)}

**‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {monitor_stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {monitor_stats.get('active_subscriptions', 0)}
‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ: {monitor_stats.get('expiring_soon', 0)}
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {monitor_stats.get('expired', 0)}
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if monitor_stats.get('monitoring_active') else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

**–°–∏—Å—Ç–µ–º—ã:**
‚Ä¢ Notification Manager: üü¢ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Broadcast System: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if broadcast_stats.get('processing_active') else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
‚Ä¢ Redis: üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"""
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="notif_stats")],
            [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º", callback_data="notif_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

def handle_subscriptions_monitor(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫"""
    query = update.callback_query
    query.answer()
    
    try:
        subscription_monitor = get_subscription_monitor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        expiring = subscription_monitor.get_expiring_subscriptions(7)
        stats = subscription_monitor.get_monitor_stats()
        
        text = f"""‚è∞ **–ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–î–ü–ò–°–û–ö**

**üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats.get('active_subscriptions', 0)}
‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π: {stats.get('expiring_soon', 0)}
‚Ä¢ –£–∂–µ –∏—Å—Ç–µ–∫—à–∏—Ö: {stats.get('expired', 0)}

**üö® –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:**"""
        
        if expiring:
            for sub in expiring[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                username = sub.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                days_left = sub.get('days_left', 0)
                plan = sub.get('subscription_plan', 'trial')
                
                if days_left == 0:
                    status = "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
                elif days_left == 1:
                    status = "üü° –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
                else:
                    status = f"‚è∞ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω."
                
                text += f"\n‚Ä¢ @{username} ({plan}) - {status}"
            
            if len(expiring) > 10:
                text += f"\n... –∏ –µ—â–µ {len(expiring) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        else:
            text += "\n‚úÖ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
        
        keyboard = [
            [
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_all_subscriptions"),
                InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="subscription_detailed_stats")
            ],
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="notif_subscriptions"),
                InlineKeyboardButton("üè† –ù–∞–∑–∞–¥", callback_data="notif_menu")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {str(e)}")

def handle_broadcast_history(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    query = update.callback_query
    query.answer()
    
    try:
        broadcast_system = get_broadcast_system()
        recent_broadcasts = broadcast_system.get_recent_broadcasts(10)
        
        text = "üìã **–ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö**\n\n"
        
        if recent_broadcasts:
            for broadcast in recent_broadcasts:
                title = broadcast.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                status = broadcast.get('status', 'unknown')
                created_at = broadcast.get('created_at', '')
                sent_count = broadcast.get('sent_count', 0)
                total_recipients = broadcast.get('total_recipients', 0)
                
                try:
                    created_date = datetime.fromisoformat(created_at).strftime('%d.%m %H:%M')
                except:
                    created_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                status_emoji = {
                    'pending': '‚è≥',
                    'in_progress': 'üîÑ',
                    'completed': '‚úÖ',
                    'failed': '‚ùå',
                    'cancelled': 'üö´'
                }.get(status, '‚ùì')
                
                delivery_info = ""
                if total_recipients > 0:
                    delivery_info = f" ({sent_count}/{total_recipients})"
                
                text += f"{status_emoji} **{title}**\n"
                text += f"   üìÖ {created_date}{delivery_info}\n\n"
        else:
            text += "üì≠ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞"
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="notif_history"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="notif_stats")
            ],
            [
                InlineKeyboardButton("üè† –ù–∞–∑–∞–¥", callback_data="notif_menu")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

def handle_check_all_subscriptions(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Ä—É—á–Ω—É—é"""
    query = update.callback_query
    query.answer("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
    
    try:
        subscription_monitor = get_subscription_monitor()
        subscription_monitor.check_all_subscriptions()
        
        query.edit_message_text(
            "‚úÖ **–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
            "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω—É–∂–¥–∞—é—â–∏–º—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã conversation
def cancel_conversation(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç conversation"""
    context.user_data.clear()
    return notifications_menu(update, context)

# Conversation handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
def get_broadcast_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç conversation handler –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
    
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_broadcast_start, pattern="notif_broadcast")],
        states={
            WAITING_BROADCAST_TITLE: [MessageHandler(Filters.text & ~Filters.command, handle_broadcast_title)],
            WAITING_BROADCAST_MESSAGE: [MessageHandler(Filters.text & ~Filters.command, handle_broadcast_message)],
            WAITING_BROADCAST_TYPE: [CallbackQueryHandler(handle_broadcast_type, pattern="broadcast_type_.*")],
        },
        fallbacks=[
            CallbackQueryHandler(cancel_conversation, pattern="notif_menu"),
            CommandHandler('cancel', cancel_conversation)
        ],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END,
        }
    ) 
"""
üîî Notification Handlers - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""

import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from utils.notification_manager import get_notification_manager, NotificationType, NotificationPriority
from utils.subscription_monitor import get_subscription_monitor
from utils.broadcast_system import get_broadcast_system, BroadcastType

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ωversation handler'–∞
(WAITING_BROADCAST_TITLE, WAITING_BROADCAST_MESSAGE, WAITING_BROADCAST_TYPE,
 WAITING_PERSONAL_USER, WAITING_PERSONAL_TITLE, WAITING_PERSONAL_MESSAGE,
 WAITING_SCHEDULE_TIME) = range(7)

def notifications_menu(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="notif_broadcast"),
                InlineKeyboardButton("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="notif_personal")
            ],
            [
                InlineKeyboardButton("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="notif_subscriptions"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notif_stats")
            ],
            [
                InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="notif_history"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notif_settings")
            ],
            [
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = """üîî **–°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

üì¢ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞** - –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º
üë§ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ** - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚è∞ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
üìã **–ò—Å—Ç–æ—Ä–∏—è** - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏** - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"""
        
        if update.callback_query:
            update.callback_query.answer()
            update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ notifications_menu: {e}")

def handle_broadcast_start(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    update.callback_query.answer()
    
    text = """üì¢ **–°–û–ó–î–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò**

–í–≤–µ–¥–∏—Ç–µ **–∑–∞–≥–æ–ª–æ–≤–æ–∫** —Ä–∞—Å—Å—ã–ª–∫–∏:

üí° –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã v2.0
‚Ä¢ üéâ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
‚Ä¢ ‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."""
    
    update.callback_query.edit_message_text(text, parse_mode='Markdown')
    
    return WAITING_BROADCAST_TITLE

def handle_broadcast_title(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    title = update.message.text.strip()
    
    if len(title) < 3:
        update.message.reply_text("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return WAITING_BROADCAST_TITLE
    
    if len(title) > 100:
        update.message.reply_text("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return WAITING_BROADCAST_TITLE
    
    context.user_data['broadcast_title'] = title
    
    text = f"""‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: **{title}**

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è**:

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ü–∏—à–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

üìù –ü—Ä–∏–º–µ—Ä:
–ü—Ä–∏–≤–µ—Ç! üéâ
–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞!
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥.
üëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏"
"""
    
    update.message.reply_text(text, parse_mode='Markdown')
    
    return WAITING_BROADCAST_MESSAGE

def handle_broadcast_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
    message = update.message.text.strip()
    
    if len(message) < 10:
        update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return WAITING_BROADCAST_MESSAGE
    
    if len(message) > 2000:
        update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return WAITING_BROADCAST_MESSAGE
    
    context.user_data['broadcast_message'] = message
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ä–∞—Å—Å—ã–ª–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_all"),
            InlineKeyboardButton("üÜì Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_trial")
        ],
        [
            InlineKeyboardButton("üíé Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_premium"),
            InlineKeyboardButton("üîì Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_free")
        ],
        [
            InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_type_active"),
            InlineKeyboardButton("‚è∞ –° –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="broadcast_type_expiring")
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="notif_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {context.user_data['broadcast_title']}
**–°–æ–æ–±—â–µ–Ω–∏–µ:** {message[:100]}{'...' if len(message) > 100 else ''}

–í—ã–±–µ—Ä–∏—Ç–µ **—Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π**:"""
    
    update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    return WAITING_BROADCAST_TYPE

def handle_broadcast_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    query.answer()
    
    type_mapping = {
        'broadcast_type_all': ('all', '–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'),
        'broadcast_type_trial': ('trial', 'Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'),
        'broadcast_type_premium': ('premium', 'Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'), 
        'broadcast_type_free': ('free', 'Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'),
        'broadcast_type_active': ('active', '–ê–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'),
        'broadcast_type_expiring': ('expiring', '–° –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π')
    }
    
    if query.data not in type_mapping:
        return notifications_menu(update, context)
    
    broadcast_type, type_name = type_mapping[query.data]
    context.user_data['broadcast_type'] = broadcast_type
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = [
        [
            InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="broadcast_send_now"),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="broadcast_schedule")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="notif_broadcast"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="notif_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    title = context.user_data['broadcast_title']
    message = context.user_data['broadcast_message']
    
    text = f"""üìã **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {title}
**–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:** {type_name}
**–°–æ–æ–±—â–µ–Ω–∏–µ:**
{message}

–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"""
    
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    return ConversationHandler.END

def handle_broadcast_send(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    query = update.callback_query
    query.answer()
    
    try:
        admin_id = update.effective_user.id
        title = context.user_data.get('broadcast_title', '')
        message = context.user_data.get('broadcast_message', '')
        broadcast_type = context.user_data.get('broadcast_type', 'all')
        
        broadcast_system = get_broadcast_system()
        
        if query.data == "broadcast_send_now":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–π—á–∞—Å
            broadcast_id = broadcast_system.broadcast_to_group(
                title=title,
                message=message,
                group=broadcast_type,
                admin_id=admin_id
            )
            
            text = f"""‚úÖ **–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê!**

üÜî ID —Ä–∞—Å—Å—ã–ª–∫–∏: `{broadcast_id}`
üìä –°—Ç–∞—Ç—É—Å: –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å

–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"."""
            
        else:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –ø–æ—Ç–æ–º
            text = """‚è∞ **–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò**

–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`

üí° –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ `2024-12-25 10:00` - 25 –¥–µ–∫–∞–±—Ä—è –≤ 10:00
‚Ä¢ `2024-12-20 18:30` - 20 –¥–µ–∫–∞–±—Ä—è –≤ 18:30

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:
‚Ä¢ `+1h` - —á–µ—Ä–µ–∑ 1 —á–∞—Å
‚Ä¢ `+30m` - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
‚Ä¢ `+1d` - —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å"""
            
            query.edit_message_text(text, parse_mode='Markdown')
            return WAITING_SCHEDULE_TIME
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('broadcast_title', None)
        context.user_data.pop('broadcast_message', None) 
        context.user_data.pop('broadcast_type', None)
        
        query.edit_message_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")

def handle_notifications_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    query = update.callback_query
    query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        notification_manager = get_notification_manager()
        broadcast_system = get_broadcast_system()
        subscription_monitor = get_subscription_monitor()
        
        notif_stats = notification_manager.get_stats(7)
        broadcast_stats = broadcast_system.get_broadcast_stats(7)
        monitor_stats = subscription_monitor.get_monitor_stats()
        
        text = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô**

**üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (7 –¥–Ω–µ–π):**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notif_stats.get('total_sent_period', 0)}
‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {notif_stats.get('pending_count', 0)}
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {notif_stats.get('scheduled_count', 0)}

**üì¢ –†–∞—Å—Å—ã–ª–∫–∏ (7 –¥–Ω–µ–π):**
‚Ä¢ –†–∞—Å—Å—ã–ª–æ–∫: {broadcast_stats.get('total_broadcasts_period', 0)}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {broadcast_stats.get('total_messages_period', 0)}
‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {broadcast_stats.get('queue_size', 0)}

**‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {monitor_stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {monitor_stats.get('active_subscriptions', 0)}
‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ: {monitor_stats.get('expiring_soon', 0)}
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {monitor_stats.get('expired', 0)}
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if monitor_stats.get('monitoring_active') else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

**–°–∏—Å—Ç–µ–º—ã:**
‚Ä¢ Notification Manager: üü¢ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Broadcast System: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if broadcast_stats.get('processing_active') else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
‚Ä¢ Redis: üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"""
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="notif_stats")],
            [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º", callback_data="notif_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

def handle_subscriptions_monitor(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫"""
    query = update.callback_query
    query.answer()
    
    try:
        subscription_monitor = get_subscription_monitor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        expiring = subscription_monitor.get_expiring_subscriptions(7)
        stats = subscription_monitor.get_monitor_stats()
        
        text = f"""‚è∞ **–ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–î–ü–ò–°–û–ö**

**üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats.get('active_subscriptions', 0)}
‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π: {stats.get('expiring_soon', 0)}
‚Ä¢ –£–∂–µ –∏—Å—Ç–µ–∫—à–∏—Ö: {stats.get('expired', 0)}

**üö® –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:**"""
        
        if expiring:
            for sub in expiring[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                username = sub.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                days_left = sub.get('days_left', 0)
                plan = sub.get('subscription_plan', 'trial')
                
                if days_left == 0:
                    status = "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
                elif days_left == 1:
                    status = "üü° –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
                else:
                    status = f"‚è∞ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω."
                
                text += f"\n‚Ä¢ @{username} ({plan}) - {status}"
            
            if len(expiring) > 10:
                text += f"\n... –∏ –µ—â–µ {len(expiring) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        else:
            text += "\n‚úÖ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
        
        keyboard = [
            [
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_all_subscriptions"),
                InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="subscription_detailed_stats")
            ],
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="notif_subscriptions"),
                InlineKeyboardButton("üè† –ù–∞–∑–∞–¥", callback_data="notif_menu")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {str(e)}")

def handle_broadcast_history(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    query = update.callback_query
    query.answer()
    
    try:
        broadcast_system = get_broadcast_system()
        recent_broadcasts = broadcast_system.get_recent_broadcasts(10)
        
        text = "üìã **–ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö**\n\n"
        
        if recent_broadcasts:
            for broadcast in recent_broadcasts:
                title = broadcast.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                status = broadcast.get('status', 'unknown')
                created_at = broadcast.get('created_at', '')
                sent_count = broadcast.get('sent_count', 0)
                total_recipients = broadcast.get('total_recipients', 0)
                
                try:
                    created_date = datetime.fromisoformat(created_at).strftime('%d.%m %H:%M')
                except:
                    created_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                status_emoji = {
                    'pending': '‚è≥',
                    'in_progress': 'üîÑ',
                    'completed': '‚úÖ',
                    'failed': '‚ùå',
                    'cancelled': 'üö´'
                }.get(status, '‚ùì')
                
                delivery_info = ""
                if total_recipients > 0:
                    delivery_info = f" ({sent_count}/{total_recipients})"
                
                text += f"{status_emoji} **{title}**\n"
                text += f"   üìÖ {created_date}{delivery_info}\n\n"
        else:
            text += "üì≠ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞"
        
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="notif_history"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="notif_stats")
            ],
            [
                InlineKeyboardButton("üè† –ù–∞–∑–∞–¥", callback_data="notif_menu")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

def handle_check_all_subscriptions(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Ä—É—á–Ω—É—é"""
    query = update.callback_query
    query.answer("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
    
    try:
        subscription_monitor = get_subscription_monitor()
        subscription_monitor.check_all_subscriptions()
        
        query.edit_message_text(
            "‚úÖ **–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
            "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω—É–∂–¥–∞—é—â–∏–º—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã conversation
def cancel_conversation(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç conversation"""
    context.user_data.clear()
    return notifications_menu(update, context)

# Conversation handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
def get_broadcast_conversation_handler():
    """–°–æ–∑–¥–∞–µ—Ç conversation handler –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
    
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_broadcast_start, pattern="notif_broadcast")],
        states={
            WAITING_BROADCAST_TITLE: [MessageHandler(Filters.text & ~Filters.command, handle_broadcast_title)],
            WAITING_BROADCAST_MESSAGE: [MessageHandler(Filters.text & ~Filters.command, handle_broadcast_message)],
            WAITING_BROADCAST_TYPE: [CallbackQueryHandler(handle_broadcast_type, pattern="broadcast_type_.*")],
        },
        fallbacks=[
            CallbackQueryHandler(cancel_conversation, pattern="notif_menu"),
            CommandHandler('cancel', cancel_conversation)
        ],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END,
        }
    ) 