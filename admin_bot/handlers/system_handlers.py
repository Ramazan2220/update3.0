from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from datetime import datetime
import psutil
import os
import sys
from typing import Dict

from ..config.admin_list import is_admin, has_permission, Permission
from ..middleware.admin_auth import admin_required, permission_required
from database.db_manager import get_total_accounts, get_session
from database.models import PublishTask, TaskStatus

@admin_required
@permission_required(Permission.VIEW_SYSTEM)
def system_menu(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    system_metrics = get_system_metrics()
    bot_status = get_bot_status()
    db_metrics = get_database_metrics()
    
    text = f"""‚öôÔ∏è **–°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì**

üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä:**
‚Ä¢ CPU: {system_metrics['cpu_percent']:.1f}%
‚Ä¢ RAM: {system_metrics['memory_percent']:.1f}% ({system_metrics['memory_used']:.1f}GB/{system_metrics['memory_total']:.1f}GB)
‚Ä¢ –î–∏—Å–∫: {system_metrics['disk_percent']:.1f}% ({system_metrics['disk_free']:.1f}GB —Å–≤–æ–±–æ–¥–Ω–æ)
‚Ä¢ Uptime: {system_metrics['uptime']}

ü§ñ **–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {bot_status['status']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {bot_status['connections']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {bot_status['last_activity']}

üóÑÔ∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {db_metrics['accounts']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {db_metrics['active_tasks']}
‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: {db_metrics['db_size']} MB
"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    status_emoji = "üü¢" if system_metrics['cpu_percent'] < 70 and system_metrics['memory_percent'] < 80 else "üü°" if system_metrics['cpu_percent'] < 90 else "üî¥"
    
    keyboard = [
        [InlineKeyboardButton(f"{status_emoji} –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="system_detailed")],
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏", callback_data="system_charts")],
        [InlineKeyboardButton("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏", callback_data="system_processes")],
        [InlineKeyboardButton("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_logs")],
        [InlineKeyboardButton("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="system_optimization")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_refresh")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required
@permission_required(Permission.VIEW_SYSTEM)
def system_detailed(update: Update, context: CallbackContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    detailed_metrics = get_detailed_system_metrics()
    
    text = f"""üîç **–î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê**

üíæ **–ü–∞–º—è—Ç—å:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {detailed_metrics['memory']['used']:.1f}GB
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {detailed_metrics['memory']['available']:.1f}GB
‚Ä¢ –ö—ç—à: {detailed_metrics['memory']['cached']:.1f}GB
‚Ä¢ –ë—É—Ñ–µ—Ä—ã: {detailed_metrics['memory']['buffers']:.1f}GB

üñ•Ô∏è **–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:**
‚Ä¢ –Ø–¥–µ—Ä: {detailed_metrics['cpu']['cores']}
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {detailed_metrics['cpu']['frequency']:.0f} MHz
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —è–¥—Ä–∞–º: {', '.join([f'{c:.1f}%' for c in detailed_metrics['cpu']['per_core']])}

üíø **–î–∏—Å–∫–∏:**"""
    
    for disk in detailed_metrics['disks']:
        text += f"\n‚Ä¢ {disk['device']}: {disk['used']:.1f}GB/{disk['total']:.1f}GB ({disk['percent']:.1f}%)"
    
    text += f"""

üåê **–°–µ—Ç—å:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {detailed_metrics['network']['bytes_sent']:.1f} MB
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {detailed_metrics['network']['bytes_recv']:.1f} MB
‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {detailed_metrics['network']['connections']}

üêç **Python:**
‚Ä¢ –í–µ—Ä—Å–∏—è: {detailed_metrics['python']['version']}
‚Ä¢ PID: {detailed_metrics['python']['pid']}
‚Ä¢ –ü–æ—Ç–æ–∫–æ–≤: {detailed_metrics['python']['threads']}
"""
    
    keyboard = [
        [InlineKeyboardButton("üîß –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="system_clear_cache")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="system_clear_logs")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="system")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required
@permission_required(Permission.VIEW_SYSTEM)
def system_processes(update: Update, context: CallbackContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""
    query = update.callback_query
    
    processes = get_bot_processes()
    
    text = "üîÑ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–ê–ú–ò**\n\n"
    
    for process in processes:
        status_emoji = "üü¢" if process['status'] == 'running' else "üî¥" if process['status'] == 'stopped' else "üü°"
        text += f"{status_emoji} **{process['name']}**\n"
        text += f"   PID: {process['pid']}\n"
        text += f"   CPU: {process['cpu']:.1f}%\n"
        text += f"   RAM: {process['memory']:.1f} MB\n"
        text += f"   Uptime: {process['uptime']}\n\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞", callback_data="system_restart_bot")],
        [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏", callback_data="system_stop_tasks")],
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏", callback_data="system_start_tasks")],
        [InlineKeyboardButton("üßπ –£–±–∏—Ç—å –∑–∞–≤–∏—Å—à–∏–µ", callback_data="system_kill_stuck")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="system")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required
@permission_required(Permission.MANAGE_SYSTEM)
def system_optimization(update: Update, context: CallbackContext):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    
    optimization_status = perform_system_optimization()
    
    text = f"""‚ö° **–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´**

‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {optimization_status['temp_cleaned']} MB
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: {optimization_status['logs_cleaned']} MB
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î: {optimization_status['db_optimized']}
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: {optimization_status['cache_cleared']} MB

üìà **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {optimization_status['total_freed']} MB
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {optimization_status['performance_gain']}%
"""
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ì–ª—É–±–æ–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="system_deep_optimization")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="system")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_system_metrics() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    # Uptime
    boot_time = datetime.fromtimestamp(psutil.boot_time())
    uptime = datetime.now() - boot_time
    uptime_str = f"{uptime.days}–¥ {uptime.seconds//3600}—á {(uptime.seconds//60)%60}–º"
    
    return {
        'cpu_percent': psutil.cpu_percent(interval=1),
        'memory_percent': memory.percent,
        'memory_used': memory.used / (1024**3),  # GB
        'memory_total': memory.total / (1024**3),  # GB
        'disk_percent': psutil.disk_usage('/').percent,
        'disk_free': psutil.disk_usage('/').free / (1024**3),  # GB
        'uptime': uptime_str
    }

def get_bot_status() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    return {
        'status': 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω',
        'connections': 1,  # –ó–∞–≥–ª—É—à–∫–∞
        'last_activity': '—Ç–æ–ª—å–∫–æ —á—Ç–æ'
    }

def get_database_metrics() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        total_accounts = get_total_accounts()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        session = get_session()
        active_tasks = session.query(PublishTask).filter(
            PublishTask.status.in_([TaskStatus.PENDING, TaskStatus.PROCESSING])
        ).count()
        session.close()
        
        # –†–∞–∑–º–µ—Ä –ë–î (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        db_size = 0
        try:
            if os.path.exists('data/database.sqlite'):
                db_size = os.path.getsize('data/database.sqlite') / (1024**2)  # MB
        except:
            pass
        
        return {
            'accounts': total_accounts,
            'active_tasks': active_tasks,
            'db_size': f"{db_size:.1f}"
        }
    except Exception as e:
        return {
            'accounts': 0,
            'active_tasks': 0,
            'db_size': "N/A"
        }

def get_detailed_system_metrics() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    memory = psutil.virtual_memory()
    cpu_freq = psutil.cpu_freq()
    
    # –î–∏—Å–∫–∏
    disks = []
    for partition in psutil.disk_partitions():
        try:
            usage = psutil.disk_usage(partition.mountpoint)
            disks.append({
                'device': partition.device,
                'used': usage.used / (1024**3),
                'total': usage.total / (1024**3),
                'percent': (usage.used / usage.total) * 100
            })
        except:
            continue
    
    # –°–µ—Ç—å
    net_io = psutil.net_io_counters()
    
    return {
        'memory': {
            'used': memory.used / (1024**3),
            'available': memory.available / (1024**3),
            'cached': getattr(memory, 'cached', 0) / (1024**3),
            'buffers': getattr(memory, 'buffers', 0) / (1024**3)
        },
        'cpu': {
            'cores': psutil.cpu_count(),
            'frequency': cpu_freq.current if cpu_freq else 0,
            'per_core': psutil.cpu_percent(percpu=True, interval=1)
        },
        'disks': disks,
        'network': {
            'bytes_sent': net_io.bytes_sent / (1024**2),
            'bytes_recv': net_io.bytes_recv / (1024**2),
            'connections': len(psutil.net_connections())
        },
        'python': {
            'version': sys.version.split()[0],
            'pid': os.getpid(),
            'threads': len(psutil.Process().threads())
        }
    }

def get_bot_processes() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –±–æ—Ç–∞"""
    current_process = psutil.Process()
    
    return [{
        'name': 'Admin Bot',
        'pid': current_process.pid,
        'status': 'running',
        'cpu': current_process.cpu_percent(),
        'memory': current_process.memory_info().rss / (1024**2),  # MB
        'uptime': str(datetime.now() - datetime.fromtimestamp(current_process.create_time())).split('.')[0]
    }]

def perform_system_optimization() -> Dict:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    return {
        'temp_cleaned': 45.2,
        'logs_cleaned': 12.8,
        'db_optimized': True,
        'cache_cleared': 23.1,
        'total_freed': 81.1,
        'performance_gain': 15
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def get_system_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        'system': system_menu,
        'system_detailed': system_detailed,
        'system_processes': system_processes,
        'system_optimization': system_optimization,
        'system_refresh': system_menu,  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    } 