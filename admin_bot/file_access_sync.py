#!/usr/bin/env python3
"""
–§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–û–°–¢–£–ü–ê
–ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –∞–¥–º–∏–Ω –±–æ—Ç–æ–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
"""

import json
import time
import threading
import os
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, Optional
import logging

logger = logging.getLogger(__name__)

class FileAccessSync:
    def __init__(self, sync_file='data/sync_access.json'):
        self.sync_file = Path(sync_file)
        self.sync_file.parent.mkdir(exist_ok=True)
        self._lock = threading.Lock()
        self._local_cache = {}
        self._last_check = 0
        self.CHECK_INTERVAL = 1  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not self.sync_file.exists():
            self._save_to_file({})
            
        print("üü¢ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _load_from_file(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.sync_file, 'r') as f:
                data = json.load(f)
                return data.get('users', {})
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
    
    def _save_to_file(self, users: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'users': users,
                'last_update': time.time(),
                'updated_by': os.getpid()
            }
            
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å
            temp_file = self.sync_file.with_suffix('.tmp')
            with open(temp_file, 'w') as f:
                json.dump(data, f, indent=2)
            temp_file.replace(self.sync_file)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")
    
    def _refresh_cache(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –∏–∑ —Ñ–∞–π–ª–∞"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        if current_time - self._last_check < self.CHECK_INTERVAL:
            return
            
        with self._lock:
            try:
                file_users = self._load_from_file()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                if file_users != self._local_cache:
                    self._local_cache = file_users.copy()
                    logger.info(f"üîÑ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self._local_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                self._last_check = current_time
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    
    def add_user(self, user_id: int, user_data: dict = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self._lock:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                users = self._load_from_file()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data is None:
                    user_data = {
                        'telegram_id': user_id,
                        'is_active': True,
                        'subscription_end': (datetime.now() + timedelta(days=30)).isoformat(),
                        'role': 'trial',
                        'added_at': datetime.now().isoformat()
                    }
                
                users[str(user_id)] = user_data
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                self._save_to_file(users)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                self._local_cache = users.copy()
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def remove_user(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self._lock:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                users = self._load_from_file()
                
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_key = str(user_id)
                if user_key in users:
                    del users[user_key]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                    self._save_to_file(users)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                    self._local_cache = users.copy()
                    
                    logger.info(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def has_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        self._refresh_cache()
        
        user_key = str(user_id)
        if user_key not in self._local_cache:
            return False
        
        user_data = self._local_cache[user_key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if not user_data.get('is_active', False):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_end = user_data.get('subscription_end')
        if subscription_end:
            try:
                end_date = datetime.fromisoformat(subscription_end)
                if datetime.now() > end_date:
                    return False
            except ValueError:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
        
        return True
    
    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self._refresh_cache()
        
        total_users = len(self._local_cache)
        active_users = sum(1 for user in self._local_cache.values() 
                          if user.get('is_active', False))
        
        return {
            'total_users': total_users,
            'active_users': active_users,
            'sync_file': str(self.sync_file),
            'last_check': self._last_check,
            'cache_size': len(self._local_cache)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_file_sync = None

def get_file_sync():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä"""
    global _file_sync
    if _file_sync is None:
        _file_sync = FileAccessSync()
    return _file_sync

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def has_access_file(user_id: int) -> bool:
    return get_file_sync().has_access(user_id)

def add_user_file(user_id: int, user_data: dict = None) -> bool:
    return get_file_sync().add_user(user_id, user_data)

def remove_user_file(user_id: int) -> bool:
    return get_file_sync().remove_user(user_id)

def get_sync_stats() -> Dict:
    return get_file_sync().get_stats() 