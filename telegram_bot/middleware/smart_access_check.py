#!/usr/bin/env python3
"""
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
"""

import logging
import time
import threading
from typing import Set, Dict
from telegram import Update
from telegram.ext import CallbackContext
from utils.access_manager import has_access
from database.user_context_manager import UserContextManager

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ python-telegram-bot
try:
    from telegram.ext import ApplicationHandlerStop
except ImportError:
    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π, –≥–¥–µ ApplicationHandlerStop –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞–ø—Ä—è–º—É—é –¥–æ—Å—Ç—É–ø–µ–Ω
    class ApplicationHandlerStop(Exception):
        pass

logger = logging.getLogger(__name__)

class SmartAccessManager:
    """–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
    
    def __init__(self, cache_ttl: int = 300):  # 5 –º–∏–Ω—É—Ç –∫–µ—à
        self.blocked_users: Set[int] = set()  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.verified_users: Dict[int, float] = {}  # {user_id: timestamp_last_check}
        self.cache_ttl = cache_ttl  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_cleanup = time.time()
        self.cleanup_interval = 300  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
        self._start_background_cleanup()
        
        logger.info(f"üß† SmartAccessManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (TTL: {cache_ttl}s)")
    
    def _start_background_cleanup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞"""
        def cleanup_worker():
            while True:
                try:
                    time.sleep(self.cleanup_interval)
                    self._cleanup_cache()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
        
        cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True)
        cleanup_thread.start()
        logger.info("üßπ –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def _cleanup_cache(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à"""
        current_time = time.time()
        expired_users = []
        
        for user_id, last_check in self.verified_users.items():
            if current_time - last_check > self.cache_ttl:
                expired_users.append(user_id)
        
        for user_id in expired_users:
            del self.verified_users[user_id]
        
        if expired_users:
            logger.debug(f"üßπ –û—á–∏—â–µ–Ω –∫–µ—à –¥–ª—è {len(expired_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    def check_access_fast(self, user_id: int) -> bool:
        """
        –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        True = –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, False = –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        current_time = time.time()
        
        # 1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if user_id in self.blocked_users:
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if user_id in self.verified_users:
            last_check = self.verified_users[user_id]
            if current_time - last_check < self.cache_ttl:
                return True  # –ö–µ—à –∞–∫—Ç—É–∞–ª–µ–Ω
        
        # 3. –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–µ—à —É—Å—Ç–∞—Ä–µ–ª)
        try:
            access_granted = has_access(user_id)
            
            if access_granted:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                self.verified_users[user_id] = current_time
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –±—ã–ª)
                self.blocked_users.discard(user_id)
                return True
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                self.blocked_users.add(user_id)
                # –£–¥–∞–ª—è–µ–º –∏–∑ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                self.verified_users.pop(user_id, None)
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}: {e}")
            return False
    
    def force_block_user(self, user_id: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥)"""
        self.blocked_users.add(user_id)
        self.verified_users.pop(user_id, None)
        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    def force_unblock_user(self, user_id: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥)"""
        self.blocked_users.discard(user_id)
        self.verified_users[user_id] = time.time()
        logger.info(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    def get_cache_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        return {
            'blocked_users': len(self.blocked_users),
            'verified_users': len(self.verified_users),
            'cache_ttl': self.cache_ttl,
            'last_cleanup': self.last_cleanup
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
smart_access = SmartAccessManager()

def send_access_denied_message(update: Update, context: CallbackContext, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ"""
    try:
        message = """üö´ **–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù**

‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
üîë –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞

üë®‚Äçüíº **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
üìß Email: support@yourbot.com
üí¨ Telegram: @admin

‚ö†Ô∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."""

        if update.message:
            update.message.reply_text(message, parse_mode='Markdown')
        elif update.callback_query:
            update.callback_query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            if update.callback_query.message:
                update.callback_query.message.reply_text(message, parse_mode='Markdown')
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")

def check_user_access_smart(update: Update, context: CallbackContext) -> bool:
    """
    –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    """
    if not update.effective_user:
        return False
    
    user_id = update.effective_user.id
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    access_granted = smart_access.check_access_fast(user_id)
    
    if not access_granted:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        send_access_denied_message(update, context, user_id)
        logger.warning(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False
    
    return True

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
def force_block_user(user_id: int):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    smart_access.force_block_user(user_id)

def force_unblock_user(user_id: int):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    smart_access.force_unblock_user(user_id) 

def send_access_denied_message(self, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"""
    try:
        from telegram_bot.bot import get_bot
        bot = get_bot()
        if bot:
            bot.send_message(
                chat_id=user_id,
                text="üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ: {e}")

def middleware_access_check(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ middleware"""
    def wrapper(update, context):
        user_id = update.effective_user.id if update.effective_user else None
        
        if user_id and not check_user_access_smart(update, context):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            logger.info(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω middleware –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
        
        return func(update, context)
    return wrapper

def force_disconnect_user(user_id: int):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)"""
    try:
        from telegram_bot.bot import get_bot
        bot = get_bot()
        if bot:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            bot.send_message(
                chat_id=user_id,
                text="üö´ –í–ù–ò–ú–ê–ù–ò–ï!\n\n–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.",
                parse_mode='Markdown'
            )
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –≤ –∫–µ—à–µ
            force_block_user(user_id)
            
            logger.info(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def disconnect_user_immediately(user_id: int):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return force_disconnect_user(user_id) 

def universal_access_middleware(update: Update, context: CallbackContext):
    """
    üõ°Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô MIDDLEWARE –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê
    
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:
    - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    - Callback queries (–∫–Ω–æ–ø–∫–∏)
    - –ö–æ–º–∞–Ω–¥—ã
    - –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–ï–ó –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å–∞–º–æ–º —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        user_id = None
        if update.effective_user:
            user_id = update.effective_user.id
        elif update.message and update.message.from_user:
            user_id = update.message.from_user.id
        elif update.callback_query and update.callback_query.from_user:
            user_id = update.callback_query.from_user.id
        
        if not user_id:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # üîí –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –î–õ–Ø –ò–ó–û–õ–Ø–¶–ò–ò –î–ê–ù–ù–´–•
        UserContextManager.set_current_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        access_manager = SmartAccessManager()
        has_access = access_manager.check_access_fast(user_id)
        
        if not has_access:
            logger.warning(f"üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
            access_manager.send_access_denied_message(user_id)
            
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return
        
        logger.debug(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ universal_access_middleware: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ middleware –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å 