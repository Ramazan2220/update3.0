#!/usr/bin/env python3
"""
Middleware –¥–ª—è Telegram –±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–∞
"""

import logging
from functools import wraps
from telegram import Update
from telegram.ext import CallbackContext
from utils.access_manager import has_access

logger = logging.getLogger(__name__)

def subscription_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        if not has_access(user_id):
            update.message.reply_text(
                "üö´ **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                "üîë –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞",
                parse_mode='Markdown'
            )
            return
        
        return func(update, context, *args, **kwargs)
    
    return wrapper

def trial_allowed(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ trial —Ä–µ–∂–∏–º–µ
    """
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        # Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–∂–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ has_access
        if not has_access(user_id):
            update.message.reply_text(
                "üö´ **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\n"
                "üéØ –ü–æ–ª—É—á–∏—Ç–µ trial –∏–ª–∏ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                parse_mode='Markdown'
            )
            return
        
        return func(update, context, *args, **kwargs)
    
    return wrapper

def premium_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è premium —Ñ—É–Ω–∫—Ü–∏–π
    """
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        if not has_access(user_id):
            update.message.reply_text(
                "üíé **Premium —Ñ—É–Ω–∫—Ü–∏—è**\n\n"
                "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                "üîë –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Premium –¥–æ—Å—Ç—É–ø–∞",
                parse_mode='Markdown'
            )
            return
        
        return func(update, context, *args, **kwargs)
    
    return wrapper

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ middleware
try:
    from .smart_access_check import check_user_access_smart, smart_access
    __all__ = ['subscription_required', 'trial_allowed', 'premium_only', 'check_user_access_smart', 'smart_access']
except ImportError:
    logger.warning("Smart access check middleware –Ω–µ –Ω–∞–π–¥–µ–Ω")
    __all__ = ['subscription_required', 'trial_allowed', 'premium_only']

"""
Middleware –¥–ª—è Telegram –±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–∞
"""

import logging
from functools import wraps
from telegram import Update
from telegram.ext import CallbackContext
from utils.access_manager import has_access

logger = logging.getLogger(__name__)

def subscription_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        if not has_access(user_id):
            update.message.reply_text(
                "üö´ **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                "üîë –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞",
                parse_mode='Markdown'
            )
            return
        
        return func(update, context, *args, **kwargs)
    
    return wrapper

def trial_allowed(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ trial —Ä–µ–∂–∏–º–µ
    """
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        # Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–∂–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ has_access
        if not has_access(user_id):
            update.message.reply_text(
                "üö´ **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\n"
                "üéØ –ü–æ–ª—É—á–∏—Ç–µ trial –∏–ª–∏ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                parse_mode='Markdown'
            )
            return
        
        return func(update, context, *args, **kwargs)
    
    return wrapper

def premium_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è premium —Ñ—É–Ω–∫—Ü–∏–π
    """
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        if not has_access(user_id):
            update.message.reply_text(
                "üíé **Premium —Ñ—É–Ω–∫—Ü–∏—è**\n\n"
                "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                "üîë –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Premium –¥–æ—Å—Ç—É–ø–∞",
                parse_mode='Markdown'
            )
            return
        
        return func(update, context, *args, **kwargs)
    
    return wrapper

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ middleware
try:
    from .smart_access_check import check_user_access_smart, smart_access
    __all__ = ['subscription_required', 'trial_allowed', 'premium_only', 'check_user_access_smart', 'smart_access']
except ImportError:
    logger.warning("Smart access check middleware –Ω–µ –Ω–∞–π–¥–µ–Ω")
    __all__ = ['subscription_required', 'trial_allowed', 'premium_only']


