#!/usr/bin/env python3
"""
Middleware –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
"""

import logging
from telegram import Update
from telegram.ext import CallbackContext
from utils.access_manager import has_access

logger = logging.getLogger(__name__)

class AccessCheckMiddleware:
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
    
    def __init__(self):
        self.blocked_users = set()  # –ö–µ—à –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("üõ°Ô∏è AccessCheckMiddleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def check_access(self, update: Update, context: CallbackContext) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω
        """
        if not update.effective_user:
            return False
        
        user_id = update.effective_user.id
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if user_id in self.blocked_users:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Redis
        access_granted = has_access(user_id)
        
        if not access_granted:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            self.blocked_users.add(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            self._send_access_denied_message(update, context, user_id)
            
            logger.warning(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        else:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –±—ã–ª)
            self.blocked_users.discard(user_id)
            return True
    
    def _send_access_denied_message(self, update: Update, context: CallbackContext, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ"""
        try:
            message = """üö´ **–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù**

‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
üîë –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞

üë®‚Äçüíº **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
üìß Email: support@yourbot.com
üí¨ Telegram: @admin

‚ö†Ô∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."""

            if update.message:
                update.message.reply_text(message, parse_mode='Markdown')
            elif update.callback_query:
                update.callback_query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                if update.callback_query.message:
                    update.callback_query.message.reply_text(message, parse_mode='Markdown')
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä middleware
access_middleware = AccessCheckMiddleware()

def access_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    """
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        if access_middleware.check_access(update, context):
            return func(update, context, *args, **kwargs)
        else:
            # –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            return
    
    return wrapper

def check_user_access(update: Update, context: CallbackContext) -> bool:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    return access_middleware.check_access(update, context) 
"""
Middleware –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
"""

import logging
from telegram import Update
from telegram.ext import CallbackContext
from utils.access_manager import has_access

logger = logging.getLogger(__name__)

class AccessCheckMiddleware:
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
    
    def __init__(self):
        self.blocked_users = set()  # –ö–µ—à –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("üõ°Ô∏è AccessCheckMiddleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def check_access(self, update: Update, context: CallbackContext) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω
        """
        if not update.effective_user:
            return False
        
        user_id = update.effective_user.id
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if user_id in self.blocked_users:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Redis
        access_granted = has_access(user_id)
        
        if not access_granted:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            self.blocked_users.add(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            self._send_access_denied_message(update, context, user_id)
            
            logger.warning(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        else:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –±—ã–ª)
            self.blocked_users.discard(user_id)
            return True
    
    def _send_access_denied_message(self, update: Update, context: CallbackContext, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ"""
        try:
            message = """üö´ **–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù**

‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
üîë –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞

üë®‚Äçüíº **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
üìß Email: support@yourbot.com
üí¨ Telegram: @admin

‚ö†Ô∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."""

            if update.message:
                update.message.reply_text(message, parse_mode='Markdown')
            elif update.callback_query:
                update.callback_query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                if update.callback_query.message:
                    update.callback_query.message.reply_text(message, parse_mode='Markdown')
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä middleware
access_middleware = AccessCheckMiddleware()

def access_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    """
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        if access_middleware.check_access(update, context):
            return func(update, context, *args, **kwargs)
        else:
            # –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            return
    
    return wrapper

def check_user_access(update: Update, context: CallbackContext) -> bool:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    return access_middleware.check_access(update, context) 