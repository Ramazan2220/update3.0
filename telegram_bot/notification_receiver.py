#!/usr/bin/env python3
"""
üì® Notification Receiver - –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
–°–ª—É—à–∞–µ—Ç Redis –∫–∞–Ω–∞–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import logging
import json
import asyncio
import threading
from datetime import datetime
from typing import Dict, Any

from telegram import Bot, ParseMode
from telegram.error import TelegramError

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.notification_manager import get_notification_manager, NotificationType
from utils.access_manager import has_access

logger = logging.getLogger(__name__)

class TelegramNotificationReceiver:
    """–ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token)
        self.notification_manager = get_notification_manager()
        self._running = False
        self._receiver_thread = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        self._setup_handlers()
        
        logger.info("üì® TelegramNotificationReceiver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        channels = self.notification_manager.CHANNELS
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
        self.notification_manager.register_handler(
            channels['admin_actions'], 
            self._handle_admin_actions
        )
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Redis access —Å–æ–±—ã—Ç–∏–π
        self.notification_manager.register_handler(
            'access:user_added', 
            self._handle_access_added
        )
        self.notification_manager.register_handler(
            'access:user_removed', 
            self._handle_access_removed
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∏
        self.notification_manager.register_handler(
            channels['subscription'], 
            self._handle_subscription_notifications
        )
        
        # –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        self.notification_manager.register_handler(
            channels['broadcast'], 
            self._handle_broadcast_notifications
        )
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notification_manager.register_handler(
            channels['personal'], 
            self._handle_personal_notifications
        )
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notification_manager.register_handler(
            channels['system'], 
            self._handle_system_notifications
        )
        
        logger.info("üìù –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def start_receiving(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self._running:
            logger.warning("Receiver —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self._running = True
        self._receiver_thread = threading.Thread(target=self._run_receiver, daemon=True)
        self._receiver_thread.start()
        
        logger.info("üîÑ Notification receiver –∑–∞–ø—É—â–µ–Ω")
    
    def stop_receiving(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self._running = False
        if self._receiver_thread:
            self._receiver_thread.join(timeout=5)
        
        logger.info("üõë Notification receiver –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _run_receiver(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # Notification manager —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
            while self._running:
                threading.Event().wait(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ notification receiver: {e}")
    
    def _handle_admin_actions(self, notification_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)"""
        try:
            notification_type = notification_data.get('type')
            user_id = notification_data.get('user_id')
            title = notification_data.get('title', '')
            message = notification_data.get('message', '')
            
            if not user_id:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ user_id")
                return
            
            if notification_type == 'admin_block':
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º
                self._send_notification_to_user(user_id, title, message, urgent=True)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –≤ smart cache
                try:
                    from telegram_bot.middleware.smart_access_check import force_block_user
                    force_block_user(user_id)
                    logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                except ImportError:
                    logger.warning("Smart access check –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                
            elif notification_type == 'admin_unblock':
                # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
                self._send_notification_to_user(user_id, title, message, urgent=True)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤ smart cache
                try:
                    from telegram_bot.middleware.smart_access_check import force_unblock_user
                    force_unblock_user(user_id)
                    logger.info(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                except ImportError:
                    logger.warning("Smart access check –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
            self.notification_manager.mark_notification_delivered(
                notification_data.get('id', ''), user_id
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
    
    def _handle_access_added(self, notification_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"""
        try:
            user_id = notification_data.get('user_id')
            username = notification_data.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            if not user_id:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ user_id")
                return
            
            logger.info(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É–º–Ω—ã–π –∫–µ—à –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                from telegram_bot.middleware.smart_access_check import force_unblock_user
                force_unblock_user(user_id)
                logger.info(f"üß† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —É–º–Ω–æ–º –∫–µ—à–µ")
            except ImportError:
                logger.warning("Smart access check –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    def _handle_access_removed(self, notification_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"""
        try:
            user_id = notification_data.get('user_id')
            username = notification_data.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            logger.info(f"üî• –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï –£–î–ê–õ–ï–ù–ò–Ø: {notification_data}")
            
            if not user_id:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ user_id")
                return
            
            logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –ª–∏—à–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            try:
                self._send_block_trigger_message(user_id)
                logger.info(f"üì® –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É–º–Ω—ã–π –∫–µ—à –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            try:
                from telegram_bot.middleware.smart_access_check import force_block_user
                force_block_user(user_id)
                logger.info(f"üß† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —É–º–Ω–æ–º –∫–µ—à–µ")
                
            except ImportError:
                logger.warning("Smart access check –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    def _send_block_trigger_message(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            # –¢–†–ò–ì–ì–ï–†–ù–´–ô –¢–ï–ö–°–¢ - –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨!
            trigger_message = "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            try:
                self.bot.send_message(
                    chat_id=user_id,
                    text=trigger_message
                )
                logger.info(f"üì§ –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as send_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ bot.send_message: {send_error}")
                
                # Fallback: –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ requests
                try:
                    import requests
                    import os
                    
                    token = os.getenv('TELEGRAM_TOKEN', 'UNDEFINED')
                    url = f"https://api.telegram.org/bot{token}/sendMessage"
                    data = {
                        'chat_id': user_id,
                        'text': trigger_message
                    }
                    
                    response = requests.post(url, data=data, timeout=10)
                    if response.status_code == 200:
                        logger.info(f"üì§ –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ requests –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ requests: {response.status_code}")
                        
                except Exception as fallback_error:
                    logger.error(f"–û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏: {fallback_error}")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _handle_subscription_notifications(self, notification_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
        try:
            user_id = notification_data.get('user_id')
            title = notification_data.get('title', '')
            message = notification_data.get('message', '')
            
            if not user_id:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –±–µ–∑ user_id")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
            if has_access(user_id):
                self._send_notification_to_user(user_id, title, message, urgent=True)
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
                self.notification_manager.mark_notification_delivered(
                    notification_data.get('id', ''), user_id
                )
            else:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
    
    def _handle_broadcast_notifications(self, notification_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            title = notification_data.get('title', '')
            message = notification_data.get('message', '')
            broadcast_type = notification_data.get('data', {}).get('broadcast_type', 'all')
            target_group = notification_data.get('user_group')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipients = self._get_broadcast_recipients(broadcast_type, target_group)
            
            logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É '{title}' –¥–ª—è {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            sent_count = 0
            for user_id in recipients:
                try:
                    if self._send_notification_to_user(user_id, title, message):
                        sent_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{len(recipients)} —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    def _handle_personal_notifications(self, notification_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            user_id = notification_data.get('user_id')
            title = notification_data.get('title', '')
            message = notification_data.get('message', '')
            priority = notification_data.get('priority', 'normal')
            
            if not user_id:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ user_id")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
            if has_access(user_id):
                urgent = priority in ['critical', 'high']
                self._send_notification_to_user(user_id, title, message, urgent=urgent)
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
                self.notification_manager.mark_notification_delivered(
                    notification_data.get('id', ''), user_id
                )
            else:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _handle_system_notifications(self, notification_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            title = notification_data.get('title', '')
            message = notification_data.get('message', '')
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            recipients = self._get_all_active_users()
            
            logger.info(f"üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{title}' –¥–ª—è {len(recipients)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            sent_count = 0
            for user_id in recipients:
                try:
                    if self._send_notification_to_user(user_id, title, message, urgent=True):
                        sent_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(recipients)} —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _send_notification_to_user(self, user_id: int, title: str, message: str, urgent: bool = False) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if urgent:
                formatted_message = f"üö® **{title}**\n\n{message}"
            else:
                formatted_message = f"üîî **{title}**\n\n{message}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram API
            self.bot.send_message(
                chat_id=user_id,
                text=formatted_message,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
            
            logger.debug(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {title}")
            return True
            
        except TelegramError as e:
            if "blocked by the user" in str(e) or "user not found" in str(e):
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                logger.error(f"Telegram –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    def _get_broadcast_recipients(self, broadcast_type: str, target_group: str = None) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            if broadcast_type == 'specific' and target_group:
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                return self._get_users_by_group(target_group)
            else:
                # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                return self._get_all_active_users()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return []
    
    def _get_all_active_users(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            import sys
            import os
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'admin_bot'))
            
            from admin_bot.services.user_service import UserService
            
            user_service = UserService()
            users = user_service.get_all_users()
            
            active_users = []
            for user in users:
                if user.is_active and has_access(user.telegram_id):
                    active_users.append(user.telegram_id)
            
            return active_users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _get_users_by_group(self, group: str) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        try:
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ _get_all_active_users, –Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≥—Ä—É–ø–ø–µ
            import sys
            import os
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'admin_bot'))
            
            from admin_bot.services.user_service import UserService
            
            user_service = UserService()
            users = user_service.get_all_users()
            
            group_users = []
            for user in users:
                if (user.is_active and has_access(user.telegram_id) and
                    self._user_matches_group(user, group)):
                    group_users.append(user.telegram_id)
            
            return group_users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã {group}: {e}")
            return []
    
    def _user_matches_group(self, user, group: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø–µ"""
        try:
            plan = user.subscription_plan.value if user.subscription_plan else 'trial'
            
            if group == 'trial':
                return 'trial' in plan.lower()
            elif group == 'premium':
                return 'premium' in plan.lower()
            elif group == 'free':
                return 'free' in plan.lower()
            elif group == 'active':
                return user.is_active
            elif group == 'expiring':
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                if user.subscription_end:
                    try:
                        from datetime import datetime
                        if isinstance(user.subscription_end, str):
                            subscription_end = datetime.fromisoformat(user.subscription_end.replace('Z', '+00:00'))
                        else:
                            subscription_end = user.subscription_end
                        
                        days_left = (subscription_end - datetime.now()).days
                        return 0 <= days_left <= 7
                    except:
                        pass
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_notification_receiver = None

def get_notification_receiver(bot_token: str = None) -> TelegramNotificationReceiver:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä notification receiver"""
    global _notification_receiver
    if _notification_receiver is None and bot_token:
        _notification_receiver = TelegramNotificationReceiver(bot_token)
        _notification_receiver.start_receiving()
    return _notification_receiver

def start_notification_receiver(bot_token: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç notification receiver"""
    receiver = get_notification_receiver(bot_token)
    return receiver

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞)
    import os
    
    bot_token = os.getenv('TELEGRAM_TOKEN')
    if bot_token:
        receiver = start_notification_receiver(bot_token)
        print("‚úÖ Notification Receiver –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        import time
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            receiver.stop_receiving()
            print("üõë Notification Receiver –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω") 