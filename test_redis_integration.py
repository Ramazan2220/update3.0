#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Redis —Å access_manager
"""

import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_integration():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò REDIS –° ACCESS_MANAGER")
    print("=" * 80)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º access_manager
    try:
        from utils.access_manager import has_access, add_user_access, remove_user_access, delete_user_completely, force_sync_access
        print("‚úÖ –ò–º–ø–æ—Ä—Ç access_manager —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    test_user_id = 99999
    
    print(f"\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    initial_access = has_access(test_user_id)
    print(f"   has_access({test_user_id}): {initial_access}")
    
    print(f"\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    add_result = add_user_access(test_user_id)
    print(f"   add_user_access({test_user_id}): {add_result}")
    
    print(f"\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    access_after_add = has_access(test_user_id)
    print(f"   has_access({test_user_id}): {access_after_add}")
    
    print(f"\n4Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    remove_result = remove_user_access(test_user_id)
    print(f"   remove_user_access({test_user_id}): {remove_result}")
    
    print(f"\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:")
    access_after_remove = has_access(test_user_id)
    print(f"   has_access({test_user_id}): {access_after_remove}")
    
    print(f"\n6Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:")
    sync_result = force_sync_access()
    print(f"   force_sync_access(): {sync_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success = (
        initial_access == False and
        add_result == True and
        access_after_add == True and
        remove_result == True and
        access_after_remove == False and
        sync_result == True
    )
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ù–ï –ü–†–û–®–õ–ò!")
        print(f"   –î–µ—Ç–∞–ª–∏: initial={initial_access}, add={add_result}, after_add={access_after_add}")
        print(f"           remove={remove_result}, after_remove={access_after_remove}, sync={sync_result}")
        return False

def test_multiple_users():
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï–°–ö–û–õ–¨–ö–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 80)
    
    from utils.access_manager import has_access, add_user_access, remove_user_access
    
    users = [11111, 22222, 33333]
    
    print(f"üìä –î–æ–±–∞–≤–ª—è–µ–º {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for user_id in users:
        result = add_user_access(user_id)
        print(f"   add_user_access({user_id}): {result}")
    
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    all_have_access = True
    for user_id in users:
        access = has_access(user_id)
        print(f"   has_access({user_id}): {access}")
        if not access:
            all_have_access = False
    
    print(f"\nüìä –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for user_id in users:
        result = remove_user_access(user_id)
        print(f"   remove_user_access({user_id}): {result}")
    
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø —É–¥–∞–ª–µ–Ω:")
    all_removed = True
    for user_id in users:
        access = has_access(user_id)
        print(f"   has_access({user_id}): {access}")
        if access:
            all_removed = False
    
    success = all_have_access and all_removed
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–†–û–®–ï–õ!")
        return True
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ù–ï –ü–†–û–®–ï–õ!")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò REDIS")
    print("=" * 80)
    
    test1_passed = test_integration()
    test2_passed = test_multiple_users()
    
    print("\n" + "=" * 80)
    print("üèÅ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ' if test1_passed else '‚ùå'}")
    print(f"   –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ' if test2_passed else '‚ùå'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ –í–°–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø REDIS –†–ê–ë–û–¢–ê–ï–¢!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç—ã —Å Redis!")
        exit(0)
    else:
        print("\n‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–ú–ï–ï–¢ –ü–†–û–ë–õ–ï–ú–´!")
        exit(1) 
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Redis —Å access_manager
"""

import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_integration():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò REDIS –° ACCESS_MANAGER")
    print("=" * 80)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º access_manager
    try:
        from utils.access_manager import has_access, add_user_access, remove_user_access, delete_user_completely, force_sync_access
        print("‚úÖ –ò–º–ø–æ—Ä—Ç access_manager —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    test_user_id = 99999
    
    print(f"\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    initial_access = has_access(test_user_id)
    print(f"   has_access({test_user_id}): {initial_access}")
    
    print(f"\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    add_result = add_user_access(test_user_id)
    print(f"   add_user_access({test_user_id}): {add_result}")
    
    print(f"\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    access_after_add = has_access(test_user_id)
    print(f"   has_access({test_user_id}): {access_after_add}")
    
    print(f"\n4Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    remove_result = remove_user_access(test_user_id)
    print(f"   remove_user_access({test_user_id}): {remove_result}")
    
    print(f"\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:")
    access_after_remove = has_access(test_user_id)
    print(f"   has_access({test_user_id}): {access_after_remove}")
    
    print(f"\n6Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:")
    sync_result = force_sync_access()
    print(f"   force_sync_access(): {sync_result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success = (
        initial_access == False and
        add_result == True and
        access_after_add == True and
        remove_result == True and
        access_after_remove == False and
        sync_result == True
    )
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ù–ï –ü–†–û–®–õ–ò!")
        print(f"   –î–µ—Ç–∞–ª–∏: initial={initial_access}, add={add_result}, after_add={access_after_add}")
        print(f"           remove={remove_result}, after_remove={access_after_remove}, sync={sync_result}")
        return False

def test_multiple_users():
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï–°–ö–û–õ–¨–ö–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 80)
    
    from utils.access_manager import has_access, add_user_access, remove_user_access
    
    users = [11111, 22222, 33333]
    
    print(f"üìä –î–æ–±–∞–≤–ª—è–µ–º {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for user_id in users:
        result = add_user_access(user_id)
        print(f"   add_user_access({user_id}): {result}")
    
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    all_have_access = True
    for user_id in users:
        access = has_access(user_id)
        print(f"   has_access({user_id}): {access}")
        if not access:
            all_have_access = False
    
    print(f"\nüìä –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for user_id in users:
        result = remove_user_access(user_id)
        print(f"   remove_user_access({user_id}): {result}")
    
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø —É–¥–∞–ª–µ–Ω:")
    all_removed = True
    for user_id in users:
        access = has_access(user_id)
        print(f"   has_access({user_id}): {access}")
        if access:
            all_removed = False
    
    success = all_have_access and all_removed
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–†–û–®–ï–õ!")
        return True
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ù–ï –ü–†–û–®–ï–õ!")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò REDIS")
    print("=" * 80)
    
    test1_passed = test_integration()
    test2_passed = test_multiple_users()
    
    print("\n" + "=" * 80)
    print("üèÅ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ' if test1_passed else '‚ùå'}")
    print(f"   –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ' if test2_passed else '‚ùå'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ –í–°–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø REDIS –†–ê–ë–û–¢–ê–ï–¢!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç—ã —Å Redis!")
        exit(0)
    else:
        print("\n‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–ú–ï–ï–¢ –ü–†–û–ë–õ–ï–ú–´!")
        exit(1) 