#!/usr/bin/env python3
"""
üöÄ –£–ú–ù–´–ô –ë–ê–¢–ß–ï–í–´–ô –í–ê–õ–ò–î–ê–¢–û–†
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∏–∑–±–µ–≥–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import time
import logging
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from database.db_manager import get_session, get_instagram_accounts, update_instagram_account
from database.models import InstagramAccount
from sqlalchemy import distinct

logger = logging.getLogger(__name__)

class SmartBatchValidator:
    """–£–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self):
        self.is_running = False
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        self.batch_size = 5  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑
        self.accounts_per_user_limit = 50  # –ú–∞–∫—Å–∏–º—É–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ä–∞–∑
        self.validation_thread = None
        
        # –†–æ—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.current_user_offset = 0
        self.last_full_cycle = datetime.now()
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–∞—Ç—á–µ–≤–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ë–∞—Ç—á–µ–≤—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        self.validation_thread = threading.Thread(target=self._batch_validation_loop, daemon=True)
        self.validation_thread.start()
        logger.info("üöÄ –£–º–Ω—ã–π –±–∞—Ç—á–µ–≤—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        self.is_running = False
        if self.validation_thread:
            self.validation_thread.join(timeout=10)
        logger.info("üõë –£–º–Ω—ã–π –±–∞—Ç—á–µ–≤—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _batch_validation_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–∞—Ç—á–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        while self.is_running:
            try:
                time.sleep(self.check_interval)
                
                # üéØ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_ids = self._get_active_user_ids()
                if not user_ids:
                    logger.info("üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    continue
                
                total_users = len(user_ids)
                logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ {total_users} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # üîÑ –†–æ—Ç–∞—Ü–∏—è: –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                end_offset = min(self.current_user_offset + self.batch_size, total_users)
                batch_users = user_ids[self.current_user_offset:end_offset]
                
                logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {self.current_user_offset+1}-{end_offset} –∏–∑ {total_users}")
                
                # üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞—Ç—á–µ
                for user_id in batch_users:
                    try:
                        self._validate_user_accounts(user_id)
                        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
                # üìà –û–±–Ω–æ–≤–ª—è–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                self.current_user_offset = end_offset
                
                # üîÑ –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
                if self.current_user_offset >= total_users:
                    self.current_user_offset = 0
                    self.last_full_cycle = datetime.now()
                    logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {self.check_interval}—Å")
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    def _get_active_user_ids(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            session = get_session()
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            user_ids = session.query(distinct(InstagramAccount.user_id)).filter(
                InstagramAccount.user_id.isnot(None)
            ).all()
            session.close()
            
            return [uid[0] for uid in user_ids if uid[0] is not None]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _validate_user_accounts(self, user_id: int):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # üîí –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_accounts = get_instagram_accounts(user_id)
            
            if not user_accounts:
                logger.debug(f"üìä –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return
            
            # üéØ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            accounts_to_check = user_accounts[:self.accounts_per_user_limit]
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(accounts_to_check)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # üìä –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            valid_count = 0
            invalid_count = 0
            
            for account in accounts_to_check:
                try:
                    # üîç –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram
                    if self._basic_account_check(account):
                        valid_count += 1
                    else:
                        invalid_count += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {e}")
                    invalid_count += 1
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {valid_count} –≤–∞–ª–∏–¥–Ω—ã—Ö, {invalid_count} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def _basic_account_check(self, account: InstagramAccount) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram"""
        try:
            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            if not account.username or not account.password:
                return False
            
            # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if account.last_activity:
                days_since_activity = (datetime.now() - account.last_activity).days
                if days_since_activity > 30:  # –ë–æ–ª–µ–µ 30 –¥–Ω–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {e}")
            return False
    
    def get_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        return {
            'is_running': self.is_running,
            'current_user_offset': self.current_user_offset,
            'last_full_cycle': self.last_full_cycle.isoformat() if self.last_full_cycle else None,
            'batch_size': self.batch_size,
            'accounts_per_user_limit': self.accounts_per_user_limit,
            'check_interval': self.check_interval
        }

# üöÄ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
smart_batch_validator = SmartBatchValidator() 