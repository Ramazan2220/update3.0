#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ —Å–±–æ–µ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
"""

import logging
import json
import threading
from datetime import datetime, timedelta
from typing import Dict, Set, Optional, List, Any
from pathlib import Path
from enum import Enum

logger = logging.getLogger(__name__)

class ProcessingStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    PENDING = "pending"
    PROCESSING = "processing"  
    COMPLETED = "completed"
    FAILED = "failed"
    SKIPPED = "skipped"

class ProcessingState:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    
    def __init__(self, process_name: str = "default", state_file: str = None):
        self.process_name = process_name
        self.state_file = Path(state_file or f"data/processing_state_{process_name}.json")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.state_file.parent.mkdir(parents=True, exist_ok=True)
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_user_id: Optional[int] = None
        self.processed_users: Set[int] = set()
        self.failed_users: Set[int] = set()
        self.skipped_users: Set[int] = set()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.user_processing_times: Dict[int, float] = {}
        self.user_statuses: Dict[int, ProcessingStatus] = {}
        self.user_errors: Dict[int, str] = {}
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        self.cycle_started_at: Optional[datetime] = None
        self.last_full_cycle: Optional[datetime] = None
        self.last_save_time: Optional[datetime] = None
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safety
        self._lock = threading.Lock()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_state()
    
    def start_cycle(self, total_users: List[int]):
        """
        –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            total_users: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        with self._lock:
            self.cycle_started_at = datetime.now()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in total_users:
                if user_id not in self.user_statuses:
                    self.user_statuses[user_id] = ProcessingStatus.PENDING
            
            logger.info(f"üîÑ {self.process_name}: –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(total_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            self.save_state()
    
    def start_user_processing(self, user_id: int):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        with self._lock:
            self.current_user_id = user_id
            self.user_statuses[user_id] = ProcessingStatus.PROCESSING
            self.user_processing_times[user_id] = datetime.now().timestamp()
            
            logger.debug(f"‚ñ∂Ô∏è {self.process_name}: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            self.save_state()
    
    def complete_user_processing(self, user_id: int, success: bool = True, error_message: str = None):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        with self._lock:
            start_time = self.user_processing_times.get(user_id, datetime.now().timestamp())
            processing_time = datetime.now().timestamp() - start_time
            
            if success:
                self.processed_users.add(user_id)
                self.user_statuses[user_id] = ProcessingStatus.COMPLETED
                logger.debug(f"‚úÖ {self.process_name}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {processing_time:.2f}—Å")
            else:
                self.failed_users.add(user_id)
                self.user_statuses[user_id] = ProcessingStatus.FAILED
                if error_message:
                    self.user_errors[user_id] = error_message
                logger.warning(f"‚ùå {self.process_name}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_message}")
            
            self.user_processing_times[user_id] = processing_time
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω
            if self.current_user_id == user_id:
                self.current_user_id = None
            
            self.save_state()
    
    def skip_user(self, user_id: int, reason: str = "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"):
        """
        –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        """
        with self._lock:
            self.skipped_users.add(user_id)
            self.user_statuses[user_id] = ProcessingStatus.SKIPPED
            self.user_errors[user_id] = f"–ü—Ä–æ–ø—É—â–µ–Ω: {reason}"
            
            logger.info(f"‚è≠Ô∏è {self.process_name}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—â–µ–Ω - {reason}")
            self.save_state()
    
    def complete_cycle(self):
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        with self._lock:
            self.last_full_cycle = datetime.now()
            self.current_user_id = None
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
            total_users = len(self.user_statuses)
            completed = len(self.processed_users)
            failed = len(self.failed_users)
            skipped = len(self.skipped_users)
            
            cycle_time = (self.last_full_cycle - self.cycle_started_at).total_seconds() if self.cycle_started_at else 0
            
            logger.info(f"üèÅ {self.process_name}: –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.1f}—Å. "
                       f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {completed}, –û—à–∏–±–∫–∏: {failed}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}, –í—Å–µ–≥–æ: {total_users}")
            
            self.save_state()
    
    def get_unprocessed_users(self, all_users: List[int]) -> List[int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            all_users: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        with self._lock:
            unprocessed = []
            
            for user_id in all_users:
                status = self.user_statuses.get(user_id, ProcessingStatus.PENDING)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å PENDING –∏–ª–∏ FAILED (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞)
                if status in [ProcessingStatus.PENDING, ProcessingStatus.FAILED]:
                    unprocessed.append(user_id)
                # –¢–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ —Å–±–æ–µ
                elif status == ProcessingStatus.PROCESSING:
                    logger.warning(f"‚ö†Ô∏è {self.process_name}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ —Å–±–æ–µ - –ø–æ–≤—Ç–æ—Ä—è–µ–º")
                    unprocessed.append(user_id)
            
            return unprocessed
    
    def should_retry_failed_users(self, max_retry_hours: int = 24) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É failed –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            max_retry_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (—á–∞—Å—ã)
            
        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        """
        if not self.failed_users:
            return False
        
        if not self.last_full_cycle:
            return True
        
        time_since_last_cycle = datetime.now() - self.last_full_cycle
        return time_since_last_cycle > timedelta(hours=max_retry_hours)
    
    def reset_failed_users(self):
        """
        –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å failed –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        with self._lock:
            reset_count = 0
            for user_id in list(self.failed_users):
                self.user_statuses[user_id] = ProcessingStatus.PENDING
                if user_id in self.user_errors:
                    del self.user_errors[user_id]
                reset_count += 1
            
            self.failed_users.clear()
            
            logger.info(f"üîÑ {self.process_name}: –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å {reset_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            self.save_state()
    
    def get_progress_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        Returns:
            Dict: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        with self._lock:
            total_users = len(self.user_statuses)
            completed = len([u for u, s in self.user_statuses.items() if s == ProcessingStatus.COMPLETED])
            failed = len([u for u, s in self.user_statuses.items() if s == ProcessingStatus.FAILED])
            skipped = len([u for u, s in self.user_statuses.items() if s == ProcessingStatus.SKIPPED])
            processing = len([u for u, s in self.user_statuses.items() if s == ProcessingStatus.PROCESSING])
            pending = len([u for u, s in self.user_statuses.items() if s == ProcessingStatus.PENDING])
            
            # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_times = [t for t in self.user_processing_times.values() if isinstance(t, float)]
            avg_processing_time = sum(processing_times) / len(processing_times) if processing_times else 0
            
            return {
                "process_name": self.process_name,
                "total_users": total_users,
                "completed": completed,
                "failed": failed,
                "skipped": skipped,
                "processing": processing,
                "pending": pending,
                "current_user_id": self.current_user_id,
                "completion_rate": (completed / total_users * 100) if total_users > 0 else 0,
                "avg_processing_time": avg_processing_time,
                "cycle_started_at": self.cycle_started_at.isoformat() if self.cycle_started_at else None,
                "last_full_cycle": self.last_full_cycle.isoformat() if self.last_full_cycle else None,
                "last_save_time": self.last_save_time.isoformat() if self.last_save_time else None
            }
    
    def save_state(self):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª
        """
        try:
            state_data = {
                "process_name": self.process_name,
                "current_user_id": self.current_user_id,
                "processed_users": list(self.processed_users),
                "failed_users": list(self.failed_users),
                "skipped_users": list(self.skipped_users),
                "user_statuses": {str(k): v.value for k, v in self.user_statuses.items()},
                "user_processing_times": {str(k): v for k, v in self.user_processing_times.items()},
                "user_errors": {str(k): v for k, v in self.user_errors.items()},
                "cycle_started_at": self.cycle_started_at.isoformat() if self.cycle_started_at else None,
                "last_full_cycle": self.last_full_cycle.isoformat() if self.last_full_cycle else None,
                "saved_at": datetime.now().isoformat()
            }
            
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(state_data, f, indent=2, ensure_ascii=False)
            
            self.last_save_time = datetime.now()
            logger.debug(f"üíæ {self.process_name}: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {self.state_file}")
            
        except Exception as e:
            logger.error(f"‚ùå {self.process_name}: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_state(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        """
        try:
            if not self.state_file.exists():
                logger.debug(f"üìÅ {self.process_name}: –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫")
                return False
            
            with open(self.state_file, 'r', encoding='utf-8') as f:
                state_data = json.load(f)
            
            self.current_user_id = state_data.get('current_user_id')
            self.processed_users = set(state_data.get('processed_users', []))
            self.failed_users = set(state_data.get('failed_users', []))
            self.skipped_users = set(state_data.get('skipped_users', []))
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
            user_statuses_raw = state_data.get('user_statuses', {})
            self.user_statuses = {int(k): ProcessingStatus(v) for k, v in user_statuses_raw.items()}
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –∏ –æ—à–∏–±–∫–∏
            user_times_raw = state_data.get('user_processing_times', {})
            self.user_processing_times = {int(k): v for k, v in user_times_raw.items()}
            
            user_errors_raw = state_data.get('user_errors', {})
            self.user_errors = {int(k): v for k, v in user_errors_raw.items()}
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            cycle_started_str = state_data.get('cycle_started_at')
            if cycle_started_str:
                self.cycle_started_at = datetime.fromisoformat(cycle_started_str)
            
            last_cycle_str = state_data.get('last_full_cycle')
            if last_cycle_str:
                self.last_full_cycle = datetime.fromisoformat(last_cycle_str)
            
            total_users = len(self.user_statuses)
            completed = len(self.processed_users)
            failed = len(self.failed_users)
            
            logger.info(f"üìÇ {self.process_name}: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. "
                       f"–í—Å–µ–≥–æ: {total_users}, –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}, –û—à–∏–±–∫–∏: {failed}")
            
            # –ï—Å–ª–∏ –±—ã–ª–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.current_user_id:
                logger.warning(f"‚ö†Ô∏è {self.process_name}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.current_user_id}")
                self.user_statuses[self.current_user_id] = ProcessingStatus.PENDING  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.current_user_id = None
                self.save_state()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå {self.process_name}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return False
    
    def cleanup_old_data(self, keep_days: int = 7):
        """
        –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            keep_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        with self._lock:
            cutoff_time = datetime.now() - timedelta(days=keep_days)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
            old_errors = {k: v for k, v in self.user_errors.items() 
                         if self.user_statuses.get(k) == ProcessingStatus.COMPLETED}
            
            for user_id in old_errors:
                del self.user_errors[user_id]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            completed_users = [k for k, v in self.user_statuses.items() 
                             if v == ProcessingStatus.COMPLETED]
            
            for user_id in completed_users:
                if user_id in self.user_processing_times:
                    del self.user_processing_times[user_id]
            
            logger.info(f"üßπ {self.process_name}: –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(old_errors)} –æ—à–∏–±–æ–∫, {len(completed_users)} –≤—Ä–µ–º–µ–Ω)")
            self.save_state()

def health_check_processing_states() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        Dict: –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    """
    state_dir = Path("data")
    health_status = {
        "timestamp": datetime.now().isoformat(),
        "processes": {},
        "summary": {
            "total_processes": 0,
            "active_processes": 0,
            "failed_processes": 0
        }
    }
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if state_dir.exists():
            state_files = list(state_dir.glob("processing_state_*.json"))
            
            for state_file in state_files:
                process_name = state_file.stem.replace("processing_state_", "")
                
                try:
                    processing_state = ProcessingState(process_name)
                    stats = processing_state.get_progress_stats()
                    
                    health_status["processes"][process_name] = stats
                    health_status["summary"]["total_processes"] += 1
                    
                    if stats["processing"] > 0:
                        health_status["summary"]["active_processes"] += 1
                    
                    if stats["failed"] > 0:
                        health_status["summary"]["failed_processes"] += 1
                        
                except Exception as e:
                    health_status["processes"][process_name] = {"error": str(e)}
        
        return health_status
        
    except Exception as e:
        return {
            "timestamp": datetime.now().isoformat(),
            "error": str(e),
            "processes": {}
        } 