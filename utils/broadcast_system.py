#!/usr/bin/env python3
"""
üì¢ Broadcast System - –°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º (trial, premium, free)
- –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
"""

import logging
import time
import json
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass, asdict
from enum import Enum

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from utils.notification_manager import get_notification_manager, NotificationType, NotificationPriority
from utils.access_manager import has_access

logger = logging.getLogger(__name__)

class BroadcastType(Enum):
    """–¢–∏–ø—ã —Ä–∞—Å—Å—ã–ª–æ–∫"""
    ALL_USERS = "all_users"           # –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    TRIAL_USERS = "trial_users"       # –¢–æ–ª—å–∫–æ trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    PREMIUM_USERS = "premium_users"   # –¢–æ–ª—å–∫–æ premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    FREE_USERS = "free_users"         # –¢–æ–ª—å–∫–æ free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    ACTIVE_USERS = "active_users"     # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    EXPIRING_USERS = "expiring_users" # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    SPECIFIC_USERS = "specific_users" # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

class BroadcastStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    PENDING = "pending"       # –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    IN_PROGRESS = "in_progress"  # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    COMPLETED = "completed"   # –ó–∞–≤–µ—Ä—à–µ–Ω–∞
    FAILED = "failed"         # –ü—Ä–æ–≤–∞–ª–µ–Ω–∞
    CANCELLED = "cancelled"   # –û—Ç–º–µ–Ω–µ–Ω–∞

@dataclass
class BroadcastMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    id: str
    title: str
    message: str
    broadcast_type: BroadcastType
    priority: NotificationPriority
    admin_id: int
    created_at: str = None
    scheduled_at: Optional[str] = None
    status: BroadcastStatus = BroadcastStatus.PENDING
    target_users: Optional[List[int]] = None  # –î–ª—è SPECIFIC_USERS
    total_recipients: int = 0
    sent_count: int = 0
    failed_count: int = 0
    delivery_stats: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now().isoformat()
        if self.delivery_stats is None:
            self.delivery_stats = {}

class RedisBroadcastSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ Redis"""
    
    def __init__(self):
        self.notification_manager = get_notification_manager()
        self.redis_client = self.notification_manager.redis_client
        
        # –ö–ª—é—á–∏ Redis
        self.KEYS = {
            'broadcasts': 'broadcasts:messages',
            'queue': 'broadcasts:queue',
            'stats': 'broadcasts:stats',
            'delivery': 'broadcasts:delivery'
        }
        
        self._processor_thread = None
        self._stop_processing = False
        
        logger.info("üì¢ RedisBroadcastSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_processor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        if self._processor_thread and self._processor_thread.is_alive():
            return
        
        self._stop_processing = False
        self._processor_thread = threading.Thread(target=self._processing_loop, daemon=True)
        self._processor_thread.start()
        logger.info("üîÑ Broadcast processor –∑–∞–ø—É—â–µ–Ω")
    
    def stop_processor(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏"""
        self._stop_processing = True
        if self._processor_thread:
            self._processor_thread.join(timeout=5)
        logger.info("üõë Broadcast processor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        while not self._stop_processing:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–æ–∫
                self._process_pending_broadcasts()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                self._process_scheduled_broadcasts()
                
                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
                time.sleep(30)
    
    def create_broadcast(self, 
                        title: str, 
                        message: str, 
                        broadcast_type: BroadcastType, 
                        admin_id: int,
                        priority: NotificationPriority = NotificationPriority.NORMAL,
                        target_users: Optional[List[int]] = None,
                        scheduled_at: Optional[datetime] = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        try:
            broadcast_id = f"broadcast_{int(time.time())}_{admin_id}"
            
            broadcast = BroadcastMessage(
                id=broadcast_id,
                title=title,
                message=message,
                broadcast_type=broadcast_type,
                priority=priority,
                admin_id=admin_id,
                target_users=target_users,
                scheduled_at=scheduled_at.isoformat() if scheduled_at else None
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            broadcast_dict = asdict(broadcast)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º enum –≤ —Å—Ç—Ä–æ–∫—É (–µ—Å–ª–∏ —ç—Ç–æ enum)
            if hasattr(broadcast_dict['broadcast_type'], 'value'):
                broadcast_dict['broadcast_type'] = broadcast_dict['broadcast_type'].value
            if hasattr(broadcast_dict['priority'], 'value'):
                broadcast_dict['priority'] = broadcast_dict['priority'].value
            if hasattr(broadcast_dict['status'], 'value'):
                broadcast_dict['status'] = broadcast_dict['status'].value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            self.redis_client.hset(
                self.KEYS['broadcasts'], 
                broadcast_id, 
                json.dumps(broadcast_dict)
            )
            
            if scheduled_at:
                logger.info(f"üìÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_at}: {title}")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.redis_client.lpush(self.KEYS['queue'], broadcast_id)
                logger.info(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {title}")
            
            return broadcast_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return ""
    
    def _process_pending_broadcasts(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            broadcast_id = self.redis_client.rpop(self.KEYS['queue'])
            if not broadcast_id:
                return
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(broadcast_id, bytes):
                broadcast_id = broadcast_id.decode('utf-8')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            broadcast_data = self.redis_client.hget(self.KEYS['broadcasts'], broadcast_id)
            if not broadcast_data:
                logger.warning(f"–†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            broadcast = BroadcastMessage(**json.loads(broadcast_data))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            self._execute_broadcast(broadcast)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    def _process_scheduled_broadcasts(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            broadcasts = self.redis_client.hgetall(self.KEYS['broadcasts'])
            now = datetime.now()
            
            for broadcast_id, broadcast_data in broadcasts.items():
                try:
                    if isinstance(broadcast_id, bytes):
                        broadcast_id = broadcast_id.decode('utf-8')
                    if isinstance(broadcast_data, bytes):
                        broadcast_data = broadcast_data.decode('utf-8')
                    
                    broadcast = BroadcastMessage(**json.loads(broadcast_data))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                    if (broadcast.scheduled_at and 
                        broadcast.status == BroadcastStatus.PENDING):
                        
                        scheduled_time = datetime.fromisoformat(broadcast.scheduled_at)
                        
                        if now >= scheduled_time:
                            # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                            self.redis_client.lpush(self.KEYS['queue'], broadcast_id)
                            logger.info(f"‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {broadcast.title}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
    
    def _execute_broadcast(self, broadcast: BroadcastMessage):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É: {broadcast.title}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            broadcast.status = BroadcastStatus.IN_PROGRESS
            self._save_broadcast(broadcast)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipients = self._get_recipients(broadcast)
            broadcast.total_recipients = len(recipients)
            
            if not recipients:
                logger.warning(f"–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast.id}")
                broadcast.status = BroadcastStatus.FAILED
                self._save_broadcast(broadcast)
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            sent_count = 0
            failed_count = 0
            
            for user_id in recipients:
                try:
                    success = self._send_to_user(broadcast, user_id)
                    if success:
                        sent_count += 1
                    else:
                        failed_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    time.sleep(0.1)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    failed_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            broadcast.sent_count = sent_count
            broadcast.failed_count = failed_count
            broadcast.status = BroadcastStatus.COMPLETED
            broadcast.delivery_stats = {
                'completed_at': datetime.now().isoformat(),
                'success_rate': round((sent_count / len(recipients)) * 100, 2) if recipients else 0,
                'total_time': time.time() - time.mktime(datetime.fromisoformat(broadcast.created_at).timetuple())
            }
            
            self._save_broadcast(broadcast)
            self._update_global_stats(broadcast)
            
            logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{len(recipients)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            broadcast.status = BroadcastStatus.FAILED
            self._save_broadcast(broadcast)
    
    def _get_recipients(self, broadcast: BroadcastMessage) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            if broadcast.broadcast_type == BroadcastType.SPECIFIC_USERS:
                return broadcast.target_users or []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            users = self._get_all_users_from_admin_panel()
            recipients = []
            
            for user in users:
                user_id = user['telegram_id']
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Ä–∞—Å—Å—ã–ª–∫–∏
                if self._should_include_user(user, broadcast.broadcast_type):
                    recipients.append(user_id)
            
            return recipients
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _should_include_user(self, user: Dict, broadcast_type: BroadcastType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        try:
            if broadcast_type == BroadcastType.ALL_USERS:
                return True
            
            subscription_plan = user.get('subscription_plan', 'trial')
            is_active = user.get('is_active', False)
            subscription_end = user.get('subscription_end')
            
            if broadcast_type == BroadcastType.ACTIVE_USERS:
                return is_active
            
            if broadcast_type == BroadcastType.TRIAL_USERS:
                return 'trial' in subscription_plan.lower()
            
            if broadcast_type == BroadcastType.PREMIUM_USERS:
                return 'premium' in subscription_plan.lower()
            
            if broadcast_type == BroadcastType.FREE_USERS:
                return 'free' in subscription_plan.lower()
            
            if broadcast_type == BroadcastType.EXPIRING_USERS:
                if subscription_end:
                    try:
                        if isinstance(subscription_end, str):
                            subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
                        
                        days_left = (subscription_end - datetime.now()).days
                        return 0 <= days_left <= 7  # –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
                    except:
                        pass
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def _get_all_users_from_admin_panel(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        try:
            import sys
            import os
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'admin_bot'))
            
            from admin_bot.services.user_service import UserService
            
            user_service = UserService()
            users = user_service.get_all_users()
            
            user_list = []
            for user in users:
                try:
                    user_dict = {
                        'telegram_id': user.telegram_id,
                        'username': user.username,
                        'subscription_plan': user.subscription_plan.value if user.subscription_plan else 'trial',
                        'subscription_end': user.subscription_end,
                        'is_active': user.is_active,
                        'created_at': user.created_at
                    }
                    user_list.append(user_dict)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            return user_list
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _send_to_user(self, broadcast: BroadcastMessage, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = self.notification_manager.send_personal_notification(
                user_id=user_id,
                title=broadcast.title,
                message=broadcast.message,
                admin_id=broadcast.admin_id,
                priority=broadcast.priority
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_key = f"{self.KEYS['delivery']}:{broadcast.id}"
            self.redis_client.hset(
                delivery_key,
                str(user_id),
                json.dumps({
                    'sent_at': datetime.now().isoformat(),
                    'success': success
                })
            )
            
            # TTL 30 –¥–Ω–µ–π
            self.redis_client.expire(delivery_key, 30 * 24 * 3600)
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    def _save_broadcast(self, broadcast: BroadcastMessage):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤ Redis"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            broadcast_dict = asdict(broadcast)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º enum –≤ —Å—Ç—Ä–æ–∫—É
            if hasattr(broadcast_dict['broadcast_type'], 'value'):
                broadcast_dict['broadcast_type'] = broadcast_dict['broadcast_type'].value
            if hasattr(broadcast_dict['priority'], 'value'):
                broadcast_dict['priority'] = broadcast_dict['priority'].value
            if hasattr(broadcast_dict['status'], 'value'):
                broadcast_dict['status'] = broadcast_dict['status'].value
            
            self.redis_client.hset(
                self.KEYS['broadcasts'], 
                broadcast.id, 
                json.dumps(broadcast_dict)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    def _update_global_stats(self, broadcast: BroadcastMessage):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            stats_key = f"{self.KEYS['stats']}:{today}"
            
            self.redis_client.hincrby(stats_key, 'broadcasts_sent', 1)
            self.redis_client.hincrby(stats_key, 'messages_sent', broadcast.sent_count)
            self.redis_client.hincrby(stats_key, 'messages_failed', broadcast.failed_count)
            
            # TTL 90 –¥–Ω–µ–π
            self.redis_client.expire(stats_key, 90 * 24 * 3600)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # ========================
    # –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
    # ========================
    
    def broadcast_to_all(self, title: str, message: str, admin_id: int, 
                        priority: NotificationPriority = NotificationPriority.NORMAL,
                        scheduled_at: Optional[datetime] = None) -> str:
        """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        return self.create_broadcast(
            title=title,
            message=message,
            broadcast_type=BroadcastType.ALL_USERS,
            admin_id=admin_id,
            priority=priority,
            scheduled_at=scheduled_at
        )
    
    def broadcast_to_group(self, title: str, message: str, group: str, admin_id: int,
                          priority: NotificationPriority = NotificationPriority.NORMAL,
                          scheduled_at: Optional[datetime] = None) -> str:
        """–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        group_mapping = {
            'trial': BroadcastType.TRIAL_USERS,
            'premium': BroadcastType.PREMIUM_USERS,
            'free': BroadcastType.FREE_USERS,
            'active': BroadcastType.ACTIVE_USERS,
            'expiring': BroadcastType.EXPIRING_USERS
        }
        
        broadcast_type = group_mapping.get(group.lower(), BroadcastType.ALL_USERS)
        
        return self.create_broadcast(
            title=title,
            message=message,
            broadcast_type=broadcast_type,
            admin_id=admin_id,
            priority=priority,
            scheduled_at=scheduled_at
        )
    
    def broadcast_to_users(self, title: str, message: str, user_ids: List[int], admin_id: int,
                          priority: NotificationPriority = NotificationPriority.NORMAL,
                          scheduled_at: Optional[datetime] = None) -> str:
        """–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        return self.create_broadcast(
            title=title,
            message=message,
            broadcast_type=BroadcastType.SPECIFIC_USERS,
            admin_id=admin_id,
            priority=priority,
            target_users=user_ids,
            scheduled_at=scheduled_at
        )
    
    def get_broadcast_status(self, broadcast_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            broadcast_data = self.redis_client.hget(self.KEYS['broadcasts'], broadcast_id)
            if not broadcast_data:
                return None
            
            return json.loads(broadcast_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return None
    
    def get_recent_broadcasts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            broadcasts = self.redis_client.hgetall(self.KEYS['broadcasts'])
            
            broadcast_list = []
            for broadcast_id, broadcast_data in broadcasts.items():
                try:
                    if isinstance(broadcast_data, bytes):
                        broadcast_data = broadcast_data.decode('utf-8')
                    
                    data = json.loads(broadcast_data)
                    broadcast_list.append(data)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            broadcast_list.sort(key=lambda x: x['created_at'], reverse=True)
            
            return broadcast_list[:limit]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
            return []
    
    def get_broadcast_stats(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
        try:
            stats = {}
            total_broadcasts = 0
            total_messages = 0
            
            for i in range(days):
                date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
                stats_key = f"{self.KEYS['stats']}:{date}"
                
                day_stats = self.redis_client.hgetall(stats_key)
                if day_stats:
                    day_data = {k.decode() if isinstance(k, bytes) else k: 
                               int(v.decode() if isinstance(v, bytes) else v) 
                               for k, v in day_stats.items()}
                    stats[date] = day_data
                    total_broadcasts += day_data.get('broadcasts_sent', 0)
                    total_messages += day_data.get('messages_sent', 0)
                else:
                    stats[date] = {'broadcasts_sent': 0, 'messages_sent': 0, 'messages_failed': 0}
            
            return {
                'daily_stats': stats,
                'total_broadcasts_period': total_broadcasts,
                'total_messages_period': total_messages,
                'processing_active': self._processor_thread and self._processor_thread.is_alive(),
                'queue_size': self.redis_client.llen(self.KEYS['queue'])
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def cancel_broadcast(self, broadcast_id: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
        try:
            broadcast_data = self.redis_client.hget(self.KEYS['broadcasts'], broadcast_id)
            if not broadcast_data:
                return False
            
            broadcast = BroadcastMessage(**json.loads(broadcast_data))
            
            if broadcast.status == BroadcastStatus.PENDING:
                broadcast.status = BroadcastStatus.CANCELLED
                self._save_broadcast(broadcast)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                self.redis_client.lrem(self.KEYS['queue'], 0, broadcast_id)
                
                logger.info(f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {broadcast.title}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_broadcast_system = None

def get_broadcast_system() -> RedisBroadcastSystem:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä broadcast system"""
    global _broadcast_system
    if _broadcast_system is None:
        _broadcast_system = RedisBroadcastSystem()
        _broadcast_system.start_processor()
    return _broadcast_system

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def broadcast_to_all(title: str, message: str, admin_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º"""
    return get_broadcast_system().broadcast_to_all(title, message, admin_id)

def broadcast_to_group(title: str, message: str, group: str, admin_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–µ"""
    return get_broadcast_system().broadcast_to_group(title, message, group, admin_id)

def get_broadcast_stats():
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return get_broadcast_system().get_broadcast_stats()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    bs = get_broadcast_system()
    
    # –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_id = bs.broadcast_to_all(
        "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
        "–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        123456
    )
    
    print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {broadcast_id}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = bs.get_broadcast_stats()
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:")
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    print("\n‚úÖ Broadcast System –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω") 
"""
üì¢ Broadcast System - –°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º (trial, premium, free)
- –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
"""

import logging
import time
import json
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass, asdict
from enum import Enum

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from utils.notification_manager import get_notification_manager, NotificationType, NotificationPriority
from utils.access_manager import has_access

logger = logging.getLogger(__name__)

class BroadcastType(Enum):
    """–¢–∏–ø—ã —Ä–∞—Å—Å—ã–ª–æ–∫"""
    ALL_USERS = "all_users"           # –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    TRIAL_USERS = "trial_users"       # –¢–æ–ª—å–∫–æ trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    PREMIUM_USERS = "premium_users"   # –¢–æ–ª—å–∫–æ premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    FREE_USERS = "free_users"         # –¢–æ–ª—å–∫–æ free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    ACTIVE_USERS = "active_users"     # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    EXPIRING_USERS = "expiring_users" # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    SPECIFIC_USERS = "specific_users" # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

class BroadcastStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    PENDING = "pending"       # –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    IN_PROGRESS = "in_progress"  # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    COMPLETED = "completed"   # –ó–∞–≤–µ—Ä—à–µ–Ω–∞
    FAILED = "failed"         # –ü—Ä–æ–≤–∞–ª–µ–Ω–∞
    CANCELLED = "cancelled"   # –û—Ç–º–µ–Ω–µ–Ω–∞

@dataclass
class BroadcastMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    id: str
    title: str
    message: str
    broadcast_type: BroadcastType
    priority: NotificationPriority
    admin_id: int
    created_at: str = None
    scheduled_at: Optional[str] = None
    status: BroadcastStatus = BroadcastStatus.PENDING
    target_users: Optional[List[int]] = None  # –î–ª—è SPECIFIC_USERS
    total_recipients: int = 0
    sent_count: int = 0
    failed_count: int = 0
    delivery_stats: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now().isoformat()
        if self.delivery_stats is None:
            self.delivery_stats = {}

class RedisBroadcastSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ Redis"""
    
    def __init__(self):
        self.notification_manager = get_notification_manager()
        self.redis_client = self.notification_manager.redis_client
        
        # –ö–ª—é—á–∏ Redis
        self.KEYS = {
            'broadcasts': 'broadcasts:messages',
            'queue': 'broadcasts:queue',
            'stats': 'broadcasts:stats',
            'delivery': 'broadcasts:delivery'
        }
        
        self._processor_thread = None
        self._stop_processing = False
        
        logger.info("üì¢ RedisBroadcastSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_processor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        if self._processor_thread and self._processor_thread.is_alive():
            return
        
        self._stop_processing = False
        self._processor_thread = threading.Thread(target=self._processing_loop, daemon=True)
        self._processor_thread.start()
        logger.info("üîÑ Broadcast processor –∑–∞–ø—É—â–µ–Ω")
    
    def stop_processor(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏"""
        self._stop_processing = True
        if self._processor_thread:
            self._processor_thread.join(timeout=5)
        logger.info("üõë Broadcast processor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        while not self._stop_processing:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ä–∞—Å—Å—ã–ª–æ–∫
                self._process_pending_broadcasts()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                self._process_scheduled_broadcasts()
                
                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
                time.sleep(30)
    
    def create_broadcast(self, 
                        title: str, 
                        message: str, 
                        broadcast_type: BroadcastType, 
                        admin_id: int,
                        priority: NotificationPriority = NotificationPriority.NORMAL,
                        target_users: Optional[List[int]] = None,
                        scheduled_at: Optional[datetime] = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        try:
            broadcast_id = f"broadcast_{int(time.time())}_{admin_id}"
            
            broadcast = BroadcastMessage(
                id=broadcast_id,
                title=title,
                message=message,
                broadcast_type=broadcast_type,
                priority=priority,
                admin_id=admin_id,
                target_users=target_users,
                scheduled_at=scheduled_at.isoformat() if scheduled_at else None
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            broadcast_dict = asdict(broadcast)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º enum –≤ —Å—Ç—Ä–æ–∫—É (–µ—Å–ª–∏ —ç—Ç–æ enum)
            if hasattr(broadcast_dict['broadcast_type'], 'value'):
                broadcast_dict['broadcast_type'] = broadcast_dict['broadcast_type'].value
            if hasattr(broadcast_dict['priority'], 'value'):
                broadcast_dict['priority'] = broadcast_dict['priority'].value
            if hasattr(broadcast_dict['status'], 'value'):
                broadcast_dict['status'] = broadcast_dict['status'].value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            self.redis_client.hset(
                self.KEYS['broadcasts'], 
                broadcast_id, 
                json.dumps(broadcast_dict)
            )
            
            if scheduled_at:
                logger.info(f"üìÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_at}: {title}")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.redis_client.lpush(self.KEYS['queue'], broadcast_id)
                logger.info(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {title}")
            
            return broadcast_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return ""
    
    def _process_pending_broadcasts(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            broadcast_id = self.redis_client.rpop(self.KEYS['queue'])
            if not broadcast_id:
                return
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(broadcast_id, bytes):
                broadcast_id = broadcast_id.decode('utf-8')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            broadcast_data = self.redis_client.hget(self.KEYS['broadcasts'], broadcast_id)
            if not broadcast_data:
                logger.warning(f"–†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            broadcast = BroadcastMessage(**json.loads(broadcast_data))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            self._execute_broadcast(broadcast)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    def _process_scheduled_broadcasts(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            broadcasts = self.redis_client.hgetall(self.KEYS['broadcasts'])
            now = datetime.now()
            
            for broadcast_id, broadcast_data in broadcasts.items():
                try:
                    if isinstance(broadcast_id, bytes):
                        broadcast_id = broadcast_id.decode('utf-8')
                    if isinstance(broadcast_data, bytes):
                        broadcast_data = broadcast_data.decode('utf-8')
                    
                    broadcast = BroadcastMessage(**json.loads(broadcast_data))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                    if (broadcast.scheduled_at and 
                        broadcast.status == BroadcastStatus.PENDING):
                        
                        scheduled_time = datetime.fromisoformat(broadcast.scheduled_at)
                        
                        if now >= scheduled_time:
                            # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                            self.redis_client.lpush(self.KEYS['queue'], broadcast_id)
                            logger.info(f"‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {broadcast.title}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
    
    def _execute_broadcast(self, broadcast: BroadcastMessage):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É: {broadcast.title}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            broadcast.status = BroadcastStatus.IN_PROGRESS
            self._save_broadcast(broadcast)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipients = self._get_recipients(broadcast)
            broadcast.total_recipients = len(recipients)
            
            if not recipients:
                logger.warning(f"–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast.id}")
                broadcast.status = BroadcastStatus.FAILED
                self._save_broadcast(broadcast)
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            sent_count = 0
            failed_count = 0
            
            for user_id in recipients:
                try:
                    success = self._send_to_user(broadcast, user_id)
                    if success:
                        sent_count += 1
                    else:
                        failed_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    time.sleep(0.1)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    failed_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            broadcast.sent_count = sent_count
            broadcast.failed_count = failed_count
            broadcast.status = BroadcastStatus.COMPLETED
            broadcast.delivery_stats = {
                'completed_at': datetime.now().isoformat(),
                'success_rate': round((sent_count / len(recipients)) * 100, 2) if recipients else 0,
                'total_time': time.time() - time.mktime(datetime.fromisoformat(broadcast.created_at).timetuple())
            }
            
            self._save_broadcast(broadcast)
            self._update_global_stats(broadcast)
            
            logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{len(recipients)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            broadcast.status = BroadcastStatus.FAILED
            self._save_broadcast(broadcast)
    
    def _get_recipients(self, broadcast: BroadcastMessage) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            if broadcast.broadcast_type == BroadcastType.SPECIFIC_USERS:
                return broadcast.target_users or []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            users = self._get_all_users_from_admin_panel()
            recipients = []
            
            for user in users:
                user_id = user['telegram_id']
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Ä–∞—Å—Å—ã–ª–∫–∏
                if self._should_include_user(user, broadcast.broadcast_type):
                    recipients.append(user_id)
            
            return recipients
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _should_include_user(self, user: Dict, broadcast_type: BroadcastType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        try:
            if broadcast_type == BroadcastType.ALL_USERS:
                return True
            
            subscription_plan = user.get('subscription_plan', 'trial')
            is_active = user.get('is_active', False)
            subscription_end = user.get('subscription_end')
            
            if broadcast_type == BroadcastType.ACTIVE_USERS:
                return is_active
            
            if broadcast_type == BroadcastType.TRIAL_USERS:
                return 'trial' in subscription_plan.lower()
            
            if broadcast_type == BroadcastType.PREMIUM_USERS:
                return 'premium' in subscription_plan.lower()
            
            if broadcast_type == BroadcastType.FREE_USERS:
                return 'free' in subscription_plan.lower()
            
            if broadcast_type == BroadcastType.EXPIRING_USERS:
                if subscription_end:
                    try:
                        if isinstance(subscription_end, str):
                            subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
                        
                        days_left = (subscription_end - datetime.now()).days
                        return 0 <= days_left <= 7  # –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
                    except:
                        pass
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def _get_all_users_from_admin_panel(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        try:
            import sys
            import os
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'admin_bot'))
            
            from admin_bot.services.user_service import UserService
            
            user_service = UserService()
            users = user_service.get_all_users()
            
            user_list = []
            for user in users:
                try:
                    user_dict = {
                        'telegram_id': user.telegram_id,
                        'username': user.username,
                        'subscription_plan': user.subscription_plan.value if user.subscription_plan else 'trial',
                        'subscription_end': user.subscription_end,
                        'is_active': user.is_active,
                        'created_at': user.created_at
                    }
                    user_list.append(user_dict)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            return user_list
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _send_to_user(self, broadcast: BroadcastMessage, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = self.notification_manager.send_personal_notification(
                user_id=user_id,
                title=broadcast.title,
                message=broadcast.message,
                admin_id=broadcast.admin_id,
                priority=broadcast.priority
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_key = f"{self.KEYS['delivery']}:{broadcast.id}"
            self.redis_client.hset(
                delivery_key,
                str(user_id),
                json.dumps({
                    'sent_at': datetime.now().isoformat(),
                    'success': success
                })
            )
            
            # TTL 30 –¥–Ω–µ–π
            self.redis_client.expire(delivery_key, 30 * 24 * 3600)
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    def _save_broadcast(self, broadcast: BroadcastMessage):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤ Redis"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            broadcast_dict = asdict(broadcast)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º enum –≤ —Å—Ç—Ä–æ–∫—É
            if hasattr(broadcast_dict['broadcast_type'], 'value'):
                broadcast_dict['broadcast_type'] = broadcast_dict['broadcast_type'].value
            if hasattr(broadcast_dict['priority'], 'value'):
                broadcast_dict['priority'] = broadcast_dict['priority'].value
            if hasattr(broadcast_dict['status'], 'value'):
                broadcast_dict['status'] = broadcast_dict['status'].value
            
            self.redis_client.hset(
                self.KEYS['broadcasts'], 
                broadcast.id, 
                json.dumps(broadcast_dict)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    def _update_global_stats(self, broadcast: BroadcastMessage):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            stats_key = f"{self.KEYS['stats']}:{today}"
            
            self.redis_client.hincrby(stats_key, 'broadcasts_sent', 1)
            self.redis_client.hincrby(stats_key, 'messages_sent', broadcast.sent_count)
            self.redis_client.hincrby(stats_key, 'messages_failed', broadcast.failed_count)
            
            # TTL 90 –¥–Ω–µ–π
            self.redis_client.expire(stats_key, 90 * 24 * 3600)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # ========================
    # –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
    # ========================
    
    def broadcast_to_all(self, title: str, message: str, admin_id: int, 
                        priority: NotificationPriority = NotificationPriority.NORMAL,
                        scheduled_at: Optional[datetime] = None) -> str:
        """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        return self.create_broadcast(
            title=title,
            message=message,
            broadcast_type=BroadcastType.ALL_USERS,
            admin_id=admin_id,
            priority=priority,
            scheduled_at=scheduled_at
        )
    
    def broadcast_to_group(self, title: str, message: str, group: str, admin_id: int,
                          priority: NotificationPriority = NotificationPriority.NORMAL,
                          scheduled_at: Optional[datetime] = None) -> str:
        """–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        group_mapping = {
            'trial': BroadcastType.TRIAL_USERS,
            'premium': BroadcastType.PREMIUM_USERS,
            'free': BroadcastType.FREE_USERS,
            'active': BroadcastType.ACTIVE_USERS,
            'expiring': BroadcastType.EXPIRING_USERS
        }
        
        broadcast_type = group_mapping.get(group.lower(), BroadcastType.ALL_USERS)
        
        return self.create_broadcast(
            title=title,
            message=message,
            broadcast_type=broadcast_type,
            admin_id=admin_id,
            priority=priority,
            scheduled_at=scheduled_at
        )
    
    def broadcast_to_users(self, title: str, message: str, user_ids: List[int], admin_id: int,
                          priority: NotificationPriority = NotificationPriority.NORMAL,
                          scheduled_at: Optional[datetime] = None) -> str:
        """–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        return self.create_broadcast(
            title=title,
            message=message,
            broadcast_type=BroadcastType.SPECIFIC_USERS,
            admin_id=admin_id,
            priority=priority,
            target_users=user_ids,
            scheduled_at=scheduled_at
        )
    
    def get_broadcast_status(self, broadcast_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            broadcast_data = self.redis_client.hget(self.KEYS['broadcasts'], broadcast_id)
            if not broadcast_data:
                return None
            
            return json.loads(broadcast_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return None
    
    def get_recent_broadcasts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            broadcasts = self.redis_client.hgetall(self.KEYS['broadcasts'])
            
            broadcast_list = []
            for broadcast_id, broadcast_data in broadcasts.items():
                try:
                    if isinstance(broadcast_data, bytes):
                        broadcast_data = broadcast_data.decode('utf-8')
                    
                    data = json.loads(broadcast_data)
                    broadcast_list.append(data)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            broadcast_list.sort(key=lambda x: x['created_at'], reverse=True)
            
            return broadcast_list[:limit]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
            return []
    
    def get_broadcast_stats(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
        try:
            stats = {}
            total_broadcasts = 0
            total_messages = 0
            
            for i in range(days):
                date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
                stats_key = f"{self.KEYS['stats']}:{date}"
                
                day_stats = self.redis_client.hgetall(stats_key)
                if day_stats:
                    day_data = {k.decode() if isinstance(k, bytes) else k: 
                               int(v.decode() if isinstance(v, bytes) else v) 
                               for k, v in day_stats.items()}
                    stats[date] = day_data
                    total_broadcasts += day_data.get('broadcasts_sent', 0)
                    total_messages += day_data.get('messages_sent', 0)
                else:
                    stats[date] = {'broadcasts_sent': 0, 'messages_sent': 0, 'messages_failed': 0}
            
            return {
                'daily_stats': stats,
                'total_broadcasts_period': total_broadcasts,
                'total_messages_period': total_messages,
                'processing_active': self._processor_thread and self._processor_thread.is_alive(),
                'queue_size': self.redis_client.llen(self.KEYS['queue'])
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def cancel_broadcast(self, broadcast_id: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
        try:
            broadcast_data = self.redis_client.hget(self.KEYS['broadcasts'], broadcast_id)
            if not broadcast_data:
                return False
            
            broadcast = BroadcastMessage(**json.loads(broadcast_data))
            
            if broadcast.status == BroadcastStatus.PENDING:
                broadcast.status = BroadcastStatus.CANCELLED
                self._save_broadcast(broadcast)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                self.redis_client.lrem(self.KEYS['queue'], 0, broadcast_id)
                
                logger.info(f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {broadcast.title}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_broadcast_system = None

def get_broadcast_system() -> RedisBroadcastSystem:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä broadcast system"""
    global _broadcast_system
    if _broadcast_system is None:
        _broadcast_system = RedisBroadcastSystem()
        _broadcast_system.start_processor()
    return _broadcast_system

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def broadcast_to_all(title: str, message: str, admin_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º"""
    return get_broadcast_system().broadcast_to_all(title, message, admin_id)

def broadcast_to_group(title: str, message: str, group: str, admin_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–µ"""
    return get_broadcast_system().broadcast_to_group(title, message, group, admin_id)

def get_broadcast_stats():
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return get_broadcast_system().get_broadcast_stats()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    bs = get_broadcast_system()
    
    # –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_id = bs.broadcast_to_all(
        "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
        "–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        123456
    )
    
    print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {broadcast_id}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = bs.get_broadcast_stats()
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:")
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    print("\n‚úÖ Broadcast System –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω") 