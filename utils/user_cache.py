#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–∞–∂–µ –ø—Ä–∏ —Å–±–æ—è—Ö –ë–î
"""

import logging
import json
import time
import threading
from datetime import datetime, timedelta
from typing import List, Tuple, Optional, Dict, Any
from pathlib import Path

from database.user_management import get_active_users, get_users_by_priority, get_user_info
from utils.system_monitor import SystemResourceMonitor

logger = logging.getLogger(__name__)

class UserCache:
    """
    –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
    """
    
    def __init__(self, cache_ttl: int = 3600, cache_file: str = "data/user_cache.json"):
        self.users_cache: List[int] = []
        self.priority_cache: List[Tuple[int, str]] = []
        self.user_info_cache: Dict[int, Dict] = {}
        
        self.last_update: Optional[datetime] = None
        self.cache_ttl = cache_ttl  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
        self.cache_file = Path(cache_file)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.cache_file.parent.mkdir(parents=True, exist_ok=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "cache_hits": 0,
            "cache_misses": 0,
            "fallback_used": 0,
            "errors": 0
        }
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safety
        self._lock = threading.Lock()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_cache_from_file()
    
    def get_active_users_safe(self) -> List[int]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å fallback
        
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ user_id –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        with self._lock:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –∫–µ—à —É—Å—Ç–∞—Ä–µ–ª
                if not self.is_cache_valid() or not self.users_cache:
                    logger.debug("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
                    fresh_users = get_active_users()
                    
                    if fresh_users:
                        self.users_cache = fresh_users
                        self.last_update = datetime.now()
                        self.save_cache_to_file()
                        self.stats["cache_misses"] += 1
                        logger.info(f"‚úÖ –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω: {len(fresh_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                        return fresh_users
                    else:
                        logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω
                if self.users_cache:
                    self.stats["cache_hits"] += 1
                    logger.debug(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à: {len(self.users_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    return self.users_cache.copy()
                
                # –ï—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
                if self.load_cache_from_file():
                    self.stats["fallback_used"] += 1
                    logger.warning(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–µ—à –∏–∑ —Ñ–∞–π–ª–∞: {len(self.users_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    return self.users_cache.copy()
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∏ –∏–∑ –ë–î, –Ω–∏ –∏–∑ –∫–µ—à–∞")
                self.stats["errors"] += 1
                return []
                
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_active_users_safe: {e}")
                self.stats["errors"] += 1
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à
                if self.users_cache:
                    self.stats["fallback_used"] += 1
                    logger.warning(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {len(self.users_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    return self.users_cache.copy()
                
                return []
    
    def get_users_by_priority_safe(self) -> List[Tuple[int, str]]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        
        Returns:
            List[Tuple[int, str]]: –°–ø–∏—Å–æ–∫ (user_id, priority)
        """
        with self._lock:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫
                if not self.is_cache_valid() or not self.priority_cache:
                    fresh_priority_users = get_users_by_priority()
                    
                    if fresh_priority_users:
                        self.priority_cache = fresh_priority_users
                        self.last_update = datetime.now()
                        self.save_cache_to_file()
                        logger.info(f"‚úÖ –ö–µ—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(fresh_priority_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                        return fresh_priority_users
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à
                if self.priority_cache:
                    return self.priority_cache.copy()
                
                # Fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                users = self.get_active_users_safe()
                fallback_priority = [(user_id, "UNKNOWN") for user_id in users]
                logger.warning(f"üîÑ Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è {len(fallback_priority)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return fallback_priority
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏: {e}")
                
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
                users = self.get_active_users_safe()
                return [(user_id, "ERROR") for user_id in users]
    
    def get_user_info_safe(self, user_id: int) -> Dict[str, Any]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        with self._lock:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
                if user_id in self.user_info_cache:
                    cached_info = self.user_info_cache[user_id]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞ (1 —á–∞—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)
                    if 'cached_at' in cached_info:
                        cached_at = datetime.fromisoformat(cached_info['cached_at'])
                        if (datetime.now() - cached_at).seconds < 3600:
                            return cached_info.copy()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                user_info = get_user_info(user_id)
                
                if user_info and 'error' not in user_info:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    user_info['cached_at'] = datetime.now().isoformat()
                    self.user_info_cache[user_id] = user_info
                    self.save_cache_to_file()
                    return user_info
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                return {
                    "user_id": user_id,
                    "accounts_count": 0,
                    "error": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
                return {
                    "user_id": user_id,
                    "accounts_count": 0,
                    "error": str(e)
                }
    
    def is_cache_valid(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–µ—à–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –∫–µ—à –∞–∫—Ç—É–∞–ª–µ–Ω
        """
        if not self.last_update:
            return False
        
        age_seconds = (datetime.now() - self.last_update).total_seconds()
        return age_seconds < self.cache_ttl
    
    def save_cache_to_file(self):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–µ—à –≤ —Ñ–∞–π–ª
        """
        try:
            cache_data = {
                "users_cache": self.users_cache,
                "priority_cache": self.priority_cache,
                "user_info_cache": self.user_info_cache,
                "last_update": self.last_update.isoformat() if self.last_update else None,
                "stats": self.stats,
                "saved_at": datetime.now().isoformat()
            }
            
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, indent=2, ensure_ascii=False, default=str)
            
            logger.debug(f"üíæ –ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.cache_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    
    def load_cache_from_file(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ—à –∏–∑ —Ñ–∞–π–ª–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –∫–µ—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
        """
        try:
            if not self.cache_file.exists():
                logger.debug("üìÅ –§–∞–π–ª –∫–µ—à–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫")
                return False
            
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            self.users_cache = cache_data.get('users_cache', [])
            self.priority_cache = cache_data.get('priority_cache', [])
            self.user_info_cache = cache_data.get('user_info_cache', {})
            self.stats.update(cache_data.get('stats', {}))
            
            last_update_str = cache_data.get('last_update')
            if last_update_str:
                self.last_update = datetime.fromisoformat(last_update_str)
            
            logger.info(f"üìÇ –ö–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞: {len(self.users_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def force_refresh(self) -> bool:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        with self._lock:
            try:
                logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
                
                # –û–±–Ω—É–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self.last_update = None
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                users = self.get_active_users_safe()
                priority_users = self.get_users_by_priority_safe()
                
                if users:
                    logger.info(f"‚úÖ –ö–µ—à –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞: {e}")
                return False
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–µ—à–∞
        """
        return {
            "stats": self.stats.copy(),
            "cache_size": len(self.users_cache),
            "priority_cache_size": len(self.priority_cache),
            "user_info_cache_size": len(self.user_info_cache),
            "last_update": self.last_update.isoformat() if self.last_update else None,
            "cache_valid": self.is_cache_valid(),
            "cache_age_minutes": (datetime.now() - self.last_update).total_seconds() / 60 if self.last_update else None
        }
    
    def clear_cache(self):
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à
        """
        with self._lock:
            self.users_cache = []
            self.priority_cache = []
            self.user_info_cache = {}
            self.last_update = None
            
            # –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats = {
                "cache_hits": 0,
                "cache_misses": 0,
                "fallback_used": 0,
                "errors": 0
            }
            
            logger.info("üóëÔ∏è –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–µ—à–∞
_global_user_cache = None

def get_user_cache() -> UserCache:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Returns:
        UserCache: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    global _global_user_cache
    
    if _global_user_cache is None:
        _global_user_cache = UserCache()
    
    return _global_user_cache

def process_users_with_limits(processor_func, max_users_per_cycle: int = 10, 
                             respect_system_load: bool = True):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ
    
    Args:
        processor_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç user_id)
        max_users_per_cycle: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ü–∏–∫–ª
        respect_system_load: –£—á–∏—Ç—ã–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    """
    user_cache = get_user_cache()
    users = user_cache.get_active_users_safe()
    
    if not users:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    system_monitor = SystemResourceMonitor() if respect_system_load else None
    processed_count = 0
    
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∞–∫—Å. {max_users_per_cycle} –∑–∞ —Ü–∏–∫–ª)")
    
    for i in range(0, len(users), max_users_per_cycle):
        batch = users[i:i + max_users_per_cycle]
        
        for user_id in batch:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
                if system_monitor and respect_system_load:
                    load_level = system_monitor.get_load_level()
                    if load_level and hasattr(load_level, 'max_threads') and load_level.max_threads <= 1:
                        logger.warning(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id} - —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞")
                        break
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                processor_func(user_id)
                processed_count += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                time.sleep(0.1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                continue
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        if i + max_users_per_cycle < len(users):
            time.sleep(0.5)
    
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π") 