#!/usr/bin/env python3
"""
üöÄ Redis Notification Manager - –ú–æ—â–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –ú–≥–Ω–æ–≤–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
- –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

import logging
import time
import json
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
from enum import Enum

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Redis —Å–∏—Å—Ç–µ–º–∞
from redis_access_sync import get_redis_sync

logger = logging.getLogger(__name__)

class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    ADMIN_BLOCK = "admin_block"          # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    ADMIN_UNBLOCK = "admin_unblock"      # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    SUBSCRIPTION_WARNING = "subscription_warning"  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
    SUBSCRIPTION_EXPIRED = "subscription_expired"  # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
    BROADCAST_ALL = "broadcast_all"      # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
    BROADCAST_GROUP = "broadcast_group"  # –†–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–µ
    PERSONAL = "personal"                # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    SYSTEM_UPDATE = "system_update"      # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    PROMO = "promo"                      # –ü—Ä–æ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

class NotificationPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    CRITICAL = "critical"    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
    HIGH = "high"           # –í—ã—Å–æ–∫–∏–π (–∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏)
    NORMAL = "normal"       # –û–±—ã—á–Ω—ã–π (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
    LOW = "low"             # –ù–∏–∑–∫–∏–π (–ø—Ä–æ–º–æ)

@dataclass
class Notification:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    id: str
    type: NotificationType
    priority: NotificationPriority
    title: str
    message: str
    user_id: Optional[int] = None
    user_group: Optional[str] = None  # trial, premium, free
    created_at: str = None
    scheduled_at: Optional[str] = None  # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    data: Dict[str, Any] = None  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now().isoformat()
        if self.data is None:
            self.data = {}

class RedisNotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Redis Pub/Sub"""
    
    def __init__(self):
        self.redis_client = get_redis_sync().redis_client
        self.pubsub = self.redis_client.pubsub()
        
        # –ö–∞–Ω–∞–ª—ã Redis
        self.CHANNELS = {
            'admin_actions': 'notifications:admin_actions',
            'subscription': 'notifications:subscription',
            'broadcast': 'notifications:broadcast',
            'personal': 'notifications:personal',
            'system': 'notifications:system',
            'access_added': 'access:user_added',
            'access_removed': 'access:user_removed'
        }
        
        # –ö–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.KEYS = {
            'pending': 'notifications:pending',
            'sent': 'notifications:sent',
            'scheduled': 'notifications:scheduled',
            'stats': 'notifications:stats'
        }
        
        self._listener_thread = None
        self._stop_listening = False
        self._notification_handlers = {}
        
        logger.info("üîî RedisNotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç listener –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self._listener_thread and self._listener_thread.is_alive():
            return
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        for channel in self.CHANNELS.values():
            self.pubsub.subscribe(channel)
        
        self._stop_listening = False
        self._listener_thread = threading.Thread(target=self._notification_listener, daemon=True)
        self._listener_thread.start()
        logger.info("üîÑ Notification listener –∑–∞–ø—É—â–µ–Ω")
    
    def stop_listener(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç listener"""
        self._stop_listening = True
        if self._listener_thread:
            self._listener_thread.join(timeout=2)
        logger.info("üõë Notification listener –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _notification_listener(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            for message in self.pubsub.listen():
                if self._stop_listening:
                    break
                
                if message['type'] == 'message':
                    try:
                        data = json.loads(message['data'])
                        channel = message['channel']
                        
                        logger.info(f"üî• –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: –∫–∞–Ω–∞–ª={channel}, –¥–∞–Ω–Ω—ã–µ={data}")
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                        if channel in self._notification_handlers:
                            handler = self._notification_handlers[channel]
                            logger.info(f"üìû –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
                            handler(data)
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel}")
                            
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ notification listener: {e}")
    
    def register_handler(self, channel: str, handler_func):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        self._notification_handlers[channel] = handler_func
        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel}")
    
    # ========================
    # –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    # ========================
    
    def send_admin_block_notification(self, user_id: int, admin_id: int, reason: str = ""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        notification = Notification(
            id=f"block_{user_id}_{int(time.time())}",
            type=NotificationType.ADMIN_BLOCK,
            priority=NotificationPriority.CRITICAL,
            title="üö´ –î–û–°–¢–£–ü –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù",
            message=f"–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\nüìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
            user_id=user_id,
            data={'admin_id': admin_id, 'reason': reason}
        )
        
        return self._send_notification(notification, self.CHANNELS['admin_actions'])
    
    def send_admin_unblock_notification(self, user_id: int, admin_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        notification = Notification(
            id=f"unblock_{user_id}_{int(time.time())}",
            type=NotificationType.ADMIN_UNBLOCK,
            priority=NotificationPriority.HIGH,
            title="‚úÖ –î–û–°–¢–£–ü –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù",
            message="üéâ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
            user_id=user_id,
            data={'admin_id': admin_id}
        )
        
        return self._send_notification(notification, self.CHANNELS['admin_actions'])
    
    def send_subscription_warning(self, user_id: int, days_left: int, subscription_end: datetime):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if days_left <= 0:
            return self.send_subscription_expired(user_id, subscription_end)
        
        title = f"‚è∞ –ü–û–î–ü–ò–°–ö–ê –ò–°–¢–ï–ö–ê–ï–¢ –ß–ï–†–ï–ó {days_left} –î–ù."
        if days_left == 1:
            title = "üö® –ü–û–î–ü–ò–°–ö–ê –ò–°–¢–ï–ö–ê–ï–¢ –ó–ê–í–¢–†–ê!"
        
        message = f"""‚ö†Ô∏è **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç!**

üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: **{days_left}**
üóìÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: **{subscription_end.strftime('%d.%m.%Y')}**

üîÑ **–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É**, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!

üíé –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
        
        notification = Notification(
            id=f"sub_warning_{user_id}_{days_left}",
            type=NotificationType.SUBSCRIPTION_WARNING,
            priority=NotificationPriority.HIGH if days_left <= 3 else NotificationPriority.NORMAL,
            title=title,
            message=message,
            user_id=user_id,
            data={'days_left': days_left, 'subscription_end': subscription_end.isoformat()}
        )
        
        return self._send_notification(notification, self.CHANNELS['subscription'])
    
    def send_subscription_expired(self, user_id: int, subscription_end: datetime):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        notification = Notification(
            id=f"sub_expired_{user_id}_{int(time.time())}",
            type=NotificationType.SUBSCRIPTION_EXPIRED,
            priority=NotificationPriority.CRITICAL,
            title="üö® –ü–û–î–ü–ò–°–ö–ê –ò–°–¢–ï–ö–õ–ê",
            message=f"""‚ùå **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!**

üóìÔ∏è –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: **{subscription_end.strftime('%d.%m.%Y')}**

üîí –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.

üí∞ **–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É** –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!

üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.""",
            user_id=user_id,
            data={'subscription_end': subscription_end.isoformat()}
        )
        
        return self._send_notification(notification, self.CHANNELS['subscription'])
    
    def send_broadcast_to_all(self, title: str, message: str, admin_id: int, notification_type: NotificationType = NotificationType.BROADCAST_ALL):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        notification = Notification(
            id=f"broadcast_all_{int(time.time())}",
            type=notification_type,
            priority=NotificationPriority.NORMAL,
            title=title,
            message=message,
            data={'admin_id': admin_id, 'broadcast_type': 'all'}
        )
        
        return self._send_notification(notification, self.CHANNELS['broadcast'])
    
    def send_broadcast_to_group(self, title: str, message: str, user_group: str, admin_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        notification = Notification(
            id=f"broadcast_{user_group}_{int(time.time())}",
            type=NotificationType.BROADCAST_GROUP,
            priority=NotificationPriority.NORMAL,
            title=title,
            message=message,
            user_group=user_group,
            data={'admin_id': admin_id, 'broadcast_type': 'group', 'target_group': user_group}
        )
        
        return self._send_notification(notification, self.CHANNELS['broadcast'])
    
    def send_personal_notification(self, user_id: int, title: str, message: str, admin_id: int, priority: NotificationPriority = NotificationPriority.NORMAL):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        notification = Notification(
            id=f"personal_{user_id}_{int(time.time())}",
            type=NotificationType.PERSONAL,
            priority=priority,
            title=title,
            message=message,
            user_id=user_id,
            data={'admin_id': admin_id}
        )
        
        return self._send_notification(notification, self.CHANNELS['personal'])
    
    def send_system_update_notification(self, title: str, message: str, version: str = ""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        notification = Notification(
            id=f"system_update_{int(time.time())}",
            type=NotificationType.SYSTEM_UPDATE,
            priority=NotificationPriority.HIGH,
            title=title,
            message=message,
            data={'version': version, 'update_type': 'system'}
        )
        
        return self._send_notification(notification, self.CHANNELS['system'])
    
    def _send_notification(self, notification: Notification, channel: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Redis –∫–∞–Ω–∞–ª"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending
            self.redis_client.hset(
                self.KEYS['pending'], 
                notification.id, 
                json.dumps(asdict(notification))
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            notification_dict = asdict(notification)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º enum –≤ —Å—Ç—Ä–æ–∫—É
            notification_dict['type'] = notification_dict['type'].value
            notification_dict['priority'] = notification_dict['priority'].value
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            self.redis_client.publish(channel, json.dumps(notification_dict))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats('sent')
            
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification.title} -> {channel}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    # ========================
    # –û–¢–õ–û–ñ–ï–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    # ========================
    
    def schedule_notification(self, notification: Notification, send_at: datetime) -> bool:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            notification.scheduled_at = send_at.isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ scheduled
            self.redis_client.hset(
                self.KEYS['scheduled'], 
                notification.id, 
                json.dumps(asdict(notification))
            )
            
            logger.info(f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {send_at}: {notification.title}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def process_scheduled_notifications(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            scheduled = self.redis_client.hgetall(self.KEYS['scheduled'])
            now = datetime.now()
            
            for notif_id, notif_data in scheduled.items():
                try:
                    data = json.loads(notif_data)
                    scheduled_at = datetime.fromisoformat(data['scheduled_at'])
                    
                    if now >= scheduled_at:
                        # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                        notification = Notification(**data)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ —Ç–∏–ø—É
                        channel = self._get_channel_by_type(notification.type)
                        
                        if self._send_notification(notification, channel):
                            # –£–¥–∞–ª—è–µ–º –∏–∑ scheduled
                            self.redis_client.hdel(self.KEYS['scheduled'], notif_id)
                            logger.info(f"‚è∞‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification.title}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notif_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def _get_channel_by_type(self, notification_type: NotificationType) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–Ω–∞–ª –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        mapping = {
            NotificationType.ADMIN_BLOCK: self.CHANNELS['admin_actions'],
            NotificationType.ADMIN_UNBLOCK: self.CHANNELS['admin_actions'],
            NotificationType.SUBSCRIPTION_WARNING: self.CHANNELS['subscription'],
            NotificationType.SUBSCRIPTION_EXPIRED: self.CHANNELS['subscription'],
            NotificationType.BROADCAST_ALL: self.CHANNELS['broadcast'],
            NotificationType.BROADCAST_GROUP: self.CHANNELS['broadcast'],
            NotificationType.PERSONAL: self.CHANNELS['personal'],
            NotificationType.SYSTEM_UPDATE: self.CHANNELS['system'],
            NotificationType.PROMO: self.CHANNELS['broadcast']
        }
        return mapping.get(notification_type, self.CHANNELS['personal'])
    
    # ========================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    # ========================
    
    def _update_stats(self, action: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            key = f"{self.KEYS['stats']}:{today}"
            
            self.redis_client.hincrby(key, action, 1)
            self.redis_client.hincrby(key, 'total', 1)
            
            # TTL 30 –¥–Ω–µ–π
            self.redis_client.expire(key, 30 * 24 * 3600)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_stats(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            stats = {}
            total_sent = 0
            
            for i in range(days):
                date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
                key = f"{self.KEYS['stats']}:{date}"
                
                day_stats = self.redis_client.hgetall(key)
                if day_stats:
                    stats[date] = {k: int(v) for k, v in day_stats.items()}
                    total_sent += int(day_stats.get('sent', 0))
                else:
                    stats[date] = {'sent': 0, 'total': 0}
            
            return {
                'daily_stats': stats,
                'total_sent_period': total_sent,
                'pending_count': len(self.redis_client.hgetall(self.KEYS['pending'])),
                'scheduled_count': len(self.redis_client.hgetall(self.KEYS['scheduled']))
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def mark_notification_delivered(self, notification_id: str, user_id: int):
        """–û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        try:
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–∑ pending –≤ sent
            notif_data = self.redis_client.hget(self.KEYS['pending'], notification_id)
            if notif_data:
                data = json.loads(notif_data)
                data['delivered_at'] = datetime.now().isoformat()
                data['delivered_to'] = user_id
                
                self.redis_client.hset(self.KEYS['sent'], notification_id, json.dumps(data))
                self.redis_client.hdel(self.KEYS['pending'], notification_id)
                
                self._update_stats('delivered')
                logger.debug(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_notification_manager = None

def get_notification_manager() -> RedisNotificationManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä notification manager"""
    global _notification_manager
    if _notification_manager is None:
        _notification_manager = RedisNotificationManager()
        _notification_manager.start_listener()
    return _notification_manager

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def send_block_notification(user_id: int, admin_id: int, reason: str = ""):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
    return get_notification_manager().send_admin_block_notification(user_id, admin_id, reason)

def send_unblock_notification(user_id: int, admin_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
    return get_notification_manager().send_admin_unblock_notification(user_id, admin_id)

def send_broadcast_all(title: str, message: str, admin_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    return get_notification_manager().send_broadcast_to_all(title, message, admin_id)

def send_subscription_reminder(user_id: int, days_left: int, subscription_end: datetime):
    """–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    return get_notification_manager().send_subscription_warning(user_id, days_left, subscription_end)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    nm = get_notification_manager()
    
    # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    nm.send_broadcast_to_all(
        "üöÄ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", 
        "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!", 
        123456
    )
    
    print("‚úÖ Notification Manager –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω") 
"""
üöÄ Redis Notification Manager - –ú–æ—â–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –ú–≥–Ω–æ–≤–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
- –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

import logging
import time
import json
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
from enum import Enum

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Redis —Å–∏—Å—Ç–µ–º–∞
from redis_access_sync import get_redis_sync

logger = logging.getLogger(__name__)

class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    ADMIN_BLOCK = "admin_block"          # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    ADMIN_UNBLOCK = "admin_unblock"      # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    SUBSCRIPTION_WARNING = "subscription_warning"  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
    SUBSCRIPTION_EXPIRED = "subscription_expired"  # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
    BROADCAST_ALL = "broadcast_all"      # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
    BROADCAST_GROUP = "broadcast_group"  # –†–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–µ
    PERSONAL = "personal"                # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    SYSTEM_UPDATE = "system_update"      # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    PROMO = "promo"                      # –ü—Ä–æ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

class NotificationPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    CRITICAL = "critical"    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
    HIGH = "high"           # –í—ã—Å–æ–∫–∏–π (–∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏)
    NORMAL = "normal"       # –û–±—ã—á–Ω—ã–π (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
    LOW = "low"             # –ù–∏–∑–∫–∏–π (–ø—Ä–æ–º–æ)

@dataclass
class Notification:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    id: str
    type: NotificationType
    priority: NotificationPriority
    title: str
    message: str
    user_id: Optional[int] = None
    user_group: Optional[str] = None  # trial, premium, free
    created_at: str = None
    scheduled_at: Optional[str] = None  # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    data: Dict[str, Any] = None  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now().isoformat()
        if self.data is None:
            self.data = {}

class RedisNotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Redis Pub/Sub"""
    
    def __init__(self):
        self.redis_client = get_redis_sync().redis_client
        self.pubsub = self.redis_client.pubsub()
        
        # –ö–∞–Ω–∞–ª—ã Redis
        self.CHANNELS = {
            'admin_actions': 'notifications:admin_actions',
            'subscription': 'notifications:subscription',
            'broadcast': 'notifications:broadcast',
            'personal': 'notifications:personal',
            'system': 'notifications:system',
            'access_added': 'access:user_added',
            'access_removed': 'access:user_removed'
        }
        
        # –ö–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.KEYS = {
            'pending': 'notifications:pending',
            'sent': 'notifications:sent',
            'scheduled': 'notifications:scheduled',
            'stats': 'notifications:stats'
        }
        
        self._listener_thread = None
        self._stop_listening = False
        self._notification_handlers = {}
        
        logger.info("üîî RedisNotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç listener –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self._listener_thread and self._listener_thread.is_alive():
            return
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        for channel in self.CHANNELS.values():
            self.pubsub.subscribe(channel)
        
        self._stop_listening = False
        self._listener_thread = threading.Thread(target=self._notification_listener, daemon=True)
        self._listener_thread.start()
        logger.info("üîÑ Notification listener –∑–∞–ø—É—â–µ–Ω")
    
    def stop_listener(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç listener"""
        self._stop_listening = True
        if self._listener_thread:
            self._listener_thread.join(timeout=2)
        logger.info("üõë Notification listener –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _notification_listener(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            for message in self.pubsub.listen():
                if self._stop_listening:
                    break
                
                if message['type'] == 'message':
                    try:
                        data = json.loads(message['data'])
                        channel = message['channel']
                        
                        logger.info(f"üî• –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: –∫–∞–Ω–∞–ª={channel}, –¥–∞–Ω–Ω—ã–µ={data}")
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                        if channel in self._notification_handlers:
                            handler = self._notification_handlers[channel]
                            logger.info(f"üìû –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
                            handler(data)
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel}")
                            
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ notification listener: {e}")
    
    def register_handler(self, channel: str, handler_func):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        self._notification_handlers[channel] = handler_func
        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel}")
    
    # ========================
    # –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    # ========================
    
    def send_admin_block_notification(self, user_id: int, admin_id: int, reason: str = ""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        notification = Notification(
            id=f"block_{user_id}_{int(time.time())}",
            type=NotificationType.ADMIN_BLOCK,
            priority=NotificationPriority.CRITICAL,
            title="üö´ –î–û–°–¢–£–ü –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù",
            message=f"–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\nüìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
            user_id=user_id,
            data={'admin_id': admin_id, 'reason': reason}
        )
        
        return self._send_notification(notification, self.CHANNELS['admin_actions'])
    
    def send_admin_unblock_notification(self, user_id: int, admin_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        notification = Notification(
            id=f"unblock_{user_id}_{int(time.time())}",
            type=NotificationType.ADMIN_UNBLOCK,
            priority=NotificationPriority.HIGH,
            title="‚úÖ –î–û–°–¢–£–ü –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù",
            message="üéâ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
            user_id=user_id,
            data={'admin_id': admin_id}
        )
        
        return self._send_notification(notification, self.CHANNELS['admin_actions'])
    
    def send_subscription_warning(self, user_id: int, days_left: int, subscription_end: datetime):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if days_left <= 0:
            return self.send_subscription_expired(user_id, subscription_end)
        
        title = f"‚è∞ –ü–û–î–ü–ò–°–ö–ê –ò–°–¢–ï–ö–ê–ï–¢ –ß–ï–†–ï–ó {days_left} –î–ù."
        if days_left == 1:
            title = "üö® –ü–û–î–ü–ò–°–ö–ê –ò–°–¢–ï–ö–ê–ï–¢ –ó–ê–í–¢–†–ê!"
        
        message = f"""‚ö†Ô∏è **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç!**

üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: **{days_left}**
üóìÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: **{subscription_end.strftime('%d.%m.%Y')}**

üîÑ **–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É**, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!

üíé –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."""
        
        notification = Notification(
            id=f"sub_warning_{user_id}_{days_left}",
            type=NotificationType.SUBSCRIPTION_WARNING,
            priority=NotificationPriority.HIGH if days_left <= 3 else NotificationPriority.NORMAL,
            title=title,
            message=message,
            user_id=user_id,
            data={'days_left': days_left, 'subscription_end': subscription_end.isoformat()}
        )
        
        return self._send_notification(notification, self.CHANNELS['subscription'])
    
    def send_subscription_expired(self, user_id: int, subscription_end: datetime):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        notification = Notification(
            id=f"sub_expired_{user_id}_{int(time.time())}",
            type=NotificationType.SUBSCRIPTION_EXPIRED,
            priority=NotificationPriority.CRITICAL,
            title="üö® –ü–û–î–ü–ò–°–ö–ê –ò–°–¢–ï–ö–õ–ê",
            message=f"""‚ùå **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!**

üóìÔ∏è –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: **{subscription_end.strftime('%d.%m.%Y')}**

üîí –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.

üí∞ **–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É** –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!

üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.""",
            user_id=user_id,
            data={'subscription_end': subscription_end.isoformat()}
        )
        
        return self._send_notification(notification, self.CHANNELS['subscription'])
    
    def send_broadcast_to_all(self, title: str, message: str, admin_id: int, notification_type: NotificationType = NotificationType.BROADCAST_ALL):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        notification = Notification(
            id=f"broadcast_all_{int(time.time())}",
            type=notification_type,
            priority=NotificationPriority.NORMAL,
            title=title,
            message=message,
            data={'admin_id': admin_id, 'broadcast_type': 'all'}
        )
        
        return self._send_notification(notification, self.CHANNELS['broadcast'])
    
    def send_broadcast_to_group(self, title: str, message: str, user_group: str, admin_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        notification = Notification(
            id=f"broadcast_{user_group}_{int(time.time())}",
            type=NotificationType.BROADCAST_GROUP,
            priority=NotificationPriority.NORMAL,
            title=title,
            message=message,
            user_group=user_group,
            data={'admin_id': admin_id, 'broadcast_type': 'group', 'target_group': user_group}
        )
        
        return self._send_notification(notification, self.CHANNELS['broadcast'])
    
    def send_personal_notification(self, user_id: int, title: str, message: str, admin_id: int, priority: NotificationPriority = NotificationPriority.NORMAL):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        notification = Notification(
            id=f"personal_{user_id}_{int(time.time())}",
            type=NotificationType.PERSONAL,
            priority=priority,
            title=title,
            message=message,
            user_id=user_id,
            data={'admin_id': admin_id}
        )
        
        return self._send_notification(notification, self.CHANNELS['personal'])
    
    def send_system_update_notification(self, title: str, message: str, version: str = ""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        notification = Notification(
            id=f"system_update_{int(time.time())}",
            type=NotificationType.SYSTEM_UPDATE,
            priority=NotificationPriority.HIGH,
            title=title,
            message=message,
            data={'version': version, 'update_type': 'system'}
        )
        
        return self._send_notification(notification, self.CHANNELS['system'])
    
    def _send_notification(self, notification: Notification, channel: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Redis –∫–∞–Ω–∞–ª"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending
            self.redis_client.hset(
                self.KEYS['pending'], 
                notification.id, 
                json.dumps(asdict(notification))
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            notification_dict = asdict(notification)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º enum –≤ —Å—Ç—Ä–æ–∫—É
            notification_dict['type'] = notification_dict['type'].value
            notification_dict['priority'] = notification_dict['priority'].value
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            self.redis_client.publish(channel, json.dumps(notification_dict))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats('sent')
            
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification.title} -> {channel}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    # ========================
    # –û–¢–õ–û–ñ–ï–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    # ========================
    
    def schedule_notification(self, notification: Notification, send_at: datetime) -> bool:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            notification.scheduled_at = send_at.isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ scheduled
            self.redis_client.hset(
                self.KEYS['scheduled'], 
                notification.id, 
                json.dumps(asdict(notification))
            )
            
            logger.info(f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {send_at}: {notification.title}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def process_scheduled_notifications(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            scheduled = self.redis_client.hgetall(self.KEYS['scheduled'])
            now = datetime.now()
            
            for notif_id, notif_data in scheduled.items():
                try:
                    data = json.loads(notif_data)
                    scheduled_at = datetime.fromisoformat(data['scheduled_at'])
                    
                    if now >= scheduled_at:
                        # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                        notification = Notification(**data)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ —Ç–∏–ø—É
                        channel = self._get_channel_by_type(notification.type)
                        
                        if self._send_notification(notification, channel):
                            # –£–¥–∞–ª—è–µ–º –∏–∑ scheduled
                            self.redis_client.hdel(self.KEYS['scheduled'], notif_id)
                            logger.info(f"‚è∞‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification.title}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notif_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def _get_channel_by_type(self, notification_type: NotificationType) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–Ω–∞–ª –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        mapping = {
            NotificationType.ADMIN_BLOCK: self.CHANNELS['admin_actions'],
            NotificationType.ADMIN_UNBLOCK: self.CHANNELS['admin_actions'],
            NotificationType.SUBSCRIPTION_WARNING: self.CHANNELS['subscription'],
            NotificationType.SUBSCRIPTION_EXPIRED: self.CHANNELS['subscription'],
            NotificationType.BROADCAST_ALL: self.CHANNELS['broadcast'],
            NotificationType.BROADCAST_GROUP: self.CHANNELS['broadcast'],
            NotificationType.PERSONAL: self.CHANNELS['personal'],
            NotificationType.SYSTEM_UPDATE: self.CHANNELS['system'],
            NotificationType.PROMO: self.CHANNELS['broadcast']
        }
        return mapping.get(notification_type, self.CHANNELS['personal'])
    
    # ========================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    # ========================
    
    def _update_stats(self, action: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            key = f"{self.KEYS['stats']}:{today}"
            
            self.redis_client.hincrby(key, action, 1)
            self.redis_client.hincrby(key, 'total', 1)
            
            # TTL 30 –¥–Ω–µ–π
            self.redis_client.expire(key, 30 * 24 * 3600)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_stats(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            stats = {}
            total_sent = 0
            
            for i in range(days):
                date = (datetime.now() - timedelta(days=i)).strftime('%Y-%m-%d')
                key = f"{self.KEYS['stats']}:{date}"
                
                day_stats = self.redis_client.hgetall(key)
                if day_stats:
                    stats[date] = {k: int(v) for k, v in day_stats.items()}
                    total_sent += int(day_stats.get('sent', 0))
                else:
                    stats[date] = {'sent': 0, 'total': 0}
            
            return {
                'daily_stats': stats,
                'total_sent_period': total_sent,
                'pending_count': len(self.redis_client.hgetall(self.KEYS['pending'])),
                'scheduled_count': len(self.redis_client.hgetall(self.KEYS['scheduled']))
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def mark_notification_delivered(self, notification_id: str, user_id: int):
        """–û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        try:
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–∑ pending –≤ sent
            notif_data = self.redis_client.hget(self.KEYS['pending'], notification_id)
            if notif_data:
                data = json.loads(notif_data)
                data['delivered_at'] = datetime.now().isoformat()
                data['delivered_to'] = user_id
                
                self.redis_client.hset(self.KEYS['sent'], notification_id, json.dumps(data))
                self.redis_client.hdel(self.KEYS['pending'], notification_id)
                
                self._update_stats('delivered')
                logger.debug(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_notification_manager = None

def get_notification_manager() -> RedisNotificationManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä notification manager"""
    global _notification_manager
    if _notification_manager is None:
        _notification_manager = RedisNotificationManager()
        _notification_manager.start_listener()
    return _notification_manager

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def send_block_notification(user_id: int, admin_id: int, reason: str = ""):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
    return get_notification_manager().send_admin_block_notification(user_id, admin_id, reason)

def send_unblock_notification(user_id: int, admin_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
    return get_notification_manager().send_admin_unblock_notification(user_id, admin_id)

def send_broadcast_all(title: str, message: str, admin_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    return get_notification_manager().send_broadcast_to_all(title, message, admin_id)

def send_subscription_reminder(user_id: int, days_left: int, subscription_end: datetime):
    """–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    return get_notification_manager().send_subscription_warning(user_id, days_left, subscription_end)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    nm = get_notification_manager()
    
    # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    nm.send_broadcast_to_all(
        "üöÄ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", 
        "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!", 
        123456
    )
    
    print("‚úÖ Notification Manager –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω") 