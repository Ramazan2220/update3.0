#!/usr/bin/env python3
"""
‚è∞ Subscription Monitor - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:
- –ó–∞ 7 –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
- –ó–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
- –ó–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
- –í –¥–µ–Ω—å –∏—Å—Ç–µ—á–µ–Ω–∏—è
"""

import logging
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import schedule

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from utils.notification_manager import get_notification_manager, NotificationType, NotificationPriority
from utils.access_manager import has_access

logger = logging.getLogger(__name__)

class SubscriptionMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.notification_manager = get_notification_manager()
        self._monitor_thread = None
        self._stop_monitoring = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.REMINDER_DAYS = [7, 3, 1, 0]  # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
        self.CHECK_INTERVAL = 3600  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        
        logger.info("‚è∞ SubscriptionMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if self._monitor_thread and self._monitor_thread.is_alive():
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self._stop_monitoring = False
        self._monitor_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self._monitor_thread.start()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.every().hour.do(self.check_all_subscriptions)
        schedule.every().day.at("09:00").do(self.check_all_subscriptions)  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9 —É—Ç—Ä–∞
        schedule.every().day.at("18:00").do(self.check_all_subscriptions)  # –ò –≤ 6 –≤–µ—á–µ—Ä–∞
        
        logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫"""
        self._stop_monitoring = True
        if self._monitor_thread:
            self._monitor_thread.join(timeout=5)
        
        schedule.clear()
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while not self._stop_monitoring:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)
    
    def check_all_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ admin_bot
            users = self._get_all_users_from_admin_panel()
            
            checked_count = 0
            reminders_sent = 0
            
            for user in users:
                try:
                    if self._check_user_subscription(user):
                        reminders_sent += 1
                    checked_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id', 'unknown')}: {e}")
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {checked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {reminders_sent} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    def _get_all_users_from_admin_panel(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UserService
            import sys
            import os
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'admin_bot'))
            
            from admin_bot.services.user_service import UserService
            
            user_service = UserService()
            users = user_service.get_all_users()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
            user_list = []
            for user in users:
                try:
                    user_dict = {
                        'telegram_id': user.telegram_id,
                        'username': user.username,
                        'subscription_plan': user.subscription_plan.value if user.subscription_plan else 'trial',
                        'subscription_end': user.subscription_end,
                        'is_active': user.is_active,
                        'created_at': user.created_at
                    }
                    user_list.append(user_dict)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(user_list)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return user_list
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _check_user_subscription(self, user: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = user['telegram_id']
            subscription_end = user['subscription_end']
            
            if not subscription_end:
                return False  # –ù–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if isinstance(subscription_end, str):
                subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
            
            days_left = (subscription_end - datetime.now()).days
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            should_remind = False
            priority = NotificationPriority.NORMAL
            
            if days_left in self.REMINDER_DAYS:
                should_remind = True
                
                if days_left <= 1:
                    priority = NotificationPriority.CRITICAL
                elif days_left <= 3:
                    priority = NotificationPriority.HIGH
            
            if should_remind:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
                if not self._was_reminder_sent_today(user_id, days_left):
                    self._send_subscription_reminder(user_id, days_left, subscription_end, priority)
                    self._mark_reminder_sent(user_id, days_left)
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id', 'unknown')}: {e}")
            return False
    
    def _send_subscription_reminder(self, user_id: int, days_left: int, subscription_end: datetime, priority: NotificationPriority):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        try:
            if days_left <= 0:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                self.notification_manager.send_subscription_expired(user_id, subscription_end)
                logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}")
            else:
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                self.notification_manager.send_subscription_warning(user_id, days_left, subscription_end)
                logger.info(f"‚è∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è {user_id} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {e}")
    
    def _was_reminder_sent_today(self, user_id: int, days_left: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            key = f"reminders_sent:{today}"
            reminder_key = f"{user_id}_{days_left}"
            
            redis_client = self.notification_manager.redis_client
            return redis_client.hexists(key, reminder_key)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return False
    
    def _mark_reminder_sent(self, user_id: int, days_left: int):
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            key = f"reminders_sent:{today}"
            reminder_key = f"{user_id}_{days_left}"
            
            redis_client = self.notification_manager.redis_client
            redis_client.hset(key, reminder_key, datetime.now().isoformat())
            
            # TTL 48 —á–∞—Å–æ–≤
            redis_client.expire(key, 48 * 3600)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    def check_user_subscription_manual(self, user_id: int) -> Dict[str, Any]:
        """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            users = self._get_all_users_from_admin_panel()
            user = next((u for u in users if u['telegram_id'] == user_id), None)
            
            if not user:
                return {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            subscription_end = user['subscription_end']
            if not subscription_end:
                return {'error': '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
            
            if isinstance(subscription_end, str):
                subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
            
            days_left = (subscription_end - datetime.now()).days
            
            return {
                'user_id': user_id,
                'username': user['username'],
                'subscription_plan': user['subscription_plan'],
                'subscription_end': subscription_end.isoformat(),
                'days_left': days_left,
                'is_active': user['is_active'],
                'status': 'expired' if days_left < 0 else 'expiring_soon' if days_left <= 7 else 'active'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
            return {'error': str(e)}
    
    def get_expiring_subscriptions(self, days_ahead: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏"""
        try:
            users = self._get_all_users_from_admin_panel()
            expiring = []
            
            for user in users:
                try:
                    subscription_end = user['subscription_end']
                    if not subscription_end:
                        continue
                    
                    if isinstance(subscription_end, str):
                        subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
                    
                    days_left = (subscription_end - datetime.now()).days
                    
                    if 0 <= days_left <= days_ahead:
                        expiring.append({
                            'user_id': user['telegram_id'],
                            'username': user['username'],
                            'subscription_plan': user['subscription_plan'],
                            'days_left': days_left,
                            'subscription_end': subscription_end.isoformat()
                        })
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expiring.sort(key=lambda x: x['days_left'])
            
            return expiring
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
    
    def get_monitor_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            users = self._get_all_users_from_admin_panel()
            total_users = len(users)
            
            active_subscriptions = 0
            expiring_soon = 0
            expired = 0
            
            for user in users:
                try:
                    subscription_end = user['subscription_end']
                    if not subscription_end:
                        continue
                    
                    if isinstance(subscription_end, str):
                        subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
                    
                    days_left = (subscription_end - datetime.now()).days
                    
                    if days_left < 0:
                        expired += 1
                    elif days_left <= 7:
                        expiring_soon += 1
                    else:
                        active_subscriptions += 1
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {e}")
            
            return {
                'total_users': total_users,
                'active_subscriptions': active_subscriptions,
                'expiring_soon': expiring_soon,
                'expired': expired,
                'monitoring_active': self._monitor_thread and self._monitor_thread.is_alive(),
                'last_check': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return {'error': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_subscription_monitor = None

def get_subscription_monitor() -> SubscriptionMonitor:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä subscription monitor"""
    global _subscription_monitor
    if _subscription_monitor is None:
        _subscription_monitor = SubscriptionMonitor()
        _subscription_monitor.start_monitoring()
    return _subscription_monitor

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def check_all_subscriptions():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    return get_subscription_monitor().check_all_subscriptions()

def get_expiring_subscriptions(days_ahead: int = 7):
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    return get_subscription_monitor().get_expiring_subscriptions(days_ahead)

def check_user_subscription(user_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return get_subscription_monitor().check_user_subscription_manual(user_id)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    monitor = get_subscription_monitor()
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    stats = monitor.get_monitor_stats()
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    print("\n‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
    expiring = monitor.get_expiring_subscriptions()
    for sub in expiring:
        print(f"  {sub['username']} ({sub['user_id']}): {sub['days_left']} –¥–Ω.")
    
    print("\n‚úÖ Subscription Monitor –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω") 
"""
‚è∞ Subscription Monitor - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:
- –ó–∞ 7 –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
- –ó–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
- –ó–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
- –í –¥–µ–Ω—å –∏—Å—Ç–µ—á–µ–Ω–∏—è
"""

import logging
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import schedule

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from utils.notification_manager import get_notification_manager, NotificationType, NotificationPriority
from utils.access_manager import has_access

logger = logging.getLogger(__name__)

class SubscriptionMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.notification_manager = get_notification_manager()
        self._monitor_thread = None
        self._stop_monitoring = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.REMINDER_DAYS = [7, 3, 1, 0]  # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
        self.CHECK_INTERVAL = 3600  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        
        logger.info("‚è∞ SubscriptionMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if self._monitor_thread and self._monitor_thread.is_alive():
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self._stop_monitoring = False
        self._monitor_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self._monitor_thread.start()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.every().hour.do(self.check_all_subscriptions)
        schedule.every().day.at("09:00").do(self.check_all_subscriptions)  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9 —É—Ç—Ä–∞
        schedule.every().day.at("18:00").do(self.check_all_subscriptions)  # –ò –≤ 6 –≤–µ—á–µ—Ä–∞
        
        logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫"""
        self._stop_monitoring = True
        if self._monitor_thread:
            self._monitor_thread.join(timeout=5)
        
        schedule.clear()
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while not self._stop_monitoring:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)
    
    def check_all_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ admin_bot
            users = self._get_all_users_from_admin_panel()
            
            checked_count = 0
            reminders_sent = 0
            
            for user in users:
                try:
                    if self._check_user_subscription(user):
                        reminders_sent += 1
                    checked_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id', 'unknown')}: {e}")
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {checked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {reminders_sent} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    def _get_all_users_from_admin_panel(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UserService
            import sys
            import os
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'admin_bot'))
            
            from admin_bot.services.user_service import UserService
            
            user_service = UserService()
            users = user_service.get_all_users()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
            user_list = []
            for user in users:
                try:
                    user_dict = {
                        'telegram_id': user.telegram_id,
                        'username': user.username,
                        'subscription_plan': user.subscription_plan.value if user.subscription_plan else 'trial',
                        'subscription_end': user.subscription_end,
                        'is_active': user.is_active,
                        'created_at': user.created_at
                    }
                    user_list.append(user_dict)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(user_list)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return user_list
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def _check_user_subscription(self, user: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = user['telegram_id']
            subscription_end = user['subscription_end']
            
            if not subscription_end:
                return False  # –ù–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if isinstance(subscription_end, str):
                subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
            
            days_left = (subscription_end - datetime.now()).days
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            should_remind = False
            priority = NotificationPriority.NORMAL
            
            if days_left in self.REMINDER_DAYS:
                should_remind = True
                
                if days_left <= 1:
                    priority = NotificationPriority.CRITICAL
                elif days_left <= 3:
                    priority = NotificationPriority.HIGH
            
            if should_remind:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
                if not self._was_reminder_sent_today(user_id, days_left):
                    self._send_subscription_reminder(user_id, days_left, subscription_end, priority)
                    self._mark_reminder_sent(user_id, days_left)
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id', 'unknown')}: {e}")
            return False
    
    def _send_subscription_reminder(self, user_id: int, days_left: int, subscription_end: datetime, priority: NotificationPriority):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        try:
            if days_left <= 0:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                self.notification_manager.send_subscription_expired(user_id, subscription_end)
                logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}")
            else:
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                self.notification_manager.send_subscription_warning(user_id, days_left, subscription_end)
                logger.info(f"‚è∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è {user_id} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {e}")
    
    def _was_reminder_sent_today(self, user_id: int, days_left: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            key = f"reminders_sent:{today}"
            reminder_key = f"{user_id}_{days_left}"
            
            redis_client = self.notification_manager.redis_client
            return redis_client.hexists(key, reminder_key)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return False
    
    def _mark_reminder_sent(self, user_id: int, days_left: int):
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            key = f"reminders_sent:{today}"
            reminder_key = f"{user_id}_{days_left}"
            
            redis_client = self.notification_manager.redis_client
            redis_client.hset(key, reminder_key, datetime.now().isoformat())
            
            # TTL 48 —á–∞—Å–æ–≤
            redis_client.expire(key, 48 * 3600)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    def check_user_subscription_manual(self, user_id: int) -> Dict[str, Any]:
        """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            users = self._get_all_users_from_admin_panel()
            user = next((u for u in users if u['telegram_id'] == user_id), None)
            
            if not user:
                return {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            subscription_end = user['subscription_end']
            if not subscription_end:
                return {'error': '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
            
            if isinstance(subscription_end, str):
                subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
            
            days_left = (subscription_end - datetime.now()).days
            
            return {
                'user_id': user_id,
                'username': user['username'],
                'subscription_plan': user['subscription_plan'],
                'subscription_end': subscription_end.isoformat(),
                'days_left': days_left,
                'is_active': user['is_active'],
                'status': 'expired' if days_left < 0 else 'expiring_soon' if days_left <= 7 else 'active'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
            return {'error': str(e)}
    
    def get_expiring_subscriptions(self, days_ahead: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏"""
        try:
            users = self._get_all_users_from_admin_panel()
            expiring = []
            
            for user in users:
                try:
                    subscription_end = user['subscription_end']
                    if not subscription_end:
                        continue
                    
                    if isinstance(subscription_end, str):
                        subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
                    
                    days_left = (subscription_end - datetime.now()).days
                    
                    if 0 <= days_left <= days_ahead:
                        expiring.append({
                            'user_id': user['telegram_id'],
                            'username': user['username'],
                            'subscription_plan': user['subscription_plan'],
                            'days_left': days_left,
                            'subscription_end': subscription_end.isoformat()
                        })
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expiring.sort(key=lambda x: x['days_left'])
            
            return expiring
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return []
    
    def get_monitor_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            users = self._get_all_users_from_admin_panel()
            total_users = len(users)
            
            active_subscriptions = 0
            expiring_soon = 0
            expired = 0
            
            for user in users:
                try:
                    subscription_end = user['subscription_end']
                    if not subscription_end:
                        continue
                    
                    if isinstance(subscription_end, str):
                        subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
                    
                    days_left = (subscription_end - datetime.now()).days
                    
                    if days_left < 0:
                        expired += 1
                    elif days_left <= 7:
                        expiring_soon += 1
                    else:
                        active_subscriptions += 1
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {e}")
            
            return {
                'total_users': total_users,
                'active_subscriptions': active_subscriptions,
                'expiring_soon': expiring_soon,
                'expired': expired,
                'monitoring_active': self._monitor_thread and self._monitor_thread.is_alive(),
                'last_check': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return {'error': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_subscription_monitor = None

def get_subscription_monitor() -> SubscriptionMonitor:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä subscription monitor"""
    global _subscription_monitor
    if _subscription_monitor is None:
        _subscription_monitor = SubscriptionMonitor()
        _subscription_monitor.start_monitoring()
    return _subscription_monitor

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def check_all_subscriptions():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    return get_subscription_monitor().check_all_subscriptions()

def get_expiring_subscriptions(days_ahead: int = 7):
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    return get_subscription_monitor().get_expiring_subscriptions(days_ahead)

def check_user_subscription(user_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return get_subscription_monitor().check_user_subscription_manual(user_id)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    monitor = get_subscription_monitor()
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    stats = monitor.get_monitor_stats()
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    print("\n‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
    expiring = monitor.get_expiring_subscriptions()
    for sub in expiring:
        print(f"  {sub['username']} ({sub['user_id']}): {sub['days_left']} –¥–Ω.")
    
    print("\n‚úÖ Subscription Monitor –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω") 