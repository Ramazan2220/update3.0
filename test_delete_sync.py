#!/usr/bin/env python3
"""
–¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò
"""

import sys
import os
import json

sys.path.insert(0, './utils')
sys.path.insert(0, './admin_bot')

def test_delete_sync():
    print("üóëÔ∏è –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò")
    print("=" * 80)
    
    user_id = 6626270112
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    
    try:
        from access_manager import get_access_manager, has_access, delete_user_completely
        
        access_result = has_access(user_id)
        print(f"üìä has_access({user_id}): {access_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º shared cache
        cache_file = "data/shared_access_cache.json"
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            cache = cache_data.get('cache', {})
            user_key = str(user_id)
            
            if user_key in cache:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ shared cache")
            else:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –≤ shared cache")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    # 2. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n2Ô∏è‚É£ –£–î–ê–õ–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    
    try:
        success = delete_user_completely(user_id)
        if success:
            print(f"‚úÖ delete_user_completely({user_id}) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå delete_user_completely({user_id}) –Ω–µ—É–¥–∞—á–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
    print(f"\n3Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –£–î–ê–õ–ï–ù–ò–Ø:")
    
    try:
        access_result = has_access(user_id)
        print(f"üìä has_access({user_id}): {access_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º shared cache
        cache_file = "data/shared_access_cache.json"
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            cache = cache_data.get('cache', {})
            user_key = str(user_id)
            
            if user_key in cache:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –û–°–¢–ê–õ–°–Ø –≤ shared cache")
            else:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ shared cache")
                
            print(f"üìÑ –í shared cache –æ—Å—Ç–∞–ª–∏—Å—å: {list(cache.keys())}")
            print(f"üìÖ Last update: {cache_data.get('last_update', 'N/A')}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    # 4. –°–∏–º—É–ª—è—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    print(f"\n4Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–°–ù–û–í–ù–û–ì–û –ë–û–¢–ê –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø:")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AccessManager (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
        from access_manager import AccessManager
        main_bot_access_manager = AccessManager()
        
        main_bot_result = main_bot_access_manager.has_access(user_id)
        print(f"üìä –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç has_access({user_id}): {main_bot_result}")
        
        if not main_bot_result:
            print(f"üéâ –£–°–ü–ï–•! –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –ù–ï –≤–∏–¥–∏—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        else:
            print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê! –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –í–ò–î–ò–¢ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

def main():
    test_delete_sync()

if __name__ == "__main__":
    main() 
"""
–¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò
"""

import sys
import os
import json

sys.path.insert(0, './utils')
sys.path.insert(0, './admin_bot')

def test_delete_sync():
    print("üóëÔ∏è –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò")
    print("=" * 80)
    
    user_id = 6626270112
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    
    try:
        from access_manager import get_access_manager, has_access, delete_user_completely
        
        access_result = has_access(user_id)
        print(f"üìä has_access({user_id}): {access_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º shared cache
        cache_file = "data/shared_access_cache.json"
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            cache = cache_data.get('cache', {})
            user_key = str(user_id)
            
            if user_key in cache:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ shared cache")
            else:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –≤ shared cache")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    # 2. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n2Ô∏è‚É£ –£–î–ê–õ–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    
    try:
        success = delete_user_completely(user_id)
        if success:
            print(f"‚úÖ delete_user_completely({user_id}) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå delete_user_completely({user_id}) –Ω–µ—É–¥–∞—á–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
    print(f"\n3Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –£–î–ê–õ–ï–ù–ò–Ø:")
    
    try:
        access_result = has_access(user_id)
        print(f"üìä has_access({user_id}): {access_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º shared cache
        cache_file = "data/shared_access_cache.json"
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            cache = cache_data.get('cache', {})
            user_key = str(user_id)
            
            if user_key in cache:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –û–°–¢–ê–õ–°–Ø –≤ shared cache")
            else:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ shared cache")
                
            print(f"üìÑ –í shared cache –æ—Å—Ç–∞–ª–∏—Å—å: {list(cache.keys())}")
            print(f"üìÖ Last update: {cache_data.get('last_update', 'N/A')}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    # 4. –°–∏–º—É–ª—è—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    print(f"\n4Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–°–ù–û–í–ù–û–ì–û –ë–û–¢–ê –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø:")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AccessManager (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
        from access_manager import AccessManager
        main_bot_access_manager = AccessManager()
        
        main_bot_result = main_bot_access_manager.has_access(user_id)
        print(f"üìä –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç has_access({user_id}): {main_bot_result}")
        
        if not main_bot_result:
            print(f"üéâ –£–°–ü–ï–•! –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –ù–ï –≤–∏–¥–∏—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        else:
            print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê! –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –í–ò–î–ò–¢ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

def main():
    test_delete_sync()

if __name__ == "__main__":
    main() 